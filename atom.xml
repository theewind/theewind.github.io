<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sanfeng’s blog</title>
  <subtitle>sanfengflying</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://theewind.github.io/"/>
  <updated>2016-07-01T05:16:40.000Z</updated>
  <id>http://theewind.github.io/</id>
  
  <author>
    <name>sanfeng.li</name>
    <email>sanfengflying@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shadowsocks无法更新pac</title>
    <link href="http://theewind.github.io/2016/07/01/shadowsocket%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0pac/"/>
    <id>http://theewind.github.io/2016/07/01/shadowsocket无法更新pac/</id>
    <published>2016-07-01T05:06:05.000Z</published>
    <updated>2016-07-01T05:16:40.000Z</updated>
    
    <content type="html">&lt;p&gt;这两天上网发现facebook竟然不能登录，于是首先怀疑了是不是ss账号的问题，换了几个服务器，自己的电脑还是不行，但是其他人的都可以，于是就想是不是gfwlist需要更新先，然后就操作&lt;strong&gt;·Update pac from GFWList·&lt;/strong&gt;，但是发现竟然还是request error 404. 之前自己也遇到过这样的事情，但是读没有怎么在意，今天因为要登陆facebook，所以才决定解决下的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;google一下：&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-iOS/issues/212&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不能更新 PAC 文件&lt;/a&gt;发现已经在shadowsocks的issues中提交了问题，下面分析了具体的原因，自己一路看下来，决定使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo easy_install pip  //已经安装则不需要了
sudo pip install gfwlist2pac
sh update_gfwlist.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是当打开连接&lt;a href=&quot;https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a&lt;/a&gt;取源码的时候，发现这个都打不开，真是无语（我竟然忍受了这么久。。。）。于是在github中搜索，发现还是有蛮多好心人把这个存下来的，然后自己就顺便copy了下来，代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# update_gfwlist.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Author : VincentSit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Copyright (c) http://xuexuefeng.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Example usage&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# ./whatever-you-name-this.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Task Scheduling (Optional)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#	crontab -e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# add:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 30 9 * * * sh /path/whatever-you-name-this.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Now it will update the PAC at 9:30 every day.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Remember to chmod +x the script.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GFWLIST=&amp;quot;https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PROXY=&amp;quot;127.0.0.1:1080&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;USER_RULE_NAME=&amp;quot;user-rule.txt&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;check_module_installed()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	pip list | grep gfwlist2pac &amp;amp;&amp;gt; /dev/null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [ $? -eq 1 ]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		echo &amp;quot;Installing gfwlist2pac.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pip install gfwlist2pac&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;update_gfwlist()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	echo &amp;quot;Downloading gfwlist.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	curl -s &amp;quot;$GFWLIST&amp;quot; --fail --socks5-hostname &amp;quot;$PROXY&amp;quot; --output /tmp/gfwlist.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [[ $? -ne 0 ]]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		echo &amp;quot;abort due to error occurred.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    exit 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	cd ~/.ShadowsocksX || exit 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [ -f &amp;quot;gfwlist.js&amp;quot; ]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		mv gfwlist.js ~/.Trash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [ ! -f $USER_RULE_NAME ]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		touch $USER_RULE_NAME&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	/usr/local/bin/gfwlist2pac \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --input /tmp/gfwlist.txt \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --file gfwlist.js \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --proxy &amp;quot;SOCKS5 $PROXY; SOCKS $PROXY; DIRECT&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --user-rule $USER_RULE_NAME \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --precise&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rm -f /tmp/gfwlist.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  echo &amp;quot;Updated.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;check_module_installed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;update_gfwlist&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以后需要更新rule的时候，就自己执行以下就可以了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这两天上网发现facebook竟然不能登录，于是首先怀疑了是不是ss账号的问题，换了几个服务器，自己的电脑还是不行，但是其他人的都可以，于是就想是不是gfwlist需要更新先，然后就操作&lt;strong&gt;·Update pac from GFWList·&lt;/strong&gt;，但是发现竟然还是request error 404. 之前自己也遇到过这样的事情，但是读没有怎么在意，今天因为要登陆facebook，所以才决定解决下的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://theewind.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>FBRetainCycleDetector代码学习</title>
    <link href="http://theewind.github.io/2016/06/30/FBRetainCycleDetector%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://theewind.github.io/2016/06/30/FBRetainCycleDetector代码学习/</id>
    <published>2016-06-30T09:39:28.000Z</published>
    <updated>2016-07-01T11:11:34.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/FBMemoryProfiler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBMemoryProfiler&lt;/a&gt;是Facebook开源的一款用于分析iOS内存使用和检测循环引用的工具库，可以让你在应用程序内运行循环应用检测。底层主要由&lt;a href=&quot;https://github.com/facebook/FBAllocationTracker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBAllocationTracker&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/FBRetainCycleDetector#filters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBRetainCycleDetector&lt;/a&gt;两块来实现功能。&lt;/p&gt;
&lt;h2 id=&quot;FBAllocationTracker&quot;&gt;&lt;a href=&quot;#FBAllocationTracker&quot; class=&quot;headerlink&quot; title=&quot;FBAllocationTracker&quot;&gt;&lt;/a&gt;FBAllocationTracker&lt;/h2&gt;&lt;p&gt;通过在main.m中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[FBAllocationTrackerManager sharedManager] startTrackingAllocations];
--&amp;gt;FB::AllocationTracker::beginTracking
--&amp;gt;    replaceSelectorWithSelector([NSObject class],
                            @selector(alloc),
                            @selector(fb_newAlloc),
                            FBClassMethod);

      replaceSelectorWithSelector([NSObject class],
                            sel_registerName(&amp;quot;dealloc&amp;quot;),
                            @selector(fb_newDealloc),
                            FBInstanceMethod);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就开启了内存检测，主要是通过替换对象的&lt;strong&gt;+alloc&lt;/strong&gt; 和&lt;strong&gt; -delloc&lt;/strong&gt; 方法，替换后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alloc--&amp;gt;fb_newAlloc是IMP--&amp;gt;
fb_originalAlloc--&amp;gt;alloc的IMP
所以[nsobject alloc]--&amp;gt;fb_newAlloc的IMP--&amp;gt;.....
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;FBRetainCycleDetector&quot;&gt;&lt;a href=&quot;#FBRetainCycleDetector&quot; class=&quot;headerlink&quot; title=&quot;FBRetainCycleDetector&quot;&gt;&lt;/a&gt;FBRetainCycleDetector&lt;/h2&gt;&lt;p&gt;对于通过objc_setAssociatedObject添加的对象，FBRetainCycleDetector也是可以检测的，这里就需要使用&lt;code&gt;fishbook&lt;/code&gt;来进行c函数的hook,&lt;a href=&quot;https://github.com/facebook/fishhook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fishhook&lt;/a&gt;是一个非常简单的库，它能动态替换运行在IOS模拟器或设备上Mach-o文件的符号表。是facebook的一个开源工具.&lt;img src=&quot;https://camo.githubusercontent.com/18243516844d12b1bd158ce3687635d6e48d2e2e/687474703a2f2f692e696d6775722e636f6d2f4856587148437a2e706e67&quot; alt=&quot;官网的一个截图为&quot;&gt;&lt;br&gt;官网的一张图很好的解释了fishhook的原理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dyld链接2种符号，lazy和non-lazy，fishhook可以重新链接/替换本地符号。如图所示，&lt;strong&gt;DATA区有两个section和动态符号链接相关：&lt;/strong&gt;nl_symbol_ptr 、&lt;strong&gt;la_symbol_ptr。&lt;/strong&gt;nl_symbol_ptr为一个指针数组，直接对应non-lazy绑定数据。__la_symbol_ptr也是一个指针数组，通过dyld_stub_binder辅助链接。的section头提供符号表的偏移量。图示中，1061是间接符号表的偏移量，*（偏移量+间接符号地址）=16343，即符号表偏移量。符号表中每一个结构都是一个nlist结构体，其中包含字符表偏移量。通过字符表偏移量最终确定函数指针。fishhook就是对间接符号表的偏移量动的手脚，提供一个假的nlist结构体，从而达到hook的目的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的源码想要看懂，还是需要对mach_o文件结构有比较深入的理解的。使用过程还是如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;int main(int argc, char *argv[]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [FBAssociationManager hook];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [[FBAllocationTrackerManager sharedManager] startTrackingAllocations];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [[FBAllocationTrackerManager sharedManager] enableGenerations];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return UIApplicationMain(argc, argv, NSStringFromClass([NVApplication class]), NSStringFromClass([NVAppDelegate class]));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;enableGenerations&lt;/code&gt;开始追踪类的实例对象，就像instruments中的make generations一样，每个新创建的实例都会记录在对应的generations中&lt;/p&gt;
&lt;p&gt;跟踪官方的demo（testObjectsRetainedBySomeObjectWillBeFetched），可以看到，通过object创建FBObjectiveCObject，然后调用allRetainedObjects–&amp;gt;_unfilteredRetainedObjects–&amp;gt;FBGetObjectStrongReferences–&amp;gt;FBGetStrongReferencesForClass&lt;/p&gt;
&lt;p&gt;同时也包括[super allRetainedObjects]获取associations的强引用对象，最后通过如下代码生成FBObjectiveCGraphElement，就可以进行循环引用的搜索了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (NSSet *)allRetainedObjects&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  NSArray *unfiltered = [self _unfilteredRetainedObjects];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return [self filterObjects:unfiltered];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (NSArray *)_unfilteredRetainedObjects&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Class aCls = object_getClass(self.object);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  if (!self.object || !aCls) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  NSArray *strongIvars = FBGetObjectStrongReferences(self.object, self.configuration.layoutCache);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  NSMutableArray *retainedObjects = [[[super allRetainedObjects] allObjects] mutableCopy];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for (id&amp;lt;FBObjectReference&amp;gt; ref in strongIvars) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    id referencedObject = [ref objectReferenceFromObject:self.object];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (referencedObject) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      NSArray&amp;lt;NSString *&amp;gt; *namePath = [ref namePath];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      [retainedObjects addObject:FBWrapObjectGraphElementWithContext(referencedObject,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     self.configuration,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     namePath)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;其他代码学习&quot;&gt;&lt;a href=&quot;#其他代码学习&quot; class=&quot;headerlink&quot; title=&quot;其他代码学习&quot;&gt;&lt;/a&gt;其他代码学习&lt;/h1&gt;&lt;p&gt;判断一个对象实例的iVar的类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (FBType)_convertEncodingToType:(const char *)typeEncoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  if (typeEncoding[0] == &amp;apos;&amp;#123;&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return FBStructType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  if (typeEncoding[0] == &amp;apos;@&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // It&amp;apos;s an object or block&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Let&amp;apos;s try to determine if it&amp;apos;s a block. Blocks tend to have&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // @? typeEncoding. Docs state that it&amp;apos;s undefined type, so&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // we should still verify that ivar with that type is a block&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (strncmp(typeEncoding, &amp;quot;@?&amp;quot;, 2) == 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return FBBlockType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return FBObjectType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return FBUnknownType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;以及对ivar的操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _name = @(ivar_getName(ivar));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _type = [self _convertEncodingToType:ivar_getTypeEncoding(ivar)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _offset = ivar_getOffset(ivar);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那如何区分那些是weak，那些是strong呢，这里就需要对Class的 Ivar Layout有一定的了解&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct class_ro_t &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t flags;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t instanceStart;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t instanceSize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#ifdef __LP64__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t reserved;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#endif&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const uint8_t * ivarLayout; // &amp;lt;- 记录了哪些是 strong 的 ivar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const char * name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const method_list_t * baseMethods;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const protocol_list_t * baseProtocols;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const ivar_list_t * ivars;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const uint8_t * weakIvarLayout; // &amp;lt;- 记录了哪些是 weak 的 ivar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const property_list_t *baseProperties;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以FBRetainCycleDetector中是通过取 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const uint8_t *fullLayout = class_getIvarLayout(aCls);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来获取强引用类型的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.alonemonkey.com/2016/05/15/fbretaincycledetector-analyse/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBRetainCycleDetector分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/cms/wap.php?action=article&amp;amp;id=14098&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook如何降低应用中的FOOMs（运行在前台内存不足）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2015/09/13/class-ivar-layout/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Class Ivar Layout 探索&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/facebook/FBMemoryProfiler&quot;&gt;FBMemoryProfiler&lt;/a&gt;是Facebook开源的一款用于分析iOS内存使用和检测循环引用的工具库，可以让你在应用程序内运行循环应用检测。底层主要由&lt;a href=&quot;https://github.com/facebook/FBAllocationTracker&quot;&gt;FBAllocationTracker&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/FBRetainCycleDetector#filters&quot;&gt;FBRetainCycleDetector&lt;/a&gt;两块来实现功能。&lt;/p&gt;
&lt;h2 id=&quot;FBAllocationTracker&quot;&gt;&lt;a href=&quot;#FBAllocationTracker&quot; class=&quot;headerlink&quot; title=&quot;FBAllocationTracker&quot;&gt;&lt;/a&gt;FBAllocationTracker&lt;/h2&gt;&lt;p&gt;通过在main.m中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[FBAllocationTrackerManager sharedManager] startTrackingAllocations];
--&amp;gt;FB::AllocationTracker::beginTracking
--&amp;gt;    replaceSelectorWithSelector([NSObject class],
                            @selector(alloc),
                            @selector(fb_newAlloc),
                            FBClassMethod);

      replaceSelectorWithSelector([NSObject class],
                            sel_registerName(&amp;quot;dealloc&amp;quot;),
                            @selector(fb_newDealloc),
                            FBInstanceMethod);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就开启了内存检测，主要是通过替换对象的&lt;strong&gt;+alloc&lt;/strong&gt; 和&lt;strong&gt; -delloc&lt;/strong&gt; 方法，替换后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alloc--&amp;gt;fb_newAlloc是IMP--&amp;gt;
fb_originalAlloc--&amp;gt;alloc的IMP
所以[nsobject alloc]--&amp;gt;fb_newAlloc的IMP--&amp;gt;.....
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="内存检测" scheme="http://theewind.github.io/tags/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>前端代码学习之布局</title>
    <link href="http://theewind.github.io/2016/06/30/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%83%E5%B1%80/"/>
    <id>http://theewind.github.io/2016/06/30/前端代码学习之布局/</id>
    <published>2016-06-30T06:12:05.000Z</published>
    <updated>2016-06-30T07:03:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-选择器&quot;&gt;&lt;a href=&quot;#1-选择器&quot; class=&quot;headerlink&quot; title=&quot;1 选择器&quot;&gt;&lt;/a&gt;1 选择器&lt;/h2&gt;&lt;p&gt;div p    div下所有p元素，可能多个层级&lt;br&gt;div&amp;gt;p    div下的子元素p，只能是一级&lt;br&gt;div+p    div兄弟节点的第一个p&lt;br&gt;div~p    div兄弟节点所有p元素&lt;/p&gt;
&lt;p&gt;class^=是什么意思啊&lt;/p&gt;
&lt;p&gt;这是css属性选择器的一种：[attribute^=value] ，用来匹配属性值以指定值开头的每个元素。例如：&lt;br&gt;[class^=”test”] { background:#ffff00; }&lt;/p&gt;
&lt;p&gt;表示设置 class 属性值以 “test” 开头的所有元素的背景色，也就是说对class=”test”, class=”test1” class=”test-001”的元素都是有效的。&lt;br&gt;除此之外，还有一些常用的css属性选择器如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[attribute~=value] 选取属性值中包含指定词汇的元素&lt;/li&gt;
&lt;li&gt;[attribute|=value]  选取带有以指定值开头的属性值的元素，该值必须是整个单词。&lt;/li&gt;
&lt;li&gt;[attribute$=value]    匹配属性值以指定值结尾的每个元素&lt;/li&gt;
&lt;li&gt;[attribute*=value]    匹配属性值中包含指定值的每个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;2-classList&quot;&gt;&lt;a href=&quot;#2-classList&quot; class=&quot;headerlink&quot; title=&quot;2 classList&quot;&gt;&lt;/a&gt;2 classList&lt;/h2&gt;&lt;p&gt;document.classList  属性返回元素的类名，作为DOMTokenList对象，改属性用于在元素中添加，移除及切换CSS类，它是只读的，但你可以使用remove，add修改它&lt;/p&gt;
&lt;h2 id=&quot;3-判断是否是移动设备&quot;&gt;&lt;a href=&quot;#3-判断是否是移动设备&quot; class=&quot;headerlink&quot; title=&quot;3 判断是否是移动设备&quot;&gt;&lt;/a&gt;3 判断是否是移动设备&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var IS_TOUCH_DEVICE = !!( &amp;apos;ontouchstart&amp;apos; in window );
这就是来判断 ontouchstart是不是window下的一个属性，如果是就返回真，如果不是就返回假
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ontouchstart事件只是在移动端使用的事件，要是判断用户是PC还是移动端的话，你就直接判断用户的系统是否为苹果或者安卓，WP这些就能知道是移动端的了&lt;/p&gt;
&lt;h2 id=&quot;4-和-的区别&quot;&gt;&lt;a href=&quot;#4-和-的区别&quot; class=&quot;headerlink&quot; title=&quot;4 . 和 # 的区别&quot;&gt;&lt;/a&gt;4 . 和 # 的区别&lt;/h2&gt;&lt;p&gt;id：用来定义页面中大的样式，如栏目划分，顶部，正文，底部等；用#top的形式来定义；&lt;/p&gt;
&lt;p&gt;class：用来定义一些比较细节的样式，如具体的一个菜单，一行文字等，用.text的形式来定义。&lt;/p&gt;
&lt;p&gt;定义HTML中的标签，如ul,img,p等时，直接写：img{}&lt;br&gt;class是样式组，用.style定义，class=”style”： &lt;/p&gt;
&lt;p&gt;.style定义样式组，可以被反复调用，就是说你一个页面里，可以有多个元素用同一个style； &lt;/p&gt;
&lt;p&gt;ID是固定标签，用#style1定义，ID=”style1”&lt;/p&gt;
&lt;p&gt;#main和.main有什么区别:&lt;/p&gt;
&lt;p&gt;#main 定义的是ID为”main”这个元素的样式&lt;/p&gt;
&lt;p&gt;.main 的意思是新建一个名为”main”的样式&lt;/p&gt;
&lt;p&gt;#main 只能定义ID为”main”这个元素的样式&lt;/p&gt;
&lt;p&gt;.main 一但定义以后,可以让其他的元素来调用,方法为class=”main”&lt;/p&gt;
&lt;h2 id=&quot;5-正则-ul-ol-i&quot;&gt;&lt;a href=&quot;#5-正则-ul-ol-i&quot; class=&quot;headerlink&quot; title=&quot;5 正则/^(ul|ol)$/i&quot;&gt;&lt;/a&gt;5 正则/^(ul|ol)$/i&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;i 忽略大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/^(ul|ol)$/i.test(element.nodeName) 判断element.nodeName是否符合正则表达式，test函数就是判断是否符合。&lt;/p&gt;
&lt;h2 id=&quot;6-meta&quot;&gt;&lt;a href=&quot;#6-meta&quot; class=&quot;headerlink&quot; title=&quot;6 meta&quot;&gt;&lt;/a&gt;6 meta&lt;/h2&gt;&lt;p&gt; &lt;code&gt;&amp;lt;meta name=&amp;quot;apple-mobile-web-app-capable&amp;quot; content=&amp;quot;yes&amp;quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;网站开启对web app程序的支持&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;apple-mobile-web-app-status-bar-style&amp;quot; content=&amp;quot;black&amp;quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在web app应用下状态条（屏幕顶部条）的颜色；&lt;/li&gt;
&lt;li&gt;默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/yuzhongwusan/archive/2011/11/29/2267568.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/yuzhongwusan/archive/2011/11/29/2267568.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;7-重定向&quot;&gt;&lt;a href=&quot;#7-重定向&quot; class=&quot;headerlink&quot; title=&quot;7 重定向&quot;&gt;&lt;/a&gt;7 重定向&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Redirect to the mobile index page if we&amp;apos;re on a touch device --&amp;gt;
&amp;lt;script&amp;gt;if( &amp;apos;ontouchstart&amp;apos; in window ) window.location = &amp;apos;mobile.html&amp;apos;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这句话就是判断，如果当前设备是移动设备，就将当前页面的url重定向为mobile.html，学习&lt;a href=&quot;https://github.com/hakimel/stroll.js.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stroll.js&lt;/a&gt;代码时看到的。&lt;br&gt;如果将这个放在head中，那么就会在加载页面的时候，实现自动控制。&lt;/p&gt;
&lt;h2 id=&quot;8-布局&quot;&gt;&lt;a href=&quot;#8-布局&quot; class=&quot;headerlink&quot; title=&quot;8 布局&quot;&gt;&lt;/a&gt;8 布局&lt;/h2&gt;&lt;p&gt;padding的顺序： 上 右 下 左&lt;/p&gt;
&lt;p&gt;margin:25px 50px 75px 100px;&lt;code&gt;上右下左&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;margin:25px 50px 75px;&lt;code&gt;上左下&lt;/code&gt;&lt;br&gt;margin:25px;&lt;br&gt;margin: 0 auto  如果后面跟两个参数，第一个表示 top bottom 第二个表示 left right。&lt;br&gt; 因为0 auto，表示上下边界为0，左右则根据宽度自适应相同值（即居中） &lt;/p&gt;
&lt;h2 id=&quot;9-position&quot;&gt;&lt;a href=&quot;#9-position&quot; class=&quot;headerlink&quot; title=&quot;9 position&quot;&gt;&lt;/a&gt;9 position&lt;/h2&gt;&lt;p&gt;通常使用position用于层的绝对定位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static：无特殊定位，默认，遵循html的定位规则，采用常规流向&lt;/li&gt;
&lt;li&gt;absolute: 将对象从文档常规流向中拖出，使用left，right，top，bottom等属性进行绝对定位&lt;/li&gt;
&lt;li&gt;relative: 对象不可层叠，但将依据left，right，top，bottom等属性在正常文档流中偏移位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;position:absolute；position:relative绝对定位使用通常是父级定义position:relative定位，子级定义position:absolute绝对定位属性，并且子级使用left或right和top或bottom进行绝对定位&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003095582&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000003095582&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zh.learnlayout.com/position.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/position.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;10-before-after&quot;&gt;&lt;a href=&quot;#10-before-after&quot; class=&quot;headerlink&quot; title=&quot;10 before,after&quot;&gt;&lt;/a&gt;10 before,after&lt;/h2&gt;&lt;p&gt;全部都是用before，after，hover等构成的动画，自己还没有看懂，需要慢慢消化 &lt;a href=&quot;http://zaole.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zaole.net/&lt;/a&gt;&lt;br&gt;在学习btn-8的时候，对atuo的理解：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.btn-8:before, .btn-8:after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  content: &amp;apos;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  position: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  top:0px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  left: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  width: 250px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  height: 20px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  background: #0c3829;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.btn-8:after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  top: auto;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bottom: 0px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码会显示一个上下高度为20的after何before，这里因为他们是z-index=-1，所以不会遮挡content，但是如果没有对.btn-8:after {&lt;br&gt;  top: auto;&lt;br&gt;  bottom: 0px;&lt;br&gt;}&lt;br&gt;单独配置，就会出现，两个互相重叠的效果，这也很好理解，他们的属性完全一样.btn-8:before, .btn-8:after ，添加了.btn-8:after之后，after就出现在了下面，这个是为什么呢，先看下auto的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于 static 元素，为 auto；对于长度值，则为相应的绝对长度；对于百分比数值，为指定值；否则为 auto。&lt;br&gt;对于相对定义元素，如果 top 和 bottom 都是 auto，其计算值则都是 0；如果其中之一为 auto，则取另一个值的相反数；如果二者都不是 auto，bottom 将取 top 值的相反数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以上面的css动画中，显示如下&lt;br&gt;&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/btn_8_smoosh_0.png&quot; alt=&quot;上述css布局显示如下&quot;&gt;&lt;br&gt;absolute，top：auto，bottom：0说明是从底部开始的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-选择器&quot;&gt;&lt;a href=&quot;#1-选择器&quot; class=&quot;headerlink&quot; title=&quot;1 选择器&quot;&gt;&lt;/a&gt;1 选择器&lt;/h2&gt;&lt;p&gt;div p    div下所有p元素，可能多个层级&lt;br&gt;div&amp;gt;p    div下的子元素p，只能是一级&lt;br&gt;div+p    div兄弟节点的第一个p&lt;br&gt;div~p    div兄弟节点所有p元素&lt;/p&gt;
&lt;p&gt;class^=是什么意思啊&lt;/p&gt;
&lt;p&gt;这是css属性选择器的一种：[attribute^=value] ，用来匹配属性值以指定值开头的每个元素。例如：&lt;br&gt;[class^=”test”] { background:#ffff00; }&lt;/p&gt;
&lt;p&gt;表示设置 class 属性值以 “test” 开头的所有元素的背景色，也就是说对class=”test”, class=”test1” class=”test-001”的元素都是有效的。&lt;br&gt;除此之外，还有一些常用的css属性选择器如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[attribute~=value] 选取属性值中包含指定词汇的元素&lt;/li&gt;
&lt;li&gt;[attribute|=value]  选取带有以指定值开头的属性值的元素，该值必须是整个单词。&lt;/li&gt;
&lt;li&gt;[attribute$=value]    匹配属性值以指定值结尾的每个元素&lt;/li&gt;
&lt;li&gt;[attribute*=value]    匹配属性值中包含指定值的每个元素&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://theewind.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css中的伪元素after和before的默认顺序</title>
    <link href="http://theewind.github.io/2016/06/27/css%E4%B8%AD%E7%9A%84%E4%BC%AA%E5%85%83%E7%B4%A0after%E5%92%8Cbefore%E7%9A%84%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F/"/>
    <id>http://theewind.github.io/2016/06/27/css中的伪元素after和before的默认顺序/</id>
    <published>2016-06-27T10:33:18.000Z</published>
    <updated>2016-06-30T03:20:14.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在学习CSS动画的时候，看到很多动画都是采用了&lt;code&gt;伪元素 :before和:after&lt;/code&gt;，他们是干什么的以及怎么用，可以自行google，我这里主要是对他们的顺序进行一下探讨。&lt;br&gt;乍感觉一下，after应该是在原元素的前面，而before应该是在后面，实际上不是这样的，after和before都算是他的子元素，所以默认情况下，他们都是在原始元素的前面，借用网友的一张&lt;img src=&quot;http://www.alixixi.com/web/UploadPic/2011-9/20119211128385.jpg&quot; alt=&quot;图片&quot;&gt;，他是在这样显示的，如果还有不相信的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果想自己测试下：可以试验下如下的代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#star-six &amp;#123;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		width: 0;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		height: 0;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-left: 50px solid transparent;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-right: 50px solid transparent;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-bottom: 100px solid red;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		position: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	#star-six:after &amp;#123;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content:&amp;apos;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		width: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		height: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-left: 50px solid transparent;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-right: 50px solid transparent;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-top: 100px solid green;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		position: absolute;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content: &amp;quot;&amp;quot;;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		top: 30px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		left: -50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		z-index:auto&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		#star-six:before &amp;#123;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content:&amp;apos;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		width: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		height: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-left: 50px solid transparent;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-right: 50px solid transparent;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-bottom: 100px solid yellow;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		position: absolute;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content: &amp;quot;&amp;quot;;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		top: 30px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		left: -50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			z-index:auto;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/css_after_before.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;跟上面的图片结果是一样的。那么如果想修改after和before的顺序呢，只要添加z-index:就行，比如-1等。所以很多动画效果都可以通过这个来实现，&lt;a href=&quot;http://zaole.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考网站&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://justcoding.iteye.com/blog/2032627&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://justcoding.iteye.com/blog/2032627&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.alixixi.com/web/a/2011090273706.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alixixi.com/web/a/2011090273706.shtml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在学习CSS动画的时候，看到很多动画都是采用了&lt;code&gt;伪元素 :before和:after&lt;/code&gt;，他们是干什么的以及怎么用，可以自行google，我这里主要是对他们的顺序进行一下探讨。&lt;br&gt;乍感觉一下，after应该是在原元素的前面，而before应该是在后面，实际上不是这样的，after和before都算是他的子元素，所以默认情况下，他们都是在原始元素的前面，借用网友的一张&lt;img src=&quot;http://www.alixixi.com/web/UploadPic/2011-9/20119211128385.jpg&quot; alt=&quot;图片&quot;&gt;，他是在这样显示的，如果还有不相信的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://theewind.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>在chrome中调试custom JS代码</title>
    <link href="http://theewind.github.io/2016/06/24/%E5%9C%A8chrome%E4%B8%AD%E8%B0%83%E8%AF%95Js%E4%BB%A3%E7%A0%81/"/>
    <id>http://theewind.github.io/2016/06/24/在chrome中调试Js代码/</id>
    <published>2016-06-24T03:47:19.000Z</published>
    <updated>2016-06-30T03:18:41.000Z</updated>
    
    <content type="html">&lt;p&gt;如何在chrome中调试JS代码呢，如果本身网页中就有js代码文件，那么打开chrome，mac上快捷键option+command+i，然后进入开发者模式，选择Sources，content Scripts，进行正常的调试即可，这里不做过多的介绍，需要的可以到&lt;a href=&quot;https://developer.chrome.com/devtools/docs/javascript-debugging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自己在这里主要介绍的是如何调试自己写的JS脚本，本身还没有嵌入到网页中的，这里就需要用到另外一个&lt;code&gt;Snippets&lt;/code&gt;，这个就是自己在这里写JS脚本，然后run之后，就可以在console中进行调试，跟加载在网页中的一样。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右键Snippets区域  选择new，然后创建一个js文件，这里取名hui.js&lt;/li&gt;
&lt;li&gt;编辑hui.js，并保存。&lt;/li&gt;
&lt;li&gt;右键hui.js文件，然后选择run&lt;/li&gt;
&lt;li&gt;设置断点&lt;/li&gt;
&lt;li&gt;console中执行js中的功能，记性断点调试即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/chrome_js_debug_snippets.png&quot; alt=&quot;如下截图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;###参考链接&lt;/p&gt;
&lt;p&gt;####&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/debug/snippets/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/web/tools/chrome-devtools/debug/snippets/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何在chrome中调试JS代码呢，如果本身网页中就有js代码文件，那么打开chrome，mac上快捷键option+command+i，然后进入开发者模式，选择Sources，content Scripts，进行正常的调试即可，这里不做过多的介绍，需要的可以到&lt;a hre
    
    </summary>
    
    
      <category term="javascript 前端" scheme="http://theewind.github.io/tags/javascript-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何在自己的网页中添加ga分析</title>
    <link href="http://theewind.github.io/2016/06/23/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%B7%BB%E5%8A%A0ga%E5%88%86%E6%9E%90/"/>
    <id>http://theewind.github.io/2016/06/23/如何在自己的网页中添加ga分析/</id>
    <published>2016-06-23T08:58:54.000Z</published>
    <updated>2016-06-23T10:41:38.000Z</updated>
    
    <content type="html">&lt;p&gt;在学习前端的过程中，自己都想统计用户的访问量，下面代码可以做到最轻量级的追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var _gaq = _gaq || [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _gaq.push([&amp;apos;_setAccount&amp;apos;, &amp;apos;UA-XXXXX-X&amp;apos;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _gaq.push([&amp;apos;_trackPageview&amp;apos;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var ga = document.createElement(&amp;apos;script&amp;apos;); ga.type = &amp;apos;text/javascript&amp;apos;; ga.async = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ga.src = (&amp;apos;https:&amp;apos; == document.location.protocol ? &amp;apos;https://ssl&amp;apos; : &amp;apos;http://www&amp;apos;) + &amp;apos;.google-analytics.com/ga.js&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var s = document.getElementsByTagName(&amp;apos;script&amp;apos;)[0]; s.parentNode.insertBefore(ga, s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;具体可以参考如下&lt;br&gt; &lt;a href=&quot;https://developers.google.com/analytics/devguides/collection/gajs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/analytics/devguides/collection/gajs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在学习前端的过程中，自己都想统计用户的访问量，下面代码可以做到最轻量级的追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端代码学习之scss</title>
    <link href="http://theewind.github.io/2016/06/22/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Bscss/"/>
    <id>http://theewind.github.io/2016/06/22/前端代码学习之scss/</id>
    <published>2016-06-22T10:39:03.000Z</published>
    <updated>2016-06-22T11:03:32.000Z</updated>
    
    <content type="html">&lt;p&gt;今天看到一个网站，主要都是前端动画&lt;a href=&quot;http://hakim.se&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hakim.se&lt;/a&gt;,刚好自己最近对前端比较好奇，然后就学习了其中一个demo, &lt;a href=&quot;http://codepen.io/hakimel/full/aIhkf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cloudy-spiral&lt;/a&gt;,然后这里主要记录自己在学习前端过程中的一些小的知识点，不断更新中。。。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;scss是什么&quot;&gt;&lt;a href=&quot;#scss是什么&quot; class=&quot;headerlink&quot; title=&quot;scss是什么&quot;&gt;&lt;/a&gt;scss是什么&lt;/h1&gt;&lt;p&gt;sass是css3的一个扩展，增加了规则嵌套、变量、混合、选择器集成等。通过使用命令行的工具或WEB框架插件，可以把它转成标准的、格式良好的css代码。&lt;/p&gt;
&lt;p&gt;scss即使sass的新语法，是Sassy css的简写，是css3语法的超集，也就是说所有有效的CSS3样式也同样适合于SASS。&lt;/p&gt;
&lt;h4 id=&quot;一、什么是SASS&quot;&gt;&lt;a href=&quot;#一、什么是SASS&quot; class=&quot;headerlink&quot; title=&quot;一、什么是SASS&quot;&gt;&lt;/a&gt;一、什么是SASS&lt;/h4&gt;&lt;p&gt;SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。&lt;br&gt;本文总结了SASS的主要用法。我的目标是，有了这篇文章，日常的一般使用就不需要去看官方文档了。&lt;/p&gt;
&lt;p&gt;####二、安装和使用&lt;/p&gt;
&lt;p&gt;#####2.1 安装&lt;br&gt;SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。&lt;br&gt;假定你已经安装好了Ruby，接着在命令行输入下面的命令：&lt;br&gt;gem install sass&lt;br&gt;然后，就可以使用了。&lt;/p&gt;
&lt;p&gt;#####2.2 使用&lt;br&gt;SASS文件就是普通的文本文件，里面可以直接使用CSS语法。文件后缀名是.scss，意思为Sassy CSS。&lt;br&gt;下面的命令，可以在屏幕上显示.scss文件转化的css代码。（假设文件名为test。）&lt;br&gt;sass test.scss&lt;br&gt;如果要将显示结果保存成文件，后面再跟一个.css文件名。&lt;br&gt;sass test.scss test.css&lt;br&gt;SASS提供四个编译风格的选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nested：嵌套缩进的css代码，它是默认值。&lt;/li&gt;
&lt;li&gt;expanded：没有缩进的、扩展的css代码。&lt;/li&gt;
&lt;li&gt;compact：简洁格式的css代码。&lt;/li&gt;
&lt;li&gt;compressed：压缩后的css代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生产环境当中，一般使用最后一个选项。&lt;br&gt;sass –style compressed test.sass test.css&lt;br&gt;你也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。&lt;br&gt;// watch a file&lt;br&gt;sass –watch input.scss:output.css&lt;br&gt;// watch a directory&lt;br&gt;sass –watch app/sass:public/stylesheets&lt;br&gt;SASS的官方网站，提供了一个&lt;a href=&quot;http://sass-lang.com/try.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线转换器。你可以在那里，试运行下面的各种例子。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#####2.3 基本用法&lt;br&gt;具体可以参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.frostsky.com/2014/07/sass-scss/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.frostsky.com/2014/07/sass-scss/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;sass-和-scss的区别呢&quot;&gt;&lt;a href=&quot;#sass-和-scss的区别呢&quot; class=&quot;headerlink&quot; title=&quot;sass 和 scss的区别呢&quot;&gt;&lt;/a&gt;sass 和 scss的区别呢&lt;/h1&gt;&lt;p&gt;Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：&lt;br&gt;文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名&lt;/p&gt;
&lt;p&gt;语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;先来看一个示例：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sass 语法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$font-stack: Helvetica, sans-serif  //定义变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$primary-color: #333 //定义变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;body&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font: 100% $font-stack&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: $primary-color	 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SCSS语法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$font-stack: Helvetica, sans-seri;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$primary-color: #333;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;body &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font: 100% $font-stack;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: $primary-color;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编译出来的 CSS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;body &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font: 100% Helvetica, sans-serif;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: #333;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一个网站，主要都是前端动画&lt;a href=&quot;http://hakim.se&quot;&gt;http://hakim.se&lt;/a&gt;,刚好自己最近对前端比较好奇，然后就学习了其中一个demo, &lt;a href=&quot;http://codepen.io/hakimel/full/aIhkf&quot;&gt;cloudy-spiral&lt;/a&gt;,然后这里主要记录自己在学习前端过程中的一些小的知识点，不断更新中。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://theewind.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>wkwebview同步获取返回结果</title>
    <link href="http://theewind.github.io/2016/06/21/wkwebview%E5%90%8C%E6%AD%A5%E8%8E%B7%E5%8F%96%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C/"/>
    <id>http://theewind.github.io/2016/06/21/wkwebview同步获取返回结果/</id>
    <published>2016-06-21T09:46:50.000Z</published>
    <updated>2016-06-30T03:19:32.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在测试UIWebView和WKWebView的时候，发现如下区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UIWebView执行stringByEvaluatingJavaScriptFromString方法，因为直接返回结果，所以是&lt;code&gt;同步&lt;/code&gt;的。&lt;br&gt;WKWebView执行evaluateJavaScript：completionHandler是在block中获取执行结果的，所以他是&lt;code&gt;异步&lt;/code&gt;进行的，&lt;br&gt;这样在进行性能测试的时候，发现如果不将WKWebView他修改为同步，是无法进行对比的，然后自己就通过如下方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;   - (NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)javascript &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __block NSString *res = nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __block BOOL finish = NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [self.webView evaluateJavaScript:javascript completionHandler:^(NSString *result, NSError *error)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res = result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        finish = YES;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    while(!finish) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return res;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将WKWebView修改为同步状态，然后进行对比，主要是测试JavaScript函数执行100，300，500，1000，3000次，统计时间，可以发现在相同JS功能情况下，WKWebView的效率还没有UIWebView的效率高，如&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/uiwebview_wkwebview_jscore.png&quot; alt=&quot;下图&quot;&gt;&lt;br&gt;可以看出，JavascriptCore的效率是最高的，而WKWebView改成同步以后，实际效果是最差的，分析原因也可能是因为，WKWebView不是这样用的，毕竟在无限等待中，所以结果也可能是受影响的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/3a59107aa2d2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/3a59107aa2d2&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/26778955/wkwebview-evaluate-javascript-return-value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/26778955/wkwebview-evaluate-javascript-return-value&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在测试UIWebView和WKWebView的时候，发现如下区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UIWebView执行stringByEvaluatingJavaScriptFromString方法，因为直接返回结果，所以是&lt;code&gt;同步&lt;/code&gt;的。&lt;br&gt;W
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="WKWebView" scheme="http://theewind.github.io/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>react native 新语法</title>
    <link href="http://theewind.github.io/2016/06/20/react-native-%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    <id>http://theewind.github.io/2016/06/20/react-native-新语法/</id>
    <published>2016-06-20T05:12:08.000Z</published>
    <updated>2016-06-20T05:16:17.000Z</updated>
    
    <content type="html">&lt;p&gt;最新的RN，已经全部转移到ES6，所以很多之前老的写法，会报错，比如&lt;br&gt;在react-native中引用React的做法发生了变更（在当前版本老的做法会报错）：&lt;/p&gt;
&lt;p&gt;之前&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React, { Component, View } from &amp;apos;react-native&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React, { Component } from &amp;apos;react&amp;apos;;
import { View } from &amp;apos;react-native&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体有很多，可以参考&lt;a href=&quot;https://www.facebook.com/groups/reactnativeoss/permalink/1540818949548067/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt; 科学上网。&lt;/p&gt;
&lt;p&gt;具体就是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;n React 0.14 for Web we started splitting up the React package into two packages `react` and `react-dom`. Now I&amp;apos;d like to make this consistent in React Native. The new package structure would be...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;react&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Children&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Component&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PropTypes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createElement&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cloneElement&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isValidElement&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createClass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createFactory&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createMixin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;react-native&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hasReactNativeInitialized&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;findNodeHandle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unmountComponentAtNode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unmountComponentAtNodeAndRemoveContainer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unstable_batchedUpdates&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;View&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Text&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ListView&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;and all the other native components.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;So for a lot of components you actually have to import both packages.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var React = require(&amp;apos;react&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var &amp;#123; View &amp;#125; = require(&amp;apos;react-native&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var Foo = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render() &amp;#123; return &amp;lt;View /&amp;gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;However, for components that doesn&amp;apos;t know anything about their rendering environment just need the `react` package as a dependency.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Currently a lot of these are accessible from both packages but we&amp;apos;d start issuing warnings if you use the wrong one.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This would be a little spammy so ideally we would have a simple codemod script that you can run on your imports to clean them up.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E.g. something that translates existing patterns like:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var React = require(&amp;apos;react-native&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var &amp;#123; View &amp;#125; = React;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;into:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var React = require(&amp;apos;react&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var &amp;#123; View &amp;#125; = require(&amp;apos;react-native&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;If anyone wants to write and share that script with the community, that would be highly appreciated. We can start promoting it right now before we deprecate it.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最新的RN，已经全部转移到ES6，所以很多之前老的写法，会报错，比如&lt;br&gt;在react-native中引用React的做法发生了变更（在当前版本老的做法会报错）：&lt;/p&gt;
&lt;p&gt;之前&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React, { Component, Vi
    
    </summary>
    
    
      <category term="react native" scheme="http://theewind.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>批量生成二维码</title>
    <link href="http://theewind.github.io/2016/06/13/%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://theewind.github.io/2016/06/13/批量生成二维码/</id>
    <published>2016-06-13T07:32:14.000Z</published>
    <updated>2016-06-13T07:35:05.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要是在工作的时候，需要做一个批量生成二维码的功能，通过超找网上资料，简单实现了一个demo，具体可以参考&lt;a href=&quot;https://github.com/theewind/QRCodeGenerator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;批量生成二维码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#####使用说明&lt;br&gt;主要是依赖qrcode，具体参考&lt;a href=&quot;https://pypi.python.org/pypi/qrcode/5.1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pypi.python.org/pypi/qrcode/5.1&lt;/a&gt;，qrcode又依赖Pillow。&lt;/p&gt;
&lt;p&gt;目前比较简单，就是针对输入的input目录，将二维码生成到output目录中。&lt;/p&gt;
&lt;p&gt;#####安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pip install Pillow&lt;/li&gt;
&lt;li&gt;pip install qrcode&lt;/li&gt;
&lt;li&gt;python  ./ant_qrcode.py&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果安装出现权限的问题，可以通过暴力添加sudo pip ….执行。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是在工作的时候，需要做一个批量生成二维码的功能，通过超找网上资料，简单实现了一个demo，具体可以参考&lt;a href=&quot;https://github.com/theewind/QRCodeGenerator&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
    
      <category term="qrcode" scheme="http://theewind.github.io/tags/qrcode/"/>
    
      <category term="python" scheme="http://theewind.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式的学习</title>
    <link href="http://theewind.github.io/2016/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://theewind.github.io/2016/06/12/正则表达式的学习/</id>
    <published>2016-06-12T08:26:37.000Z</published>
    <updated>2016-06-12T10:15:21.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要记录了自己在工作中用到的部分正则表达式的零星点碎的内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\\.&lt;/code&gt;，&lt;code&gt;\\|&lt;/code&gt; 等&lt;code&gt;\\&lt;/code&gt;操作。 &lt;code&gt;\\|&lt;/code&gt;这是转义的意思 “\” “|” 都是特殊字符所以需要转义，第二个反斜杠 \ 转义 |&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.imkevinyang.com/2009/08/使用正则表达式找出不包含特定字符串的条目.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前瞻后顾&lt;/a&gt; 学习 &lt;code&gt;!?&lt;/code&gt;操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;贪婪与非贪婪 &lt;code&gt;?&lt;/code&gt; 当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例&lt;code&gt;a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。
有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?&lt;/code&gt;就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：&lt;br&gt;a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;\d+：匹配数字一次或者多次&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\d.*：先匹配一位数字，剩下匹配任意字符零次或者多次&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\d.*?：*?这个表示非贪婪模式，表示匹配最少的数量匹配&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;例子：&amp;lt;DIV&amp;gt;123&amp;lt;DIV&amp;gt;456&amp;lt;DIV&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;贪婪：&amp;lt;DIV&amp;gt;.*&amp;lt;DIV&amp;gt; ====&amp;gt; &amp;lt;DIV&amp;gt;123&amp;lt;DIV&amp;gt;456&amp;lt;DIV&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;非贪婪：&amp;lt;DIV&amp;gt;.*?&amp;lt;DIV&amp;gt;====&amp;gt; &amp;lt;DIV&amp;gt;123&amp;lt;DIV&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我们闪惠的输入限制里面，有如下的正则：   &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;NSString *regex = @&amp;quot;^(?!0[^\\.])\\d+\\.?\\d&amp;#123;0,2&amp;#125;$&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;解析下来就是如下，比使用代码一个一个判断条件过滤要好太多了。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 /**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  (?!0[^\.])  第一个数字为0的时，后面只能输入小数点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  \d+\.?      小数点前（若有）只能为数字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  \d&amp;#123;0,2&amp;#125;     小数点后最多输入两位数字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     **/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;范围  / rex /gmi  g–global, m–multiline, i–ignore&lt;/li&gt;
&lt;li&gt;常用的元字符&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配除换行符以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配字母或数字或下划线或汉字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配任意的空白符,空格，tab，换行，中文全角空格等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配单词的开始或结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;匹配字符串的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;匹配字符串的结束&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;常用的限定符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;语法    说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;重复零次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;重复一次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;重复零次或一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n}&lt;/td&gt;
&lt;td&gt;重复n次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,}&lt;/td&gt;
&lt;td&gt;重复n次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,m}&lt;/td&gt;
&lt;td&gt;重复n到m次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;[]里面的不要转义，比如 [aeiou]匹配每一个元音，[.*?]匹配标点符号(.?!)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了自己在工作中用到的部分正则表达式的零星点碎的内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\\.&lt;/code&gt;，&lt;code&gt;\\|&lt;/code&gt; 等&lt;code&gt;\\&lt;/code&gt;操作。 &lt;code&gt;\\|&lt;/code&gt;这是转义的意思 “\” “|” 都是
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://theewind.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>study</title>
    <link href="http://theewind.github.io/2016/06/07/study_f8app/"/>
    <id>http://theewind.github.io/2016/06/07/study_f8app/</id>
    <published>2016-06-07T15:04:01.000Z</published>
    <updated>2016-06-08T09:59:01.000Z</updated>
    
    <content type="html">&lt;p&gt;主要是先参考如下篇文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1461512056952.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.open-open.com/lib/view/open1461512056952.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次接触redux，概念还比较模糊，同时js开发水平也一般，对一些语法学习还不是很懂，这里做个记录：&lt;br&gt;代码中的很多function func(): type的用法，我之前接触的基本都是无返回值类型的，这里添加一个 &lt;code&gt;:Action&lt;/code&gt;类型，貌似就是确定了返回值类型的，不知道理解的对不对。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* from js/actions/filter.js */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function applyTopicsFilter(topics): Action &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type: &amp;apos;APPLY_TOPICS_FILTER&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    topics,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;redux的这个流程图不错&lt;br&gt;&lt;img src=&quot;http://static.open-open.com/lib/uploadImg/20160424/20160424233655_731.png&quot; alt=&quot;组件&quot;&gt;&lt;/p&gt;
&lt;p&gt;越看越不懂，任重而道远&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;主要是先参考如下篇文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1461512056952.html&quot;&gt;http://www.open-open.com/lib/view/open1461512056952.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次接触redux，概念还比较模糊，同时js开发水平也一般，对一些语法学习还不是很懂，这里做个记录：&lt;br&gt;代码中的很多function func(): type的用法，我之前接触的基本都是无返回值类型的，这里添加一个 &lt;code&gt;:Action&lt;/code&gt;类型，貌似就是确定了返回值类型的，不知道理解的对不对。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://theewind.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>rac_willDeallocSignal的加载时机</title>
    <link href="http://theewind.github.io/2016/06/06/rac-willDeallocSignal/"/>
    <id>http://theewind.github.io/2016/06/06/rac-willDeallocSignal/</id>
    <published>2016-06-06T06:46:23.000Z</published>
    <updated>2016-06-06T07:20:08.000Z</updated>
    
    <content type="html">&lt;p&gt;今天看了下RAC的rac_willDeallocSignal的方法实现。我最初的猜测是NSObject (RACDeallocating)添加load方法，然后在里面进行method swzziling，添加dealloc方法，但是发现源码不是这样的。他只是通过常用的category 添加 associated 来进行的。先看他的简单实现：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (RACSignal *)rac_willDeallocSignal &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	RACSignal *signal = objc_getAssociatedObject(self, _cmd);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if (signal != nil) return signal;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	RACReplaySubject *subject = [RACReplaySubject subject];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	[self.rac_deallocDisposable addDisposable:[RACDisposable disposableWithBlock:^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		[subject sendCompleted];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	objc_setAssociatedObject(self, _cmd, subject, OBJC_ASSOCIATION_RETAIN);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return subject;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次我们调用一个object的rac_willDeallocSignal，先判断这个是否已经添加过了rac_willDeallocSignal的_cmd对应的关联对象，如果添加了就直接返回，如果没有添加，则生成一个subject，然后调用self.rac_deallocDisposable，在这个里面进行方法替换，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (RACCompoundDisposable *)rac_deallocDisposable &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	@synchronized (self) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		RACCompoundDisposable *compoundDisposable = objc_getAssociatedObject(self, RACObjectCompoundDisposable);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		if (compoundDisposable != nil) return compoundDisposable;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		swizzleDeallocIfNeeded(self.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		compoundDisposable = [RACCompoundDisposable compoundDisposable];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		objc_setAssociatedObject(self, RACObjectCompoundDisposable, compoundDisposable, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		return compoundDisposable;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;里面的重点是swizzleDeallocIfNeeded方法。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;static NSMutableSet *swizzledClasses() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	static dispatch_once_t onceToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	static NSMutableSet *swizzledClasses = nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	dispatch_once(&amp;amp;onceToken, ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		swizzledClasses = [[NSMutableSet alloc] init];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return swizzledClasses;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;static void swizzleDeallocIfNeeded(Class classToSwizzle) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	@synchronized (swizzledClasses()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		NSString *className = NSStringFromClass(classToSwizzle);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		if ([swizzledClasses() containsObject:className]) return;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		SEL deallocSelector = sel_registerName(&amp;quot;dealloc&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		__block void (*originalDealloc)(__unsafe_unretained id, SEL) = NULL;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		id newDealloc = ^(__unsafe_unretained id self) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			RACCompoundDisposable *compoundDisposable = objc_getAssociatedObject(self, RACObjectCompoundDisposable);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			[compoundDisposable dispose];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			if (originalDealloc == NULL) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				struct objc_super superInfo = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					.receiver = self,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					.super_class = class_getSuperclass(classToSwizzle)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				void (*msgSend)(struct objc_super *, SEL) = (__typeof__(msgSend))objc_msgSendSuper;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				msgSend(&amp;amp;superInfo, deallocSelector);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				originalDealloc(self, deallocSelector);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		IMP newDeallocIMP = imp_implementationWithBlock(newDealloc);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		if (!class_addMethod(classToSwizzle, deallocSelector, newDeallocIMP, &amp;quot;v@:&amp;quot;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			// The class already contains a method implementation.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			Method deallocMethod = class_getInstanceMethod(classToSwizzle, deallocSelector);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			// We need to store original implementation before setting new implementation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			// in case method is called at the time of setting.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			originalDealloc = (__typeof__(originalDealloc))method_getImplementation(deallocMethod);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			// We need to store original implementation again, in case it just changed.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			originalDealloc = (__typeof__(originalDealloc))method_setImplementation(deallocMethod, newDeallocIMP);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		[swizzledClasses() addObject:className];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此swizziling方法，跟我们平时常用的写法不一致，但是总体思路都是通过runtime进行替换。&lt;/p&gt;
&lt;p&gt;###总结&lt;br&gt;通过这样的形式，可以达到动态配置swizzling method的形式，如果采用+load()方法，那么进行替换的方法，不管有没有用都会执行，其实算是一种强制替换，而通过associated的形式，可以达到懒替换的效果，只在你调用的时候才进行替换，使用更方便。&lt;/p&gt;
&lt;p&gt;###后记&lt;br&gt;对某个类的方法进行监控，可以通过method swizzling的方式，也可以采用RAC的方法，比如对NSNotificationCenter进行监控，也可以通过如下方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;self.addObserverDisposable = [[center rac_signalForSelector:@selector(addObserver:selector:name:object:)]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; subscribeNext:^(RACTuple *args) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     self.removeNotificationsDisposable = [[center rac_signalForSelector:@selector(removeObserver:)]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; subscribeNext:^(RACTuple *args) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.removeSingleNotificationDisposable = [[center rac_signalForSelector:@selector(removeObserver:name:object:)]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; subscribeNext:^(RACTuple *args) &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过RAC的方式，监控某个方法，只需要在某个必执行的方法里面调用监控就可以了，当被调用的方法发现被掉哦那个，就会执行自己的{}方法。&lt;br&gt;至于他是如何执行，可以参考他的实现及解释。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了下RAC的rac_willDeallocSignal的方法实现。我最初的猜测是NSObject (RACDeallocating)添加load方法，然后在里面进行method swzziling，添加dealloc方法，但是发现源码不是这样的。他只是通过常用的category 添加 associated 来进行的。先看他的简单实现：&lt;/p&gt;
    
    </summary>
    
    
      <category term="RAC" scheme="http://theewind.github.io/tags/RAC/"/>
    
  </entry>
  
  <entry>
    <title>React Native 双listView交互动画</title>
    <link href="http://theewind.github.io/2016/06/03/doubleListViewDemo/"/>
    <id>http://theewind.github.io/2016/06/03/doubleListViewDemo/</id>
    <published>2016-06-03T03:41:01.000Z</published>
    <updated>2016-06-30T03:17:40.000Z</updated>
    
    <content type="html">&lt;p&gt;此demo算是自己学习React Natvie的一个小例子的。&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/doubleListViewdemo.gif&quot; alt=&quot;效果如下&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为开发过程中，经常需要使用两个ListView进行交互，具体实现参考&lt;a href=&quot;https://github.com/theewind/RCTDoubleListViewDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以通过点击左边的菜品分类，切换到对应的section中，也可以通过滑动右边的菜品，同步更新到左边的分类。&lt;br&gt;主要思路是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;componentDidUpdate() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  let scrollResponder = this.refs.listView.getScrollResponder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  scrollResponder.scrollResponderScrollTo(&amp;#123;x: 0, y:this.pscroll(), animated: true&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;shouldComponentUpdate(nextProps, nextState) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return nextProps.needUpdate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pscroll() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  console.log(this.props.section);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   var height = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   for (var x in spuMenuItemList) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     if (parseInt(x) &amp;lt; parseInt(this.props.section)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       height += spuMenuItemList[x].length * 100;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       height += 20;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return height;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _onScroll(event: Object) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var scrollProperties = this.refs.listView.scrollProperties;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // console.log(scrollProperties);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // console.log(scrollProperties.offset);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // console.log(this.props.section)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (this.props.fromLeftTouched) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var height = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for (var x in spuMenuItemList) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      height += spuMenuItemList[x].length * 100;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      height += 20;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      if (height &amp;gt; scrollProperties.offset) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (x != this.state.currentIndex) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          this.props.needChangeSection(parseInt(x));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          this.state.currentIndex = parseInt(x);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;此demo算是自己学习React Natvie的一个小例子的。&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/doubleListViewdemo.gif&quot; alt=&quot;效果如下&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为开发过程中，经常需要使用两个List
    
    </summary>
    
    
      <category term="react native" scheme="http://theewind.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React Native学习笔记</title>
    <link href="http://theewind.github.io/2016/05/26/ReactNative%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://theewind.github.io/2016/05/26/ReactNative 学习笔记/</id>
    <published>2016-05-26T06:36:44.000Z</published>
    <updated>2016-06-01T07:22:23.000Z</updated>
    
    <content type="html">&lt;p&gt;在学习react Native的过程中，对一些知识的记录，不定期更新。。。&lt;/p&gt;
&lt;h2 id=&quot;1-React-里直接修改-this-state-和调用-setState-修改-state-的值有什么区别？&quot;&gt;&lt;a href=&quot;#1-React-里直接修改-this-state-和调用-setState-修改-state-的值有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;1. React 里直接修改 this.state 和调用 setState() 修改 state 的值有什么区别？&quot;&gt;&lt;/a&gt;1. React 里直接修改 this.state 和调用 setState() 修改 state 的值有什么区别？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000002958584&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/q/1010000002958584&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用对this.state赋值并没有什么作用，官方提醒，应该把this.state当成不可变变量。&lt;br&gt;而使用this.setState方法，会触发异步修改状态，状态改变的同时，会重新执行一次willUpdate，render等流程。需要注意的是，避免在执行完this.setState后马上读取this.state，此操作并不会获得最新修改的状态。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;Notes:&lt;br&gt;NEVER mutate this.state directly, as calling setState() afterwards may replace the mutation you made. Treat this.state as if it were immutable.&lt;br&gt;setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.&lt;br&gt;There is no guarantee of synchronous operation of calls to setState and calls may be batched for performance gains.&lt;br&gt;setState() will always trigger a re-render unless conditional rendering logic is implemented in shouldComponentUpdate(). If mutable objects are being used and the logic cannot be implemented in shouldComponentUpdate(), calling setState() only when the new state differs from the previous state will avoid unnecessary re-renders.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-react-native-vector-icons&quot;&gt;&lt;a href=&quot;#2-react-native-vector-icons&quot; class=&quot;headerlink&quot; title=&quot;2. react-native-vector-icons&quot;&gt;&lt;/a&gt;2. react-native-vector-icons&lt;/h2&gt;&lt;p&gt;react-native-icons 是 React Native 简单易用的图标组件。&lt;/p&gt;
&lt;p&gt;当前支持 4 种字体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FontAwesome 4.2 Contains 479 icons&lt;/li&gt;
&lt;li&gt;ionicons 2.0.0 Contains 733 icons, lots of iOS 7 style outlined icons.&lt;/li&gt;
&lt;li&gt;Foundation icons Contains 283 icons.&lt;/li&gt;
&lt;li&gt;Zocial Contains 99 social icons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为在RN中没有Button，可以采用react-native-vector-icons替换，包括TabBarItem等。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import FontAwesome from &amp;apos;react-naitive-vector-icons/FontAwesome&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;FontAwesome.TabBarItem&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	key = &amp;#123;i&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	title = &amp;#123;controller.title&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	selected = &amp;#123;this.state.selectedTab === controller.title&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	iconName = &amp;#123;controller.icon&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	onPress = &amp;#123;() =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		this.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			selectedTab: controller.title&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Component navigator = &amp;#123;this.props.navigator&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/FontAwesome.TabBarItem&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import Icon from &amp;apos;react-native-vector-icons/Ionicons&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function TabBarView(props) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;TabBarIOS&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Icon.TabBarItem&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        title=&amp;quot;Home&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        iconName=&amp;quot;ios-home-outline&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        selectedIconName=&amp;quot;ios-home&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;View style=&amp;#123;styles.tabContent&amp;#125;&amp;gt;&amp;lt;Text&amp;gt;Home Tab&amp;lt;/Text&amp;gt;&amp;lt;/View&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;/Icon.TabBarItem&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/TabBarIOS&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-cloneWithRows&quot;&gt;&lt;a href=&quot;#3-cloneWithRows&quot; class=&quot;headerlink&quot; title=&quot;3. cloneWithRows&quot;&gt;&lt;/a&gt;3. cloneWithRows&lt;/h2&gt;&lt;p&gt;一般我们都是这样写ListViewDataSource的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let ds = new ListView.DataSource(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rowHasChanged: (r1, r2) =&amp;gt; r1 !== r2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;this.state = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dataSource: ds.cloneWithRows(menuCategroys),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;而不是这样：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;this.state = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataSource: new ListView.DataSource(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rowHasChanged: (row1, row2) =&amp;gt; row1 !== row2,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要是因为，cloneWithRows不仅仅是赋值数据，还会有一些对比操作，判断里面的rowdata是否有更新等操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29351259/how-to-add-delete-item-into-listview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to add/Delete item into ListView?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;4-onLayout方法&quot;&gt;&lt;a href=&quot;#4-onLayout方法&quot; class=&quot;headerlink&quot; title=&quot;4. onLayout方法&quot;&gt;&lt;/a&gt;4. onLayout方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;onLayout&lt;/strong&gt; &lt;em&gt;function&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;当组件挂载或者布局变化的时候调用，参数为：&lt;/p&gt;
&lt;p&gt;{nativeEvent: { layout: {x, y, width, height}}}&lt;/p&gt;
&lt;p&gt;这个事件会在布局计算完成后立即调用一次，不过收到此事件时新的布局可能还没有在屏幕上呈现，尤其是一个布局动画正在进行中的时候。    &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;onLayout=&amp;#123;(event) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          var layout = event.nativeEvent.layout;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          this.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              listHeight : layout.height&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于ListView来说，滑动的过程中不会重新调用onLayout，所以这里的listHeight始终不变，不能用来监控滑动。&lt;/p&gt;
&lt;h2 id=&quot;5-this-setState&quot;&gt;&lt;a href=&quot;#5-this-setState&quot; class=&quot;headerlink&quot; title=&quot;5. this.setState&quot;&gt;&lt;/a&gt;5. this.setState&lt;/h2&gt;&lt;p&gt;this.setState设置一个参数形式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;CategoryMenu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    key=&amp;#123;&amp;apos;category_menu&amp;apos;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    categories=&amp;#123;this.state.newsCategories&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    fetchNewsList=&amp;#123;(category) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        this.setState(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            currentCategory: category,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            isRefreshing: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &amp;#125;,  function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            this._fetchNewsList();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在CategoryMenu中传入key（默认的props属性），categories获取的分类，已经方法fetchNewsList，而fetchNewList方法主要是更新自身的state，并发送请求，更新state属性，并调用某个方法。因为上述要点1中说过，setState并不会立即生效，调用this.state可能还是就的数据，既可以通过这种方式立即出发自己的某些操作。比如此处的_fetchNewsList，如果currentCategory没有生效，可以把catetory当做参数传递过去。&lt;/p&gt;
&lt;h2 id=&quot;6-render方法如何根据条件进行渲染&quot;&gt;&lt;a href=&quot;#6-render方法如何根据条件进行渲染&quot; class=&quot;headerlink&quot; title=&quot;6. render方法如何根据条件进行渲染&quot;&gt;&lt;/a&gt;6. render方法如何根据条件进行渲染&lt;/h2&gt;&lt;p&gt;在render（）方法里面，经常遇到的就是根据条件进行渲染，特别是对于彼此之间有显示隐藏逻辑，这时候如果把所有view都绘制出来，然后布局，显然比较复杂，这时就可以采用分条件布局的方式。简单说就是先声明一个数组，然后根据各种逻辑，进行push操作，把各种view push进之前的数组中，最后，渲染那个view的数组就可以了。&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;        let NavigationBar = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 左边图片按钮&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (this.props.leftIcon != undefined) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NavigationBar.push(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;TouchableOpacity&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    key=&amp;#123;&amp;apos;leftIcon&amp;apos;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    activeOpacity=&amp;#123;0.75&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    style=&amp;#123;styles.leftIcon&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    onPress=&amp;#123;this.props.leftTouchAction&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;lt;Icon color=&amp;quot;white&amp;quot; size=&amp;#123;30&amp;#125; name=&amp;#123;this.props.leftIcon&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;/TouchableOpacity&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (this.props.title != undefined) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NavigationBar.push(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;Text key=&amp;#123;&amp;apos;title&amp;apos;&amp;#125; style=&amp;#123;styles.title&amp;#125;&amp;gt;&amp;#123;this.props.title&amp;#125;&amp;lt;/Text&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 自定义标题View&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (this.props.titleView != undefined) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            let Component = this.props.titleView;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NavigationBar.push(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;Component key=&amp;#123;&amp;apos;titleView&amp;apos;&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 右边图片按钮&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (this.props.rightIcon != undefined) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NavigationBar.push(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;TouchableOpacity&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    key=&amp;#123;&amp;apos;rightIcon&amp;apos;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    activeOpacity=&amp;#123;0.75&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    style=&amp;#123;styles.rightIcon&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    onPress=&amp;#123;this.props.rightTouchAction&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;lt;Icon color=&amp;quot;white&amp;quot; size=&amp;#123;30&amp;#125; name=&amp;#123;this.props.rightIcon&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;/TouchableOpacity&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 右边文字按钮&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (this.props.rightButton != undefined) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NavigationBar.push(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;TouchableOpacity&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    key=&amp;#123;&amp;apos;rightButton&amp;apos;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    activeOpacity=&amp;#123;0.75&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    style=&amp;#123;styles.rightButton&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    onPress=&amp;#123;this.props.rightButtonAction&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;lt;Text style=&amp;#123;styles.buttonTitleFont&amp;#125;&amp;gt;&amp;#123;this.props.rightButton&amp;#125;&amp;lt;/Text&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;/TouchableOpacity&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;View style=&amp;#123;styles.header&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;View style=&amp;#123;styles.navigationBarContainer&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#123;NavigationBar&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;/View&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;/View&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;根据条件进行push操作，得到一个渲染列表。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一种方式是通过，匿名函数的方式，返回一个个的view，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;const secondLine = (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;View style = &amp;#123;styles.secondLineView&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;(()=&amp;gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          if (spu.recomCount &amp;gt; 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;View style style = &amp;#123;styles.rowView&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;Image source=&amp;#123;require(&amp;apos;../../../asset/od_icon_smallzan.png&amp;apos;)&amp;#125; style = &amp;#123;styles.imageLike&amp;#125;&amp;gt;&amp;lt;/Image&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;Text style = &amp;#123;[styles.detailText,styles.liketext]&amp;#125;&amp;gt;&amp;#123;spu.recomCount&amp;#125;&amp;lt;/Text&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;/View&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)()&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;(()=&amp;gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          if (spu.dishSales &amp;amp;&amp;amp; spu.dishSales.length &amp;gt; 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;View&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;Text style = &amp;#123;styles.detailText&amp;#125;&amp;gt;&amp;#123;spu.dishSales&amp;#125;&amp;lt;/Text&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &amp;lt;/View&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)()&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;/View&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;7-字体使用：ionIcons-amp-AwesomeFont&quot;&gt;&lt;a href=&quot;#7-字体使用：ionIcons-amp-AwesomeFont&quot; class=&quot;headerlink&quot; title=&quot;7. 字体使用：ionIcons &amp;amp; AwesomeFont&quot;&gt;&lt;/a&gt;7. 字体使用：ionIcons &amp;amp; AwesomeFont&lt;/h2&gt;&lt;p&gt;ionicons 包含超过 430 个免费漂亮的程序图标。该图标集采用 MIT 许可证，你可在商业应用中使用。它和AwesomeFont的字体就是矢量图,无论是放大还是缩小都不失真的矢量图哦。不仅是在ReactNative中使用，即使是iOS native开发中，也可以使用的。&lt;br&gt;可以导入FontAwesomeKit框架。更高级的方式，是把字体转换成路径，然后就可以执行各种CoreAnimation的动画了。&lt;a href=&quot;http://www.tuicool.com/articles/2MJNZn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考动画&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而在使用的过程中，只要导入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import Icon from &amp;apos;react-native-vector-icons/Ionicons&amp;apos;;
import IconFA from &amp;apos;react-native-vector-icons/FontAwesome&amp;apos;;
然后自己定义属性：
{
    key:28,
    title:&amp;quot;iMessage image picker&amp;quot;,
    component: Day29,
    isFA: false,
    icon: &amp;quot;navicon-round&amp;quot;,
    size:50,
    color:&amp;quot;#48f52e&amp;quot;,
    hideNav: false,
  },{
    key:29,
    title:&amp;quot;Push Notifications&amp;quot;,
    component: Day30,
    isFA: false,
    icon: &amp;quot;android-notifications&amp;quot;,
    size:50,
    color:&amp;quot;#f27405&amp;quot;,
    hideNav: false,
  }]

  render方法里面调用：
  {elem.isFA? &amp;lt;IconFA size={elem.size} name={elem.icon} style={[styles.boxIcon,{color:elem.color}]}&amp;gt;&amp;lt;/IconFA&amp;gt;:
          &amp;lt;Icon size={elem.size} name={elem.icon} style={[styles.boxIcon,{color:elem.color}]}&amp;gt;&amp;lt;/Icon&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;8-如何从listView中获取scrollView的属性&quot;&gt;&lt;a href=&quot;#8-如何从listView中获取scrollView的属性&quot; class=&quot;headerlink&quot; title=&quot;8. 如何从listView中获取scrollView的属性&quot;&gt;&lt;/a&gt;8. 如何从listView中获取scrollView的属性&lt;/h2&gt;&lt;p&gt;需要定义ref&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;ListView&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ref=&amp;quot;listView&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dataSource=&amp;#123;this.state.dataSource&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        renderRow=&amp;#123;this._renderRow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        onScroll=&amp;#123;this.handleScroll&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;/View&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;      var scrollProperties = this.refs.listView.scrollProperties;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      console.log(scrollProperties);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      console.log(scrollProperties.offset);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      手动滚动到某处&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;componentDidUpdate() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    let scrollResponder = this.refs.listView.getScrollResponder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    scrollResponder.scrollResponderScrollTo(&amp;#123;x: 0, y:this.pscroll(), animated: true&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过scrollProperties，然后就可以获取offset了。&lt;br&gt;还有一种方式是通过：event.nativeEvent.contentOffset.y获得。参考&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;handleScroll: function(event: Object) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (event.nativeEvent.contentOffset.y &amp;lt; -110) &amp;#123; // pull-down&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.setState(&amp;#123;isLoading: true&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var filter = this.props.filter || this.state.filter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // reduce dup fetches&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.clearTimeout(this.timeoutID);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.timeoutID = this.setTimeout(() =&amp;gt; this.fetchVideos(filter), 250);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;在学习react Native的过程中，对一些知识的记录，不定期更新。。。&lt;/p&gt;
&lt;h2 id=&quot;1-React-里直接修改-this-state-和调用-setState-修改-state-的值有什么区别？&quot;&gt;&lt;a href=&quot;#1-React-里直接修改-this-state-和调用-setState-修改-state-的值有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;1. React 里直接修改 this.state 和调用 setState() 修改 state 的值有什么区别？&quot;&gt;&lt;/a&gt;1. React 里直接修改 this.state 和调用 setState() 修改 state 的值有什么区别？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000002958584&quot;&gt;https://segmentfault.com/q/1010000002958584&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用对this.state赋值并没有什么作用，官方提醒，应该把this.state当成不可变变量。&lt;br&gt;而使用this.setState方法，会触发异步修改状态，状态改变的同时，会重新执行一次willUpdate，render等流程。需要注意的是，避免在执行完this.setState后马上读取this.state，此操作并不会获得最新修改的状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://theewind.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>iOS下载内容保存在document中需要设置不同步</title>
    <link href="http://theewind.github.io/2016/05/26/iOS%E4%B8%8B%E8%BD%BD%E5%86%85%E5%AE%B9%E4%BF%9D%E5%AD%98%E5%9C%A8document%E4%B8%AD%E9%9C%80%E8%A6%81%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%90%8C%E6%AD%A5/"/>
    <id>http://theewind.github.io/2016/05/26/iOS下载内容保存在document中需要设置不同步/</id>
    <published>2016-05-26T03:26:03.000Z</published>
    <updated>2016-05-26T03:29:34.000Z</updated>
    
    <content type="html">&lt;p&gt;之前因为在document，保存了下载数据，导致app审核不通过。这个苹果是严格要求，网络下载的数据一般是不能保存在document目录中，建议是保存在cache中，如果真的需要保存在document中，就需要对保存的内容设置不同步标识。具体代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (BOOL)addSkipBackupAttributeToItemAtURL:(NSURL *)URL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (![[NSFileManager defaultManager] fileExistsAtPath:[URL path]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    BOOL success = NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSError *error = nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    success = [URL setResourceValue:[NSNumber numberWithBool: YES]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             forKey:NSURLIsExcludedFromBackupKey error: &amp;amp;error];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return success;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前因为在document，保存了下载数据，导致app审核不通过。这个苹果是严格要求，网络下载的数据一般是不能保存在document目录中，建议是保存在cache中，如果真的需要保存在document中，就需要对保存的内容设置不同步标识。具体代码如下：&lt;/p&gt;
&lt;figur
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="缓存" scheme="http://theewind.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>iOS横屏应用旋转无动画</title>
    <link href="http://theewind.github.io/2016/05/14/iOS%E6%A8%AA%E5%B1%8F%E5%BA%94%E7%94%A8%E6%97%8B%E8%BD%AC%E6%97%A0%E5%8A%A8%E7%94%BB/"/>
    <id>http://theewind.github.io/2016/05/14/iOS横屏应用旋转无动画/</id>
    <published>2016-05-14T06:43:33.000Z</published>
    <updated>2016-05-14T06:56:10.000Z</updated>
    
    <content type="html">&lt;p&gt;最近开发一个仅支持横屏的应用，发现进行180°旋转的时候没有动画，Google也没有找到有用的信息，显示的情况跟下面链接中的比较像&lt;a href=&quot;http://stackoverflow.com/questions/32848456/ios-9-orientation-auto-rotation-animation-not-working-but-always-on-main-thread/37222383#37222383&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;无动画效果&lt;/a&gt;. 最后在苹果的官网资料上找到了灵感：&lt;a href=&quot;https://developer.apple.com/library/ios/technotes/tn2244/_index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/ios/technotes/tn2244/_index.html&lt;/a&gt;&lt;br&gt;自己就是根据这个里面的内容，全部进行了操作，最后发现是LaunchScreen.stroyboard的问题，在&lt;br&gt;&lt;img src=&quot;http://7xthb9.com1.z0.glb.clouddn.com/launchScreen.png&quot; alt=&quot;设置&quot;&gt; 中对Main Interface 和 Launch Screen File都设置成了空，将Launch Images Source 另外指定了图片，然后就解决了此问题。&lt;/p&gt;
&lt;p&gt;我的解决方案不一定完全使用所有的情况，这里仅仅是做一个记录，有需要的可以试一下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近开发一个仅支持横屏的应用，发现进行180°旋转的时候没有动画，Google也没有找到有用的信息，显示的情况跟下面链接中的比较像&lt;a href=&quot;http://stackoverflow.com/questions/32848456/ios-9-orientation-a
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>命令行解释括号说明</title>
    <link href="http://theewind.github.io/2016/05/03/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E9%87%8A%E6%8B%AC%E5%8F%B7%E8%AF%B4%E6%98%8E/"/>
    <id>http://theewind.github.io/2016/05/03/命令行解释括号说明/</id>
    <published>2016-05-03T07:37:24.000Z</published>
    <updated>2016-05-03T07:46:35.000Z</updated>
    
    <content type="html">&lt;p&gt;命令行解释括号的作用：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表示法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;不带方括号或大括号的文本&lt;/td&gt;
&lt;td&gt;您必须键入如下所示的项目&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;尖括号内的文本&amp;gt;&lt;/td&gt;
&lt;td&gt;您必须为其提供的占位符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[方括号内的文本]&lt;/td&gt;
&lt;td&gt;可选的项目&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{大括号内的文本}&lt;/td&gt;
&lt;td&gt;一组所需的项目，选择一个&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;竖线（\&lt;/td&gt;
&lt;td&gt;）&lt;/td&gt;
&lt;td&gt;互斥项&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git [--version] [--help] [-C &amp;lt;path&amp;gt;] [-c name=value]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NAME&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       git-checkout - Switch branches or restore working tree files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SYNOPSIS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       git checkout [-q] [-f] [-m] [&amp;lt;branch&amp;gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       git checkout [-q] [-f] [-m] --detach [&amp;lt;branch&amp;gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       git checkout [-q] [-f] [-m] [--detach] &amp;lt;commit&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       git checkout [-q] [-f] [-m] [[-b|-B|--orphan] &amp;lt;new_branch&amp;gt;] [&amp;lt;start_point&amp;gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       git checkout [-f|--ours|--theirs|-m|--conflict=&amp;lt;style&amp;gt;] [&amp;lt;tree-ish&amp;gt;] [--] &amp;lt;paths&amp;gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       git checkout [-p|--patch] [&amp;lt;tree-ish&amp;gt;] [--] [&amp;lt;paths&amp;gt;...]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;命令行解释括号的作用：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表示法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;不带方括号或大括号的文本&lt;/td&gt;
&lt;td&gt;您必须键入如下所示的项目&lt;/td&gt;
&lt;td
    
    </summary>
    
    
      <category term="shell" scheme="http://theewind.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>shell命令学习</title>
    <link href="http://theewind.github.io/2016/05/03/shell%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>http://theewind.github.io/2016/05/03/shell命令学习/</id>
    <published>2016-05-03T06:49:51.000Z</published>
    <updated>2016-05-03T07:35:43.000Z</updated>
    
    <content type="html">&lt;p&gt;提交Jenkins的时候，会用到部分命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;df -h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Filesystem      Size   Used  Avail Capacity  iused   ifree %iused  Mounted on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/disk1     233Gi  199Gi   33Gi    86% 52321616 8659602   86%   /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;devfs          187Ki  187Ki    0Bi   100%      648       0  100%   /dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map -hosts       0Bi    0Bi    0Bi   100%        0       0  100%   /net&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;map auto_home    0Bi    0Bi    0Bi   100%        0       0  100%   /home&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;df 命令：&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;linux中df命令的功能是用来检查linux服务器的文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;date命令&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;修改linux的时间可以使用date指令 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;date&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Tue May  3 14:53:22 CST 2016&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;➜  _posts git:(master) ✗ date &amp;apos;+Current time: %H:%M:%S&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Current time: 14:53:24 //可见这里会自定义输出date的格式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;修改日期： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;时间设定成2009年5月10日的命令如下：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;date -s 05/10/2009 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;修改时间： &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;将系统时间设定成上午10点18分0秒的命令如下。 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;date -s 10:18:00&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;git命令**&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;git branch newBranch   创建新分支 git br &lt;/p&gt;
&lt;p&gt;git checkout newBranch    切换到新分支 git co&lt;/p&gt;
&lt;p&gt;合并： git checkout -b newBranch&lt;br&gt;简写： git co -b newBranch&lt;/p&gt;
&lt;p&gt;git br nnew [commit] 以某次commit创建分支&lt;/p&gt;
&lt;p&gt;git checkout -B &lt;branch&gt;&lt;/branch&gt;&lt;/p&gt;
&lt;p&gt;这个命令，可以强制创建新的分支，为什么加-B呢？如果当前仓库中，已经存在一个跟你新建分支同名的分支，那么使用普通的git checkout -b &lt;branch&gt;这个命令，是会报错的，且同名分支无法创建。如果使用-B参数，那么就可以强制创建新的分支，并会覆盖掉原来的分支。&lt;/branch&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;提交Jenkins的时候，会用到部分命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2
    
    </summary>
    
    
      <category term="shell" scheme="http://theewind.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>thrift学习</title>
    <link href="http://theewind.github.io/2016/04/29/thrift-study/"/>
    <id>http://theewind.github.io/2016/04/29/thrift-study/</id>
    <published>2016-04-29T09:44:20.000Z</published>
    <updated>2016-04-28T09:58:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;其实thrift和点评的nvobject蛮像的，其中，TBinaryProtocol都是二进制传输，然后将属性的字段进行压缩，较少网络传输的数据。&lt;br&gt;比如点评是采用hash值，每个对象的属性都有个hash值，然后传输此hash值，客户端根据hash值对应属性，而thrift是采用编号的方式，在idl描述文件中，就已经设置好了编号，然后传输编号到服务端，客户端根据编号对应属性。
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;thrift -gen cocoa &lt;em&gt;**&lt;/em&gt;&lt;/strong&gt;.thrift 生成.h.m文件，然后添加工程，然后调用方法如下：**&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##例如：&lt;br&gt;METMemberCardServiceClient是最终发送请求的类，而他依赖TBinaryProtocol&lt;tportocol&gt;&lt;/tportocol&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)getDisplayTypefinished:(void(^)(METMineMembercardExhibitionType result, SAKError *error))finished
{
NSDictionary *headerParams = @{@&amp;quot;token&amp;quot; : kUserToken, @&amp;quot;userId&amp;quot; : kUserID, @&amp;quot;clientKey&amp;quot; :  @&amp;quot;group&amp;quot;};
TBinaryProtocol *binaryProtocol = [self createThriftProtocol:kMemberCardServiceURLString headerParameters:headerParams];
METMemberCardServiceClient *memberCardService = [[METMemberCardServiceClient alloc] initWithProtocol:binaryProtocol];
[memberCardService getDisplayTypefinished:^(int result, SAKError *error) {
    if (error) {
        if (finished) {
            @within_main_thread(finished, 0, error);
        }
        return;
    }
    if (finished) {
        @within_main_thread(finished, result, error);
    }
}];
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TBinaryProtocol的构造需要SAKMascoTransport&lt;ttransport&gt;，而SAKMascoTransport&lt;ttransport&gt;的构造需要：THTTPClient&lt;ttransport&gt;，其中SAKMascoTransport是对THTTPClient的封装。&lt;br&gt;THTTPClient的概念比较简单，主要是read，write及flush（发送网络请求），不管数据的意义，而SAKMascoTransport是有数据概念的，比如header，body，元数据等，将有意义的数据进行组合后，然后掉用THTTPClient的read，write等。&lt;/ttransport&gt;&lt;/ttransport&gt;&lt;/ttransport&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (TBinaryProtocol *)createThriftProtocol:(NSString *)serviceURLString headerParameters:(NSDictionary *)headerParameters
{
NSString *commonParameterString = [[[SAKEnvironment environment] commonParameter] queryStringEncoded];
NSString *serviceURLStringWithCommonParameter = [NSString stringWithFormat:@&amp;quot;%@?%@&amp;quot;, serviceURLString, commonParameterString];
THTTPClient *httpClient = [[THTTPClient alloc] initWithURL:[NSURL URLWithString:serviceURLStringWithCommonParameter]];
SAKMascoTransport *mascoTransport = [[SAKMascoTransport alloc] initWithTransport:httpClient andSerialID:1];

[headerParameters enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {
    NSString *keyString = (NSString *)key;
    if (keyString.length) {
        [mascoTransport appendHeaderData:[keyString dataUsingEncoding:NSUTF8StringEncoding]];
    }

    // Replace user id and user token
    NSString *valueString = (NSString *)obj;
    if ([valueString isEqualToString:kUserID]) {
        valueString = [valueString stringByReplacingOccurrencesOfString:kUserID withString:(self.user ? [self.user.userID stringValue] : @&amp;quot;&amp;quot;)];
    }
    else if ([valueString isEqualToString:kUserToken]) {
        valueString = [valueString stringByReplacingOccurrencesOfString:kUserToken withString:(self.user ? self.user.token : @&amp;quot;&amp;quot;)];
    } else {
        // Do nothing
    }

    if (valueString.length) {
        [mascoTransport appendHeaderData:[valueString dataUsingEncoding:NSUTF8StringEncoding]];
    }
}];

    TBinaryProtocol *customProtocol = [[TBinaryProtocol alloc] initWithTransport:mascoTransport strictRead:NO strictWrite:YES];
    return customProtocol;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;其实thrift和点评的nvobject蛮像的，其中，TBinaryProtocol都是二进制传输，然后将属性的字段进行压缩，较少网络传输的数据。&lt;br&gt;比如点评是采用hash值，每个对象的属性都有个hash值，然后传输此hash值，客户端根据hash值对应属性，而thrift是采用编号的方式，在idl描述文件中，就已经设置好了编号，然后传输编号到服务端，客户端根据编号对应属性。
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;thrift -gen cocoa &lt;em&gt;**&lt;/em&gt;&lt;/strong&gt;.thrift 生成.h.m文件，然后添加工程，然后调用方法如下：**&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
