<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sanfeng’s blog</title>
  <subtitle>sanfengflying</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://theewind.github.io/"/>
  <updated>2016-08-03T02:03:18.000Z</updated>
  <id>http://theewind.github.io/</id>
  
  <author>
    <name>sanfeng.li</name>
    <email>sanfengflying@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dispatch_after使用注意</title>
    <link href="http://theewind.github.io/2016/08/03/dispatch-after%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
    <id>http://theewind.github.io/2016/08/03/dispatch-after使用注意/</id>
    <published>2016-08-03T01:42:50.000Z</published>
    <updated>2016-08-03T02:03:18.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;p&gt;开发中，经常需要dispatch_after进行延迟处理，dispatch_after能让我们添加进队列的任务延时执行，该函数并不是在指定时间后执行处理，而只是在指定时间追加处理到dispatch_queue该方法的第一个参数是time，第二个参数是dispatch_queue，第三个参数是要执行的block。dispatch_time_t有两种形式的构造方式，第一种相对时间：DISPATCH_TIME_NOW表示现在，NSEC_PER_SEC表示的是秒数，它还提供了NSEC_PER_MSEC表示毫秒。&lt;br&gt;第二种是绝对时间，通过dispatch_walltime函数来获取，dispatch_walltime需要使用一个timespec的结构体来得到dispatch_time_t。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：不是一定在给定时间后执行相关的任务，而是在一定时间后，将执行的操作加入到队列中，然后队列里面再分配执行的时间，所以即使给了个 &lt;code&gt;0秒&lt;/code&gt; 也不会立即执行，而是会追加一个Runloop的时间，一般是1/60s&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试代码如下&quot;&gt;&lt;a href=&quot;#测试代码如下&quot; class=&quot;headerlink&quot; title=&quot;测试代码如下&quot;&gt;&lt;/a&gt;测试代码如下&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSLog(@&amp;quot;in after&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSLog(@&amp;quot;viewDidLoad&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;打印的顺序是这样：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-08-03 09:41:06.237 testDispatchAfter[29364:9056216] viewDidLoad&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-08-03 09:41:06.244 testDispatchAfter[29364:9056216] in after&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;那有什么问题呢？&quot;&gt;&lt;a href=&quot;#那有什么问题呢？&quot; class=&quot;headerlink&quot; title=&quot;那有什么问题呢？&quot;&gt;&lt;/a&gt;那有什么问题呢？&lt;/h2&gt;&lt;p&gt;所以如果我们在使用dispatch_after的时候，比如有时候需要判断条件，特别是有些针对版本的判断，比如&amp;lt;= iOS7上，需要进行一定的延迟处理：&lt;br&gt;比如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;NSString *string = @&amp;quot;测试&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSString *afterString = [@&amp;quot;name in after&amp;quot; stringByAppendingString:string];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, afterString);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, string);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;string = nil;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然测试的过程中，没有crash。但是我们在代码逻辑里还是要避免这样的操作，&lt;strong&gt;因为是有可能，在dispatch_after的block执行之前，释放了某些变量，导致block出错的。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;p&gt;开发中，经常需要dispatch_after进行延迟处理，dispatch_after能让我们添加进队列的任务延时执行，该函数并不是在指定时
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>onExit分析</title>
    <link href="http://theewind.github.io/2016/07/25/onExit%E5%88%86%E6%9E%90/"/>
    <id>http://theewind.github.io/2016/07/25/onExit分析/</id>
    <published>2016-07-25T04:01:47.000Z</published>
    <updated>2016-07-25T05:25:55.000Z</updated>
    
    <content type="html">&lt;p&gt;defer引发的OnExit&lt;/p&gt;
&lt;p&gt;在swift中，是经常用到defer的，在作用域结束的时候，执行defer的命令，但是在Objective C中是无法使用的，不过有个宏 &lt;code&gt;onExit&lt;/code&gt;可以达到这样的效果，比如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;if (1) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	@onExit &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 		NSLog(@&amp;quot;ffffff&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就会在if作用域之后打印fffffff，那么他是怎么实现的呢，主要是用到了 &lt;code&gt;__attribute__&lt;/code&gt;变量属性，具体的onExit的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#ifndef onExit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define onExit \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ext_keywordify \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__strong ext_cleanupBlock_t metamacro_concat(ext_exitBlock_, __LINE__) __attribute__((cleanup(ext_executeCleanupBlock), unused)) = ^&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#endif&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;ext_keywordify &lt;/li&gt;
&lt;li&gt;ext_clearupBlock_t&lt;/li&gt;
&lt;li&gt;metamacro_concat&lt;/li&gt;
&lt;li&gt;clearup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中ext_keywordify 在debug下就是一个@autoreleasepool, release下是@try..cache…finally&lt;br&gt;这里强制要求添加一个@，否则编译器会报错&lt;/p&gt;
&lt;p&gt;ext_clearupBlock_t 是一个typedef void (^ext_cleanupBlock_t)();&lt;/p&gt;
&lt;p&gt;metamacro_concat(A, B) 就是 metamacro_concat(A, B) A ## B ，将AB连接起来，例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;metamacro_concat(ext_exitBlock_, __LINE__)
拼接为：ext_exitBlock_19
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;clearup &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://draveness.me/defer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://draveness.me/defer/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;defer引发的OnExit&lt;/p&gt;
&lt;p&gt;在swift中，是经常用到defer的，在作用域结束的时候，执行defer的命令，但是在Objective C中是无法使用的，不过有个宏 &lt;code&gt;onExit&lt;/code&gt;可以达到这样的效果，比如&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ios7下UIScrollView和滑动返回</title>
    <link href="http://theewind.github.io/2016/07/22/ios7%E4%B8%8BUIScrollView%E5%92%8C%E6%BB%91%E5%8A%A8%E8%BF%94%E5%9B%9E/"/>
    <id>http://theewind.github.io/2016/07/22/ios7下UIScrollView和滑动返回/</id>
    <published>2016-07-22T06:21:40.000Z</published>
    <updated>2016-07-22T07:10:51.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;之前因为某些历史原因，外卖基本禁止了所有的滑动返回手势，这次产品过来说需要开发一些正常流程的返回操作，于是在修复菜单页的过程中遇到了一些问题。菜单页可以说是整个外卖最复杂的页面，如下图&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20160722-2@2x.png&quot; alt=&quot;菜单页&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中有p1,p2,p3,p4,p5，整个菜单页的结构是：&lt;br&gt;P5 最底层，UIScrollView&lt;br&gt;P4 标题，UIView&lt;br&gt;P3 内容, UIView&lt;br&gt;P2 tab, UIScrollView&lt;br&gt;P1 page, UIScrollView&lt;/p&gt;
&lt;p&gt;层次是：p1 + p2 –&amp;gt; p3 + p4 –&amp;gt; p5&lt;/p&gt;
&lt;p&gt;这样就有了问题，左右滑P1，其实是UIScrollView的页面切换，分别显示，菜单，点评和商家详情。&lt;br&gt;&lt;code&gt;在整个P3区域进行滑动返回操作，是不起效果的。&lt;/code&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;p&gt;查阅资料发现，滑动返回事实上也是由存在已久的UIPanGestureRecognizer来识别并响应的，它直接与UINavigationController的view（方便起见，下文中以UINavigationController.view表示）进行绑定，因此上图中存在如下关系：&lt;/p&gt;
&lt;p&gt;UIPanGestureRecognizer  ——bind——  UIScrollView&lt;/p&gt;
&lt;p&gt;UIScreenEdgePanGestureRecognizer ——bind——  UINavigationController.view&lt;/p&gt;
&lt;p&gt;滑动返回无法触发，说明UIScreenEdgePanGestureRecognizer并没有接收到手势事件&lt;/p&gt;
&lt;p&gt;UINavigationController.view —&amp;gt;  UIViewController.view —&amp;gt;  UIScrollView —&amp;gt;  Screen and User’s finger&lt;/p&gt;
&lt;p&gt;即UIScrollView的panGestureRecognizer先接收到了手势事件，直接就地处理而没有往下传递。&lt;/p&gt;
&lt;p&gt;实际上这就是两个panGestureRecognizer共存的问题。&lt;/p&gt;
&lt;p&gt;然后具体的解决方案就是：&lt;br&gt;在P1的继承自子UIScrollView里面添加如下方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if ([gestureRecognizer isKindOfClass:[UIPanGestureRecognizer class]]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;amp;&amp;amp; [otherGestureRecognizer isKindOfClass:[UIScreenEdgePanGestureRecognizer class]]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return YES;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;貌似解决问题，但是自己看会有相应UIScrollView的操作，如&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20160722-3@2x.png&quot; alt=&quot;下图展示&quot;&gt;&lt;br&gt;看到问题了吧，在点评页面，滑动返回的时候居然一边返回，一边切换到菜单页部分，这有点不能忍，然后继续分析，是因为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;只是做到了将手势事件往下传递，而没有关闭掉在边缘时UIScrollView对事件的响应。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;事实上，对UIGestureRecognizer来说，它们对事件的接收顺序和对事件的响应是可以分开设置的，即存在接收链和响应链。接收链如上文所述，和UIView绑定，由UIView的层次决定接收顺序。&lt;/p&gt;
&lt;p&gt;而响应链在apple君的定义下，逻辑出奇的简单，只有一个方法可以设置多个gestureRecognizer的响应关系：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// create a relationship with another gesture recognizer that will prevent this gesture&amp;apos;s actions from being called until otherGestureRecognizer transitions to UIGestureRecognizerStateFailed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// if otherGestureRecognizer transitions to UIGestureRecognizerStateRecognized or UIGestureRecognizerStateBegan then this recognizer will instead transition to UIGestureRecognizerStateFailed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// example usage: a single tap may require a double tap to fail&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)requireGestureRecognizerToFail:(UIGestureRecognizer *)otherGestureRecognizer;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个UIGesturerecognizer都是一个有限状态机，上述方法会在两个gestureRecognizer间建立一个依托于state的依赖关系，当被依赖的gestureRecognizer.state = failed时，另一个gestureRecognizer才能对手势进行响应。&lt;/p&gt;
&lt;p&gt;于是，添加如下操作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;在创建contentView的时候添加入如下，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        UIScreenEdgePanGestureRecognizer *screenEdgePanGestureRecognizer = self.screenEdgePanGestureRecognizer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [_contentPageView.panGestureRecognizer requireGestureRecognizerToFail:screenEdgePanGestureRecognizer];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (UIScreenEdgePanGestureRecognizer *)screenEdgePanGestureRecognizer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UIScreenEdgePanGestureRecognizer *screenEdgePanGestureRecognizer = nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (self.navigationController.view.gestureRecognizers.count &amp;gt; 0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for (UIGestureRecognizer *recognizer in self.navigationController.view.gestureRecognizers)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if ([recognizer isKindOfClass:[UIScreenEdgePanGestureRecognizer class]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                screenEdgePanGestureRecognizer = (UIScreenEdgePanGestureRecognizer *)recognizer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return screenEdgePanGestureRecognizer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lexingyu/p/3702742.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7下滑动返回与ScrollView共存二三事&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cDigger/CoExistOfScrollViewAndBackGesture/tree/master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;之前因为某些历史原因，外卖基本禁止了所有的滑动返回手势，这次产品过来说需要开发一些正常流程的返回操作，于是在修复菜单页的过程中遇到了一些问题。菜单页可以说是整个外卖最复杂的页面，如下图&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20160722-2@2x.png&quot; alt=&quot;菜单页&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中有p1,p2,p3,p4,p5，整个菜单页的结构是：&lt;br&gt;P5 最底层，UIScrollView&lt;br&gt;P4 标题，UIView&lt;br&gt;P3 内容, UIView&lt;br&gt;P2 tab, UIScrollView&lt;br&gt;P1 page, UIScrollView&lt;/p&gt;
&lt;p&gt;层次是：p1 + p2 –&amp;gt; p3 + p4 –&amp;gt; p5&lt;/p&gt;
&lt;p&gt;这样就有了问题，左右滑P1，其实是UIScrollView的页面切换，分别显示，菜单，点评和商家详情。&lt;br&gt;&lt;code&gt;在整个P3区域进行滑动返回操作，是不起效果的。&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>atomic使用</title>
    <link href="http://theewind.github.io/2016/07/18/atomic%E4%BD%BF%E7%94%A8/"/>
    <id>http://theewind.github.io/2016/07/18/atomic使用/</id>
    <published>2016-07-18T07:41:32.000Z</published>
    <updated>2016-07-18T07:43:32.000Z</updated>
    
    <content type="html">&lt;p&gt;平时我们使用atomic的时候，是希望对一个porperty的操作进行一个原子操作，但是这里的原子操作应该是仅仅对应于Setter和Getter方法，如果property是一个array，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)setProp:(NSString &lt;em&gt;)newValue {&lt;br&gt;  [_prop lock];&lt;br&gt;  _prop = newValue;&lt;br&gt;  [_prop unlock];&lt;br&gt;}&lt;br&gt;按我理解：&lt;br&gt;1.此处的线程安全是就getter,setter而言的。比如对于@property(nonatomic,copy)NSString &lt;/em&gt;str; 当调用self.str = @”HELLO,GUY”;如果是多线程，在一个线程执行setter方法的时候，会涉及到字符串拷贝，另一个线程去读取，很可能读到一半的数据，也就是garbage数据。&lt;br&gt;2.另外的话，它也仅限于getter,setter时的线程安全。比如@property(atomic,strong)NSMutableArray *arr;如果一个线程循环读数据，一个线程循环写数据，肯定会产生内存问题。因为它和setter,getter没有关系。 &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;平时我们使用atomic的时候，是希望对一个porperty的操作进行一个原子操作，但是这里的原子操作应该是仅仅对应于Setter和Getter方法，如果property是一个array，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)setProp:(NSString &lt;em
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UIKit主线程检查</title>
    <link href="http://theewind.github.io/2016/07/18/UIKit%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%A3%80%E6%9F%A5/"/>
    <id>http://theewind.github.io/2016/07/18/UIKit主线程检查/</id>
    <published>2016-07-18T02:57:04.000Z</published>
    <updated>2016-07-18T03:44:06.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS开发过程中，很多时候都会使用GCD及NSOperation等涉及到多线程的操作，这样就算是一个老手，也可能会遇到非主线程刷新UI的操作，而结果就是遇到各种不确定的问题，&lt;a href=&quot;https://www.objccn.io/issue-2-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章:线程安全类的设计&lt;/a&gt;向我们解释了为什么UIKit是非线程安全的，然后也介绍了一个&lt;a href=&quot;https://gist.github.com/steipete/5664345&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIKit主线程检查的机制&lt;/a&gt;，今天自己又复习下这个内容。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;method-swizzle&quot;&gt;&lt;a href=&quot;#method-swizzle&quot; class=&quot;headerlink&quot; title=&quot;method swizzle&quot;&gt;&lt;/a&gt;method swizzle&lt;/h1&gt;&lt;p&gt;主要原理就是采用：method swizzle 方法，替换系统的&lt;code&gt;-setNeedsLayout, -setNeedDisplay, -setNeedsDisplayInRect&lt;/code&gt;,三个方法，确保他们是在主线程进行的。&lt;a href=&quot;http://wereadteam.github.io/2016/05/03/WeRead-Performance/?from=groupmessage&amp;amp;isappinstalled=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信读书&lt;/a&gt;的优化方案里面也是这样用的，但是自己重新看了下Main thread guard之后，还是重新发现了一些新的东西。&lt;/p&gt;
&lt;p&gt;首先，之前替换方法都是采用orginSel，newSel就可以了，因为可以通过SEL获取到IMP，那如果是一个blcok呢，其实也是可以的，因为block最终都算是一个function，可以根据获取到IMP，后续操作节本都差不多&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;IMP impl = imp_implementationWithBlock(block);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;attribute-constructor&quot;&gt;&lt;a href=&quot;#attribute-constructor&quot; class=&quot;headerlink&quot; title=&quot;__attribute__((constructor))&quot;&gt;&lt;/a&gt;__attribute__((constructor))&lt;/h1&gt;&lt;p&gt;解释一下：&lt;strong&gt;attribute&lt;/strong&gt;((constructor)) 在main() 之前执行,&lt;strong&gt;attribute&lt;/strong&gt;((destructor)) 在main()执行结束之后执行.&lt;br&gt;这些是属于黑魔法的范围，一般我是是采用在+（load）方法进行替换，而这里是曹永&lt;strong&gt;attribute&lt;/strong&gt;((constructor))的方式，在函数main之前就执行的。    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里自己无耻的贴下代码，本身没什么难度，只需要在替换的函数里面进行thread的判断：是否是主线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// Taken from the commercial iOS PDF framework http://pspdfkit.com.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Copyright (c) 2014 Peter Steinberger, PSPDFKit GmbH. All rights reserved.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Licensed under MIT (http://opensource.org/licenses/MIT)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// You should only use this in debug builds. It doesn&amp;apos;t use private API, but I wouldn&amp;apos;t ship it.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// PLEASE DUPE rdar://27192338 (https://openradar.appspot.com/27192338) if you would like to see this in UIKit.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;lt;objc/runtime.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;lt;objc/message.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Compile-time selector checks.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#if DEBUG&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define PROPERTY(propName) NSStringFromSelector(@selector(propName))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#else&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define PROPERTY(propName) @#propName&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#endif&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// http://www.mikeash.com/pyblog/friday-qa-2010-01-29-method-replacement-for-fun-and-profit.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BOOL PSPDFReplaceMethodWithBlock(Class c, SEL origSEL, SEL newSEL, id block) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSCParameterAssert(c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSCParameterAssert(origSEL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSCParameterAssert(newSEL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSCParameterAssert(block);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if ([c instancesRespondToSelector:newSEL]) return YES; // Selector already implemented, skip silently.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Method origMethod = class_getInstanceMethod(c, origSEL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Add the new method.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    IMP impl = imp_implementationWithBlock(block);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (!class_addMethod(c, newSEL, impl, method_getTypeEncoding(origMethod))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        PSPDFLogError(@&amp;quot;Failed to add method: %@ on %@&amp;quot;, NSStringFromSelector(newSEL), c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Method newMethod = class_getInstanceMethod(c, newSEL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // If original doesn&amp;apos;t implement the method we want to swizzle, create it.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (class_addMethod(c, origSEL, method_getImplementation(newMethod), method_getTypeEncoding(origMethod))) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            class_replaceMethod(c, newSEL, method_getImplementation(origMethod), method_getTypeEncoding(newMethod));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            method_exchangeImplementations(origMethod, newMethod);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return YES;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SEL _PSPDFPrefixedSelector(SEL selector) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return NSSelectorFromString([NSString stringWithFormat:@&amp;quot;pspdf_%@&amp;quot;, NSStringFromSelector(selector)]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define PSPDFAssert(expression, ...) \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;do &amp;#123; if(!(expression)) &amp;#123; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, [NSString stringWithFormat: @&amp;quot;Assertion failure: %s in %s on line %s:%d. %@&amp;quot;, #expression, __PRETTY_FUNCTION__, __FILE__, __LINE__, [NSString stringWithFormat:@&amp;quot;&amp;quot; __VA_ARGS__]]); \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;abort(); &amp;#125;&amp;#125; while(0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void PSPDFAssertIfNotMainThread(void) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PSPDFAssert(NSThread.isMainThread, @&amp;quot;\nERROR: All calls to UIKit need to happen on the main thread. You have a bug in your code. Use dispatch_async(dispatch_get_main_queue(), ^&amp;#123; ... &amp;#125;); if you&amp;apos;re unsure what thread you&amp;apos;re in.\n\nBreak on PSPDFAssertIfNotMainThread to find out where.\n\nStacktrace: %@&amp;quot;, NSThread.callStackSymbols);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__attribute__((constructor)) static void PSPDFUIKitMainThreadGuard(void) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for (NSString *selStr in @[PROPERTY(setNeedsLayout), PROPERTY(setNeedsDisplay), PROPERTY(setNeedsDisplayInRect:)]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SEL selector = NSSelectorFromString(selStr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            SEL newSelector = NSSelectorFromString([NSString stringWithFormat:@&amp;quot;pspdf_%@&amp;quot;, selStr]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if ([selStr hasSuffix:@&amp;quot;:&amp;quot;]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                PSPDFReplaceMethodWithBlock(UIView.class, selector, newSelector, ^(__unsafe_unretained UIView *_self, CGRect r) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    // Check for window, since *some* UIKit methods are indeed thread safe.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    // https://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniPhoneOS/Articles/iPhoneOS4.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    /*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     Drawing to a graphics context in UIKit is now thread-safe. Specifically:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     The routines used to access and manipulate the graphics context can now correctly handle contexts residing on different threads.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     String and image drawing is now thread-safe.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     Using color and font objects in multiple threads is now safe to do.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    if (_self.window) PSPDFAssertIfNotMainThread();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ((void ( *)(id, SEL, CGRect))objc_msgSend)(_self, newSelector, r);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                PSPDFReplaceMethodWithBlock(UIView.class, selector, newSelector, ^(__unsafe_unretained UIView *_self) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    if (_self.window) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        if (!NSThread.isMainThread) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#pragma clang diagnostic push&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#pragma clang diagnostic ignored &amp;quot;-Wdeprecated-declarations&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            dispatch_queue_t queue = dispatch_get_current_queue();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#pragma clang diagnostic pop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            // iOS 8 layouts the MFMailComposeController in a background thread on an UIKit queue.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            // https://github.com/PSPDFKit/PSPDFKit/issues/1423&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            if (!queue || !strstr(dispatch_queue_get_label(queue), &amp;quot;UIKit&amp;quot;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                PSPDFAssertIfNotMainThread();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ((void ( *)(id, SEL))objc_msgSend)(_self, newSelector);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS开发过程中，很多时候都会使用GCD及NSOperation等涉及到多线程的操作，这样就算是一个老手，也可能会遇到非主线程刷新UI的操作，而结果就是遇到各种不确定的问题，&lt;a href=&quot;https://www.objccn.io/issue-2-4/&quot;&gt;这篇文章:线程安全类的设计&lt;/a&gt;向我们解释了为什么UIKit是非线程安全的，然后也介绍了一个&lt;a href=&quot;https://gist.github.com/steipete/5664345&quot;&gt;UIKit主线程检查的机制&lt;/a&gt;，今天自己又复习下这个内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>FlatBuffers</title>
    <link href="http://theewind.github.io/2016/07/14/FlatBuffers/"/>
    <id>http://theewind.github.io/2016/07/14/FlatBuffers/</id>
    <published>2016-07-14T08:32:46.000Z</published>
    <updated>2016-07-14T08:35:58.000Z</updated>
    
    <content type="html">&lt;p&gt;继Protocol Buffers 之后Google开源的一个新的数据传输框架，FaltBuffers。先占个坑&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&amp;gt;&lt;br&gt;&lt;a href=&quot;https://code.facebook.com/posts/872547912839369/improving-facebook-s-performance-on-android-with-flatbuffers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Improving Facebook’s performance on Android with FlatBuffers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.csdn.net/article/2015-08-31/2825579&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源、高效、跨平台：深剖Google FlatBuffers工作原理&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;继Protocol Buffers 之后Google开源的一个新的数据传输框架，FaltBuffers。先占个坑&lt;/p&gt;
    
    </summary>
    
    
      <category term="互联网" scheme="http://theewind.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议相关内容资料</title>
    <link href="http://theewind.github.io/2016/07/14/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E6%96%87%E7%AB%A0/"/>
    <id>http://theewind.github.io/2016/07/14/网络学习文章/</id>
    <published>2016-07-14T08:30:21.000Z</published>
    <updated>2016-07-14T08:31:55.000Z</updated>
    
    <content type="html">&lt;p&gt;下面的文章都是对网络介绍比较深入和有趣的，持续更新。。。&lt;/p&gt;
&lt;h2 id=&quot;阮一峰&quot;&gt;&lt;a href=&quot;#阮一峰&quot; class=&quot;headerlink&quot; title=&quot;阮一峰&quot;&gt;&lt;/a&gt;阮一峰&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RSA算法原理（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RSA算法原理（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数字签名是什么？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互联网协议入门（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互联网协议入门（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/06/dns.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DNS 原理入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSL/TLS协议运行机制的概述&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图解SSL/TLS协议&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/14/0725/20/1073512_397054861.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP/IP的三次握手与四次挥手详解&lt;/a&gt;  &lt;code&gt;渣渣360doc，还要登陆才能复制&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;公众号：码农翻身&quot;&gt;&lt;a href=&quot;#公众号：码农翻身&quot; class=&quot;headerlink&quot; title=&quot;公众号：码农翻身&quot;&gt;&lt;/a&gt;公众号：码农翻身&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;amp;mid=2665513017&amp;amp;idx=1&amp;amp;sn=5550ee714abd36d0b580713f673e670b&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CPU阿甘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://toutiao.com/i6301559248492954113/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我是一个路由器（我是一个网卡姊妹篇）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://toutiao.com/i6301233473227063810/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我是一个网卡&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下面的文章都是对网络介绍比较深入和有趣的，持续更新。。。&lt;/p&gt;
&lt;h2 id=&quot;阮一峰&quot;&gt;&lt;a href=&quot;#阮一峰&quot; class=&quot;headerlink&quot; title=&quot;阮一峰&quot;&gt;&lt;/a&gt;阮一峰&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng
    
    </summary>
    
    
      <category term="互联网" scheme="http://theewind.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>YYModel源码分析</title>
    <link href="http://theewind.github.io/2016/07/02/YYModel%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://theewind.github.io/2016/07/02/YYModel源码分析/</id>
    <published>2016-07-02T07:22:47.000Z</published>
    <updated>2016-07-04T02:01:32.000Z</updated>
    
    <content type="html">&lt;p&gt;根据JSON生成Model是一个iOS开发经常用到的内容，这方面开源的也很多，比如我们公司用的Mantel，但其实效率很一般，最近看了&lt;a href=&quot;https://github.com/ibireme/YYModel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YYModel&lt;/a&gt;，区区五个文件，功能简单且高效，于是就认真学习一下人家是怎么实现的。&lt;/p&gt;
&lt;p&gt;在我想来，主要就是通过runtime方法获取property和ivar就可以了，通过判断每个ivar的类型，然后根据不同的类型给每个property赋值，应该算是不太难的。在网上看到了&lt;a href=&quot;http://blog.csdn.net/woaifen3344/article/details/39301203&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;，就是我想的这个样子，但是YYModel的作者可不是这么认为的。&lt;/p&gt;
&lt;p&gt;作者首先通过runtime方法，生成YYClassInfo，其中YYClassInfo主要是取了YYClassIvarInfo，YYClassMethodInfo，YYClassPropertyInfo。然后通过YYClassInfo构造YYModelMeta。&lt;/p&gt;
&lt;p&gt;YYModelMeta里面包括YYModelPropertyMeta&lt;br&gt;这个过程中，我还有些疑问的，为啥一定要构造这么多中间类呢？咱们继续往下看。&lt;/p&gt;
&lt;p&gt;实际的操作过程中，YYClassIvarInfo和YYClassMethodInfo都没有用到，主要就是用到了YYClassPropertyInfo，由此构造YYModelPropertyMeta，再生成YYModelMeta。&lt;/p&gt;
&lt;p&gt;作者都采用了CoreFoundition类型，比如CFStringRef，CFArrayRef等的操作，相对于 Foundation 的方法来说，CoreFoundation 的方法有更高的性能，用 CFArrayApplyFunction() 和 CFDictionaryApplyFunction() 方法来遍历容器类能带来不少性能提升，以及赋值也是采用objc_sendMsg的方法，就是为了快，省去很多OC方法的查找，这就不难理解，作者为什么用那么多的中间类来记录Method，Ivar，property的setter和getter了。&lt;/p&gt;
&lt;p&gt;作者在&lt;a href=&quot;http://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章中&lt;/a&gt;对各个开源库进行了对比，图文声茂，功底了得，膜拜一把。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;其他知识点：&quot;&gt;&lt;a href=&quot;#其他知识点：&quot; class=&quot;headerlink&quot; title=&quot;其他知识点：&quot;&gt;&lt;/a&gt;其他知识点：&lt;/h2&gt;&lt;h3 id=&quot;1-nonnull&quot;&gt;&lt;a href=&quot;#1-nonnull&quot; class=&quot;headerlink&quot; title=&quot;1. nonnull&quot;&gt;&lt;/a&gt;1. nonnull&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;NS_ASSUME_NONNULL_BEGIN&lt;/li&gt;
&lt;li&gt;NS_ASSUME_NONNULL_END&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这两个宏之间的代码，所有简单指针对象都被假定为nonnull，因此我们只需要去指定那些nullable的指针&lt;/p&gt;
&lt;h3 id=&quot;2-零依赖&quot;&gt;&lt;a href=&quot;#2-零依赖&quot; class=&quot;headerlink&quot; title=&quot;2. 零依赖&quot;&gt;&lt;/a&gt;2. 零依赖&lt;/h3&gt;&lt;p&gt;自己的类甚至都不用添加&lt;yymodel&gt;的协议，怎么做到呢，其实就是先用respondersToSelector判断是否有&lt;yymodel&gt;协议里面的函数，如果有就通过(id&lt;yymodel&gt;)cls 来调用，如果不这样写，而是直接cls来调用，编译器会有warning的提示，同时也可以采用performSelector来实现。&lt;/yymodel&gt;&lt;/yymodel&gt;&lt;/yymodel&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// Get black list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSSet *blacklist = nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if ([cls respondsToSelector:@selector(modelPropertyBlacklist)]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSArray *properties = [(id&amp;lt;YYModel&amp;gt;)cls modelPropertyBlacklist];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (properties) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            blacklist = [NSSet setWithArray:properties];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-copy记得释放&quot;&gt;&lt;a href=&quot;#3-copy记得释放&quot; class=&quot;headerlink&quot; title=&quot;3. copy记得释放&quot;&gt;&lt;/a&gt;3. copy记得释放&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Method *methods = class_copyMethodList(cls, &amp;amp;methodCount);
free(methods);
objc_property_t *properties = class_copyPropertyList(cls, &amp;amp;propertyCount);
free(properties);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-信号量-读写锁&quot;&gt;&lt;a href=&quot;#4-信号量-读写锁&quot; class=&quot;headerlink&quot; title=&quot;4. 信号量-读写锁&quot;&gt;&lt;/a&gt;4. 信号量-读写锁&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;static dispatch_semaphore_t lock;
lock = dispatch_semaphore_create(1);

if (!info) {
    info = [[YYClassInfo alloc] initWithClass:cls];
    if (info) {
        dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);
        CFDictionarySetValue(info.isMeta ? metaCache : classCache, (__bridge const void *)(cls), (__bridge const void *)(info));
        dispatch_semaphore_signal(lock);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;gt;&lt;br&gt;附: YYModel 性能优化的几个 Tip：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;缓存&lt;br&gt;Model JSON 转换过程中需要很多类的元数据，如果数据足够小，则全部缓存到内存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查表&lt;br&gt;当遇到多项选择的条件时，要尽量使用查表法实现，比如 switch/case，C Array，如果查表条件是对象，则可以用 NSDictionary 来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免 KVC&lt;br&gt;Key-Value Coding 使用起来非常方便，但性能上要差于直接调用 Getter/Setter，所以如果能避免 KVC 而用 Getter/Setter 代替，性能会有较大提升。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免 Getter/Setter 调用&lt;br&gt;如果能直接访问 ivar，则尽量使用 ivar 而不要使用 Getter/Setter 这样也能节省一部分开销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免多余的内存管理方法&lt;br&gt;在 ARC 条件下，默认声明的对象是 &lt;strong&gt;strong 类型的，赋值时有可能会产生 retain/release 调用，如果一个变量在其生命周期内不会被释放，则使用 &lt;/strong&gt;unsafe_unretained 会节省很大的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;访问具有 &lt;strong&gt;weak 属性的变量时，实际上会调用 objc_loadWeak() 和 objc_storeWeak() 来完成，这也会带来很大的开销，所以要避免使用 &lt;/strong&gt;weak 属性。&lt;/p&gt;
&lt;p&gt;创建和使用对象时，要尽量避免对象进入 autoreleasepool，以避免额外的资源开销。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;遍历容器类时，选择更高效的方法&lt;br&gt;相对于 Foundation 的方法来说，CoreFoundation 的方法有更高的性能，用 CFArrayApplyFunction() 和 CFDictionaryApplyFunction() 方法来遍历容器类能带来不少性能提升，但代码写起来会非常麻烦。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽量用纯 C 函数、内联函数&lt;br&gt;使用纯 C 函数可以避免 ObjC 的消息发送带来的开销。如果 C 函数比较小，使用 inline 可以避免一部分压栈弹栈等函数调用的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少遍历的循环次数&lt;br&gt;在 JSON 和 Model 转换前，Model 的属性个数和 JSON 的属性个数都是已知的，这时选择数量较少的那一方进行遍历，会节省很多时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/develop-SZT/p/5348364.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;runtime之玩转成员变量&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/woaifen3344/article/details/50505808&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;runtime Method&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS JSON 模型转换库评测&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;根据JSON生成Model是一个iOS开发经常用到的内容，这方面开源的也很多，比如我们公司用的Mantel，但其实效率很一般，最近看了&lt;a href=&quot;https://github.com/ibireme/YYModel&quot;&gt;YYModel&lt;/a&gt;，区区五个文件，功能简单且高效，于是就认真学习一下人家是怎么实现的。&lt;/p&gt;
&lt;p&gt;在我想来，主要就是通过runtime方法获取property和ivar就可以了，通过判断每个ivar的类型，然后根据不同的类型给每个property赋值，应该算是不太难的。在网上看到了&lt;a href=&quot;http://blog.csdn.net/woaifen3344/article/details/39301203&quot;&gt;这篇文章&lt;/a&gt;，就是我想的这个样子，但是YYModel的作者可不是这么认为的。&lt;/p&gt;
&lt;p&gt;作者首先通过runtime方法，生成YYClassInfo，其中YYClassInfo主要是取了YYClassIvarInfo，YYClassMethodInfo，YYClassPropertyInfo。然后通过YYClassInfo构造YYModelMeta。&lt;/p&gt;
&lt;p&gt;YYModelMeta里面包括YYModelPropertyMeta&lt;br&gt;这个过程中，我还有些疑问的，为啥一定要构造这么多中间类呢？咱们继续往下看。&lt;/p&gt;
&lt;p&gt;实际的操作过程中，YYClassIvarInfo和YYClassMethodInfo都没有用到，主要就是用到了YYClassPropertyInfo，由此构造YYModelPropertyMeta，再生成YYModelMeta。&lt;/p&gt;
&lt;p&gt;作者都采用了CoreFoundition类型，比如CFStringRef，CFArrayRef等的操作，相对于 Foundation 的方法来说，CoreFoundation 的方法有更高的性能，用 CFArrayApplyFunction() 和 CFDictionaryApplyFunction() 方法来遍历容器类能带来不少性能提升，以及赋值也是采用objc_sendMsg的方法，就是为了快，省去很多OC方法的查找，这就不难理解，作者为什么用那么多的中间类来记录Method，Ivar，property的setter和getter了。&lt;/p&gt;
&lt;p&gt;作者在&lt;a href=&quot;http://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/&quot;&gt;文章中&lt;/a&gt;对各个开源库进行了对比，图文声茂，功底了得，膜拜一把。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks无法更新pac</title>
    <link href="http://theewind.github.io/2016/07/01/shadowsocket%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0pac/"/>
    <id>http://theewind.github.io/2016/07/01/shadowsocket无法更新pac/</id>
    <published>2016-07-01T05:06:05.000Z</published>
    <updated>2016-07-01T05:16:40.000Z</updated>
    
    <content type="html">&lt;p&gt;这两天上网发现facebook竟然不能登录，于是首先怀疑了是不是ss账号的问题，换了几个服务器，自己的电脑还是不行，但是其他人的都可以，于是就想是不是gfwlist需要更新先，然后就操作&lt;strong&gt;·Update pac from GFWList·&lt;/strong&gt;，但是发现竟然还是request error 404. 之前自己也遇到过这样的事情，但是读没有怎么在意，今天因为要登陆facebook，所以才决定解决下的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;google一下：&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-iOS/issues/212&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不能更新 PAC 文件&lt;/a&gt;发现已经在shadowsocks的issues中提交了问题，下面分析了具体的原因，自己一路看下来，决定使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo easy_install pip  //已经安装则不需要了
sudo pip install gfwlist2pac
sh update_gfwlist.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是当打开连接&lt;a href=&quot;https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/VincentSit/b5b112d273513f153caf23a9da112b3a&lt;/a&gt;取源码的时候，发现这个都打不开，真是无语（我竟然忍受了这么久。。。）。于是在github中搜索，发现还是有蛮多好心人把这个存下来的，然后自己就顺便copy了下来，代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# update_gfwlist.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Author : VincentSit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Copyright (c) http://xuexuefeng.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Example usage&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# ./whatever-you-name-this.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Task Scheduling (Optional)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#	crontab -e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# add:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 30 9 * * * sh /path/whatever-you-name-this.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Now it will update the PAC at 9:30 every day.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Remember to chmod +x the script.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GFWLIST=&amp;quot;https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PROXY=&amp;quot;127.0.0.1:1080&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;USER_RULE_NAME=&amp;quot;user-rule.txt&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;check_module_installed()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	pip list | grep gfwlist2pac &amp;amp;&amp;gt; /dev/null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [ $? -eq 1 ]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		echo &amp;quot;Installing gfwlist2pac.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		pip install gfwlist2pac&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;update_gfwlist()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	echo &amp;quot;Downloading gfwlist.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	curl -s &amp;quot;$GFWLIST&amp;quot; --fail --socks5-hostname &amp;quot;$PROXY&amp;quot; --output /tmp/gfwlist.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [[ $? -ne 0 ]]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		echo &amp;quot;abort due to error occurred.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    exit 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	cd ~/.ShadowsocksX || exit 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [ -f &amp;quot;gfwlist.js&amp;quot; ]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		mv gfwlist.js ~/.Trash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if [ ! -f $USER_RULE_NAME ]; then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		touch $USER_RULE_NAME&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	/usr/local/bin/gfwlist2pac \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --input /tmp/gfwlist.txt \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --file gfwlist.js \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --proxy &amp;quot;SOCKS5 $PROXY; SOCKS $PROXY; DIRECT&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --user-rule $USER_RULE_NAME \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --precise&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  rm -f /tmp/gfwlist.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  echo &amp;quot;Updated.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;check_module_installed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;update_gfwlist&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以后需要更新rule的时候，就自己执行以下就可以了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这两天上网发现facebook竟然不能登录，于是首先怀疑了是不是ss账号的问题，换了几个服务器，自己的电脑还是不行，但是其他人的都可以，于是就想是不是gfwlist需要更新先，然后就操作&lt;strong&gt;·Update pac from GFWList·&lt;/strong&gt;，但是发现竟然还是request error 404. 之前自己也遇到过这样的事情，但是读没有怎么在意，今天因为要登陆facebook，所以才决定解决下的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://theewind.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>FBRetainCycleDetector代码学习</title>
    <link href="http://theewind.github.io/2016/06/30/FBRetainCycleDetector%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://theewind.github.io/2016/06/30/FBRetainCycleDetector代码学习/</id>
    <published>2016-06-30T09:39:28.000Z</published>
    <updated>2016-07-02T09:10:40.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/FBMemoryProfiler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBMemoryProfiler&lt;/a&gt;是Facebook开源的一款用于分析iOS内存使用和检测循环引用的工具库，可以让你在应用程序内运行循环应用检测。底层主要由&lt;a href=&quot;https://github.com/facebook/FBAllocationTracker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBAllocationTracker&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/FBRetainCycleDetector#filters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBRetainCycleDetector&lt;/a&gt;两块来实现功能。&lt;/p&gt;
&lt;h2 id=&quot;FBAllocationTracker&quot;&gt;&lt;a href=&quot;#FBAllocationTracker&quot; class=&quot;headerlink&quot; title=&quot;FBAllocationTracker&quot;&gt;&lt;/a&gt;FBAllocationTracker&lt;/h2&gt;&lt;p&gt;通过在main.m中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[FBAllocationTrackerManager sharedManager] startTrackingAllocations];
--&amp;gt;FB::AllocationTracker::beginTracking
--&amp;gt;    replaceSelectorWithSelector([NSObject class],
                            @selector(alloc),
                            @selector(fb_newAlloc),
                            FBClassMethod);

      replaceSelectorWithSelector([NSObject class],
                            sel_registerName(&amp;quot;dealloc&amp;quot;),
                            @selector(fb_newDealloc),
                            FBInstanceMethod);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就开启了内存检测，主要是通过替换对象的&lt;strong&gt;+alloc&lt;/strong&gt; 和&lt;strong&gt; -delloc&lt;/strong&gt; 方法，替换后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alloc--&amp;gt;fb_newAlloc是IMP--&amp;gt;
fb_originalAlloc--&amp;gt;alloc的IMP
所以[nsobject alloc]--&amp;gt;fb_newAlloc的IMP--&amp;gt;.....
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;FBRetainCycleDetector&quot;&gt;&lt;a href=&quot;#FBRetainCycleDetector&quot; class=&quot;headerlink&quot; title=&quot;FBRetainCycleDetector&quot;&gt;&lt;/a&gt;FBRetainCycleDetector&lt;/h2&gt;&lt;p&gt;对于通过objc_setAssociatedObject添加的对象，FBRetainCycleDetector也是可以检测的，这里就需要使用&lt;code&gt;fishbook&lt;/code&gt;来进行c函数的hook,&lt;a href=&quot;https://github.com/facebook/fishhook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fishhook&lt;/a&gt;是一个非常简单的库，它能动态替换运行在IOS模拟器或设备上Mach-o文件的符号表。是facebook的一个开源工具.&lt;img src=&quot;https://camo.githubusercontent.com/18243516844d12b1bd158ce3687635d6e48d2e2e/687474703a2f2f692e696d6775722e636f6d2f4856587148437a2e706e67&quot; alt=&quot;官网的一个截图为&quot;&gt;&lt;br&gt;官网的一张图很好的解释了fishhook的原理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dyld链接2种符号，lazy和non-lazy，fishhook可以重新链接/替换本地符号。如图所示，&lt;strong&gt;DATA区有两个section和动态符号链接相关：&lt;/strong&gt;nl_symbol_ptr 、&lt;strong&gt;la_symbol_ptr。&lt;/strong&gt;nl_symbol_ptr为一个指针数组，直接对应non-lazy绑定数据。__la_symbol_ptr也是一个指针数组，通过dyld_stub_binder辅助链接。的section头提供符号表的偏移量。图示中，1061是间接符号表的偏移量，*（偏移量+间接符号地址）=16343，即符号表偏移量。符号表中每一个结构都是一个nlist结构体，其中包含字符表偏移量。通过字符表偏移量最终确定函数指针。fishhook就是对间接符号表的偏移量动的手脚，提供一个假的nlist结构体，从而达到hook的目的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的源码想要看懂，还是需要对mach_o文件结构有比较深入的理解的。使用过程还是如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;int main(int argc, char *argv[]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [FBAssociationManager hook];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [[FBAllocationTrackerManager sharedManager] startTrackingAllocations];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [[FBAllocationTrackerManager sharedManager] enableGenerations];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return UIApplicationMain(argc, argv, NSStringFromClass([NVApplication class]), NSStringFromClass([NVAppDelegate class]));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;enableGenerations&lt;/code&gt;开始追踪类的实例对象，就像instruments中的make generations一样，每个新创建的实例都会记录在对应的generations中&lt;/p&gt;
&lt;p&gt;跟踪官方的demo（testObjectsRetainedBySomeObjectWillBeFetched），可以看到，通过object创建FBObjectiveCObject，然后调用allRetainedObjects–&amp;gt;_unfilteredRetainedObjects–&amp;gt;FBGetObjectStrongReferences–&amp;gt;FBGetStrongReferencesForClass&lt;/p&gt;
&lt;p&gt;同时也包括[super allRetainedObjects]获取associations的强引用对象，最后通过如下代码生成FBObjectiveCGraphElement，就可以进行循环引用的搜索了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (NSSet *)allRetainedObjects&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  NSArray *unfiltered = [self _unfilteredRetainedObjects];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return [self filterObjects:unfiltered];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (NSArray *)_unfilteredRetainedObjects&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Class aCls = object_getClass(self.object);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  if (!self.object || !aCls) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  NSArray *strongIvars = FBGetObjectStrongReferences(self.object, self.configuration.layoutCache);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  NSMutableArray *retainedObjects = [[[super allRetainedObjects] allObjects] mutableCopy];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for (id&amp;lt;FBObjectReference&amp;gt; ref in strongIvars) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    id referencedObject = [ref objectReferenceFromObject:self.object];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (referencedObject) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      NSArray&amp;lt;NSString *&amp;gt; *namePath = [ref namePath];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      [retainedObjects addObject:FBWrapObjectGraphElementWithContext(referencedObject,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     self.configuration,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     namePath)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;其他代码学习&quot;&gt;&lt;a href=&quot;#其他代码学习&quot; class=&quot;headerlink&quot; title=&quot;其他代码学习&quot;&gt;&lt;/a&gt;其他代码学习&lt;/h1&gt;&lt;p&gt;判断一个对象实例的iVar的类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (FBType)_convertEncodingToType:(const char *)typeEncoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  if (typeEncoding[0] == &amp;apos;&amp;#123;&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return FBStructType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  if (typeEncoding[0] == &amp;apos;@&amp;apos;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // It&amp;apos;s an object or block&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Let&amp;apos;s try to determine if it&amp;apos;s a block. Blocks tend to have&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // @? typeEncoding. Docs state that it&amp;apos;s undefined type, so&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // we should still verify that ivar with that type is a block&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (strncmp(typeEncoding, &amp;quot;@?&amp;quot;, 2) == 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return FBBlockType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return FBObjectType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return FBUnknownType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;以及对ivar的操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _name = @(ivar_getName(ivar));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _type = [self _convertEncodingToType:ivar_getTypeEncoding(ivar)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _offset = ivar_getOffset(ivar);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;日常我们写一个property时，系统会默认给我们生成一个对应的_property的ivar，如果property前面添加了_,或者__呢，经试验系统还是会默认在这些前面继续加_的&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那如何区分那些是weak，那些是strong呢，这里就需要对Class的 Ivar Layout有一定的了解&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct class_ro_t &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t flags;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t instanceStart;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t instanceSize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#ifdef __LP64__&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t reserved;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#endif&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const uint8_t * ivarLayout; // &amp;lt;- 记录了哪些是 strong 的 ivar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const char * name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const method_list_t * baseMethods;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const protocol_list_t * baseProtocols;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const ivar_list_t * ivars;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const uint8_t * weakIvarLayout; // &amp;lt;- 记录了哪些是 weak 的 ivar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    const property_list_t *baseProperties;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以FBRetainCycleDetector中是通过取 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const uint8_t *fullLayout = class_getIvarLayout(aCls);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来获取强引用类型的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.alonemonkey.com/2016/05/15/fbretaincycledetector-analyse/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBRetainCycleDetector分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/cms/wap.php?action=article&amp;amp;id=14098&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook如何降低应用中的FOOMs（运行在前台内存不足）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2015/09/13/class-ivar-layout/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Class Ivar Layout 探索&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/facebook/FBMemoryProfiler&quot;&gt;FBMemoryProfiler&lt;/a&gt;是Facebook开源的一款用于分析iOS内存使用和检测循环引用的工具库，可以让你在应用程序内运行循环应用检测。底层主要由&lt;a href=&quot;https://github.com/facebook/FBAllocationTracker&quot;&gt;FBAllocationTracker&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/FBRetainCycleDetector#filters&quot;&gt;FBRetainCycleDetector&lt;/a&gt;两块来实现功能。&lt;/p&gt;
&lt;h2 id=&quot;FBAllocationTracker&quot;&gt;&lt;a href=&quot;#FBAllocationTracker&quot; class=&quot;headerlink&quot; title=&quot;FBAllocationTracker&quot;&gt;&lt;/a&gt;FBAllocationTracker&lt;/h2&gt;&lt;p&gt;通过在main.m中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[FBAllocationTrackerManager sharedManager] startTrackingAllocations];
--&amp;gt;FB::AllocationTracker::beginTracking
--&amp;gt;    replaceSelectorWithSelector([NSObject class],
                            @selector(alloc),
                            @selector(fb_newAlloc),
                            FBClassMethod);

      replaceSelectorWithSelector([NSObject class],
                            sel_registerName(&amp;quot;dealloc&amp;quot;),
                            @selector(fb_newDealloc),
                            FBInstanceMethod);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就开启了内存检测，主要是通过替换对象的&lt;strong&gt;+alloc&lt;/strong&gt; 和&lt;strong&gt; -delloc&lt;/strong&gt; 方法，替换后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alloc--&amp;gt;fb_newAlloc是IMP--&amp;gt;
fb_originalAlloc--&amp;gt;alloc的IMP
所以[nsobject alloc]--&amp;gt;fb_newAlloc的IMP--&amp;gt;.....
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="内存检测" scheme="http://theewind.github.io/tags/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>前端代码学习之布局</title>
    <link href="http://theewind.github.io/2016/06/30/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B8%83%E5%B1%80/"/>
    <id>http://theewind.github.io/2016/06/30/前端代码学习之布局/</id>
    <published>2016-06-30T06:12:05.000Z</published>
    <updated>2016-06-30T07:03:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-选择器&quot;&gt;&lt;a href=&quot;#1-选择器&quot; class=&quot;headerlink&quot; title=&quot;1 选择器&quot;&gt;&lt;/a&gt;1 选择器&lt;/h2&gt;&lt;p&gt;div p    div下所有p元素，可能多个层级&lt;br&gt;div&amp;gt;p    div下的子元素p，只能是一级&lt;br&gt;div+p    div兄弟节点的第一个p&lt;br&gt;div~p    div兄弟节点所有p元素&lt;/p&gt;
&lt;p&gt;class^=是什么意思啊&lt;/p&gt;
&lt;p&gt;这是css属性选择器的一种：[attribute^=value] ，用来匹配属性值以指定值开头的每个元素。例如：&lt;br&gt;[class^=”test”] { background:#ffff00; }&lt;/p&gt;
&lt;p&gt;表示设置 class 属性值以 “test” 开头的所有元素的背景色，也就是说对class=”test”, class=”test1” class=”test-001”的元素都是有效的。&lt;br&gt;除此之外，还有一些常用的css属性选择器如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[attribute~=value] 选取属性值中包含指定词汇的元素&lt;/li&gt;
&lt;li&gt;[attribute|=value]  选取带有以指定值开头的属性值的元素，该值必须是整个单词。&lt;/li&gt;
&lt;li&gt;[attribute$=value]    匹配属性值以指定值结尾的每个元素&lt;/li&gt;
&lt;li&gt;[attribute*=value]    匹配属性值中包含指定值的每个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;2-classList&quot;&gt;&lt;a href=&quot;#2-classList&quot; class=&quot;headerlink&quot; title=&quot;2 classList&quot;&gt;&lt;/a&gt;2 classList&lt;/h2&gt;&lt;p&gt;document.classList  属性返回元素的类名，作为DOMTokenList对象，改属性用于在元素中添加，移除及切换CSS类，它是只读的，但你可以使用remove，add修改它&lt;/p&gt;
&lt;h2 id=&quot;3-判断是否是移动设备&quot;&gt;&lt;a href=&quot;#3-判断是否是移动设备&quot; class=&quot;headerlink&quot; title=&quot;3 判断是否是移动设备&quot;&gt;&lt;/a&gt;3 判断是否是移动设备&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;var IS_TOUCH_DEVICE = !!( &amp;apos;ontouchstart&amp;apos; in window );
这就是来判断 ontouchstart是不是window下的一个属性，如果是就返回真，如果不是就返回假
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ontouchstart事件只是在移动端使用的事件，要是判断用户是PC还是移动端的话，你就直接判断用户的系统是否为苹果或者安卓，WP这些就能知道是移动端的了&lt;/p&gt;
&lt;h2 id=&quot;4-和-的区别&quot;&gt;&lt;a href=&quot;#4-和-的区别&quot; class=&quot;headerlink&quot; title=&quot;4 . 和 # 的区别&quot;&gt;&lt;/a&gt;4 . 和 # 的区别&lt;/h2&gt;&lt;p&gt;id：用来定义页面中大的样式，如栏目划分，顶部，正文，底部等；用#top的形式来定义；&lt;/p&gt;
&lt;p&gt;class：用来定义一些比较细节的样式，如具体的一个菜单，一行文字等，用.text的形式来定义。&lt;/p&gt;
&lt;p&gt;定义HTML中的标签，如ul,img,p等时，直接写：img{}&lt;br&gt;class是样式组，用.style定义，class=”style”： &lt;/p&gt;
&lt;p&gt;.style定义样式组，可以被反复调用，就是说你一个页面里，可以有多个元素用同一个style； &lt;/p&gt;
&lt;p&gt;ID是固定标签，用#style1定义，ID=”style1”&lt;/p&gt;
&lt;p&gt;#main和.main有什么区别:&lt;/p&gt;
&lt;p&gt;#main 定义的是ID为”main”这个元素的样式&lt;/p&gt;
&lt;p&gt;.main 的意思是新建一个名为”main”的样式&lt;/p&gt;
&lt;p&gt;#main 只能定义ID为”main”这个元素的样式&lt;/p&gt;
&lt;p&gt;.main 一但定义以后,可以让其他的元素来调用,方法为class=”main”&lt;/p&gt;
&lt;h2 id=&quot;5-正则-ul-ol-i&quot;&gt;&lt;a href=&quot;#5-正则-ul-ol-i&quot; class=&quot;headerlink&quot; title=&quot;5 正则/^(ul|ol)$/i&quot;&gt;&lt;/a&gt;5 正则/^(ul|ol)$/i&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;i 忽略大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/^(ul|ol)$/i.test(element.nodeName) 判断element.nodeName是否符合正则表达式，test函数就是判断是否符合。&lt;/p&gt;
&lt;h2 id=&quot;6-meta&quot;&gt;&lt;a href=&quot;#6-meta&quot; class=&quot;headerlink&quot; title=&quot;6 meta&quot;&gt;&lt;/a&gt;6 meta&lt;/h2&gt;&lt;p&gt; &lt;code&gt;&amp;lt;meta name=&amp;quot;apple-mobile-web-app-capable&amp;quot; content=&amp;quot;yes&amp;quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;网站开启对web app程序的支持&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;apple-mobile-web-app-status-bar-style&amp;quot; content=&amp;quot;black&amp;quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在web app应用下状态条（屏幕顶部条）的颜色；&lt;/li&gt;
&lt;li&gt;默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/yuzhongwusan/archive/2011/11/29/2267568.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/yuzhongwusan/archive/2011/11/29/2267568.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;7-重定向&quot;&gt;&lt;a href=&quot;#7-重定向&quot; class=&quot;headerlink&quot; title=&quot;7 重定向&quot;&gt;&lt;/a&gt;7 重定向&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Redirect to the mobile index page if we&amp;apos;re on a touch device --&amp;gt;
&amp;lt;script&amp;gt;if( &amp;apos;ontouchstart&amp;apos; in window ) window.location = &amp;apos;mobile.html&amp;apos;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这句话就是判断，如果当前设备是移动设备，就将当前页面的url重定向为mobile.html，学习&lt;a href=&quot;https://github.com/hakimel/stroll.js.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stroll.js&lt;/a&gt;代码时看到的。&lt;br&gt;如果将这个放在head中，那么就会在加载页面的时候，实现自动控制。&lt;/p&gt;
&lt;h2 id=&quot;8-布局&quot;&gt;&lt;a href=&quot;#8-布局&quot; class=&quot;headerlink&quot; title=&quot;8 布局&quot;&gt;&lt;/a&gt;8 布局&lt;/h2&gt;&lt;p&gt;padding的顺序： 上 右 下 左&lt;/p&gt;
&lt;p&gt;margin:25px 50px 75px 100px;&lt;code&gt;上右下左&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;margin:25px 50px 75px;&lt;code&gt;上左下&lt;/code&gt;&lt;br&gt;margin:25px;&lt;br&gt;margin: 0 auto  如果后面跟两个参数，第一个表示 top bottom 第二个表示 left right。&lt;br&gt; 因为0 auto，表示上下边界为0，左右则根据宽度自适应相同值（即居中） &lt;/p&gt;
&lt;h2 id=&quot;9-position&quot;&gt;&lt;a href=&quot;#9-position&quot; class=&quot;headerlink&quot; title=&quot;9 position&quot;&gt;&lt;/a&gt;9 position&lt;/h2&gt;&lt;p&gt;通常使用position用于层的绝对定位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static：无特殊定位，默认，遵循html的定位规则，采用常规流向&lt;/li&gt;
&lt;li&gt;absolute: 将对象从文档常规流向中拖出，使用left，right，top，bottom等属性进行绝对定位&lt;/li&gt;
&lt;li&gt;relative: 对象不可层叠，但将依据left，right，top，bottom等属性在正常文档流中偏移位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;position:absolute；position:relative绝对定位使用通常是父级定义position:relative定位，子级定义position:absolute绝对定位属性，并且子级使用left或right和top或bottom进行绝对定位&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003095582&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000003095582&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zh.learnlayout.com/position.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/position.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;10-before-after&quot;&gt;&lt;a href=&quot;#10-before-after&quot; class=&quot;headerlink&quot; title=&quot;10 before,after&quot;&gt;&lt;/a&gt;10 before,after&lt;/h2&gt;&lt;p&gt;全部都是用before，after，hover等构成的动画，自己还没有看懂，需要慢慢消化 &lt;a href=&quot;http://zaole.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zaole.net/&lt;/a&gt;&lt;br&gt;在学习btn-8的时候，对atuo的理解：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.btn-8:before, .btn-8:after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  content: &amp;apos;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  position: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  top:0px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  left: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  width: 250px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  height: 20px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  background: #0c3829;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.btn-8:after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  top: auto;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bottom: 0px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码会显示一个上下高度为20的after何before，这里因为他们是z-index=-1，所以不会遮挡content，但是如果没有对.btn-8:after {&lt;br&gt;  top: auto;&lt;br&gt;  bottom: 0px;&lt;br&gt;}&lt;br&gt;单独配置，就会出现，两个互相重叠的效果，这也很好理解，他们的属性完全一样.btn-8:before, .btn-8:after ，添加了.btn-8:after之后，after就出现在了下面，这个是为什么呢，先看下auto的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于 static 元素，为 auto；对于长度值，则为相应的绝对长度；对于百分比数值，为指定值；否则为 auto。&lt;br&gt;对于相对定义元素，如果 top 和 bottom 都是 auto，其计算值则都是 0；如果其中之一为 auto，则取另一个值的相反数；如果二者都不是 auto，bottom 将取 top 值的相反数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以上面的css动画中，显示如下&lt;br&gt;&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/btn_8_smoosh_0.png&quot; alt=&quot;上述css布局显示如下&quot;&gt;&lt;br&gt;absolute，top：auto，bottom：0说明是从底部开始的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-选择器&quot;&gt;&lt;a href=&quot;#1-选择器&quot; class=&quot;headerlink&quot; title=&quot;1 选择器&quot;&gt;&lt;/a&gt;1 选择器&lt;/h2&gt;&lt;p&gt;div p    div下所有p元素，可能多个层级&lt;br&gt;div&amp;gt;p    div下的子元素p，只能是一级&lt;br&gt;div+p    div兄弟节点的第一个p&lt;br&gt;div~p    div兄弟节点所有p元素&lt;/p&gt;
&lt;p&gt;class^=是什么意思啊&lt;/p&gt;
&lt;p&gt;这是css属性选择器的一种：[attribute^=value] ，用来匹配属性值以指定值开头的每个元素。例如：&lt;br&gt;[class^=”test”] { background:#ffff00; }&lt;/p&gt;
&lt;p&gt;表示设置 class 属性值以 “test” 开头的所有元素的背景色，也就是说对class=”test”, class=”test1” class=”test-001”的元素都是有效的。&lt;br&gt;除此之外，还有一些常用的css属性选择器如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[attribute~=value] 选取属性值中包含指定词汇的元素&lt;/li&gt;
&lt;li&gt;[attribute|=value]  选取带有以指定值开头的属性值的元素，该值必须是整个单词。&lt;/li&gt;
&lt;li&gt;[attribute$=value]    匹配属性值以指定值结尾的每个元素&lt;/li&gt;
&lt;li&gt;[attribute*=value]    匹配属性值中包含指定值的每个元素&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://theewind.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css中的伪元素after和before的默认顺序</title>
    <link href="http://theewind.github.io/2016/06/27/css%E4%B8%AD%E7%9A%84%E4%BC%AA%E5%85%83%E7%B4%A0after%E5%92%8Cbefore%E7%9A%84%E9%BB%98%E8%AE%A4%E9%A1%BA%E5%BA%8F/"/>
    <id>http://theewind.github.io/2016/06/27/css中的伪元素after和before的默认顺序/</id>
    <published>2016-06-27T10:33:18.000Z</published>
    <updated>2016-06-30T03:20:14.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在学习CSS动画的时候，看到很多动画都是采用了&lt;code&gt;伪元素 :before和:after&lt;/code&gt;，他们是干什么的以及怎么用，可以自行google，我这里主要是对他们的顺序进行一下探讨。&lt;br&gt;乍感觉一下，after应该是在原元素的前面，而before应该是在后面，实际上不是这样的，after和before都算是他的子元素，所以默认情况下，他们都是在原始元素的前面，借用网友的一张&lt;img src=&quot;http://www.alixixi.com/web/UploadPic/2011-9/20119211128385.jpg&quot; alt=&quot;图片&quot;&gt;，他是在这样显示的，如果还有不相信的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果想自己测试下：可以试验下如下的代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#star-six &amp;#123;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		width: 0;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		height: 0;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-left: 50px solid transparent;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-right: 50px solid transparent;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-bottom: 100px solid red;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		position: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	#star-six:after &amp;#123;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content:&amp;apos;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		width: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		height: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-left: 50px solid transparent;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-right: 50px solid transparent;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-top: 100px solid green;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		position: absolute;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content: &amp;quot;&amp;quot;;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		top: 30px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		left: -50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		z-index:auto&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		#star-six:before &amp;#123;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content:&amp;apos;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		width: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		height: 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-left: 50px solid transparent;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-right: 50px solid transparent;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		border-bottom: 100px solid yellow;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		position: absolute;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		content: &amp;quot;&amp;quot;;         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		top: 30px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		left: -50px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			z-index:auto;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/css_after_before.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;跟上面的图片结果是一样的。那么如果想修改after和before的顺序呢，只要添加z-index:就行，比如-1等。所以很多动画效果都可以通过这个来实现，&lt;a href=&quot;http://zaole.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考网站&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://justcoding.iteye.com/blog/2032627&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://justcoding.iteye.com/blog/2032627&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.alixixi.com/web/a/2011090273706.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alixixi.com/web/a/2011090273706.shtml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在学习CSS动画的时候，看到很多动画都是采用了&lt;code&gt;伪元素 :before和:after&lt;/code&gt;，他们是干什么的以及怎么用，可以自行google，我这里主要是对他们的顺序进行一下探讨。&lt;br&gt;乍感觉一下，after应该是在原元素的前面，而before应该是在后面，实际上不是这样的，after和before都算是他的子元素，所以默认情况下，他们都是在原始元素的前面，借用网友的一张&lt;img src=&quot;http://www.alixixi.com/web/UploadPic/2011-9/20119211128385.jpg&quot; alt=&quot;图片&quot;&gt;，他是在这样显示的，如果还有不相信的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://theewind.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>在chrome中调试custom JS代码</title>
    <link href="http://theewind.github.io/2016/06/24/%E5%9C%A8chrome%E4%B8%AD%E8%B0%83%E8%AF%95Js%E4%BB%A3%E7%A0%81/"/>
    <id>http://theewind.github.io/2016/06/24/在chrome中调试Js代码/</id>
    <published>2016-06-24T03:47:19.000Z</published>
    <updated>2016-06-30T03:18:41.000Z</updated>
    
    <content type="html">&lt;p&gt;如何在chrome中调试JS代码呢，如果本身网页中就有js代码文件，那么打开chrome，mac上快捷键option+command+i，然后进入开发者模式，选择Sources，content Scripts，进行正常的调试即可，这里不做过多的介绍，需要的可以到&lt;a href=&quot;https://developer.chrome.com/devtools/docs/javascript-debugging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自己在这里主要介绍的是如何调试自己写的JS脚本，本身还没有嵌入到网页中的，这里就需要用到另外一个&lt;code&gt;Snippets&lt;/code&gt;，这个就是自己在这里写JS脚本，然后run之后，就可以在console中进行调试，跟加载在网页中的一样。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右键Snippets区域  选择new，然后创建一个js文件，这里取名hui.js&lt;/li&gt;
&lt;li&gt;编辑hui.js，并保存。&lt;/li&gt;
&lt;li&gt;右键hui.js文件，然后选择run&lt;/li&gt;
&lt;li&gt;设置断点&lt;/li&gt;
&lt;li&gt;console中执行js中的功能，记性断点调试即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/chrome_js_debug_snippets.png&quot; alt=&quot;如下截图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;###参考链接&lt;/p&gt;
&lt;p&gt;####&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/debug/snippets/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/web/tools/chrome-devtools/debug/snippets/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何在chrome中调试JS代码呢，如果本身网页中就有js代码文件，那么打开chrome，mac上快捷键option+command+i，然后进入开发者模式，选择Sources，content Scripts，进行正常的调试即可，这里不做过多的介绍，需要的可以到&lt;a hre
    
    </summary>
    
    
      <category term="javascript 前端" scheme="http://theewind.github.io/tags/javascript-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何在自己的网页中添加ga分析</title>
    <link href="http://theewind.github.io/2016/06/23/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%B7%BB%E5%8A%A0ga%E5%88%86%E6%9E%90/"/>
    <id>http://theewind.github.io/2016/06/23/如何在自己的网页中添加ga分析/</id>
    <published>2016-06-23T08:58:54.000Z</published>
    <updated>2016-06-23T10:41:38.000Z</updated>
    
    <content type="html">&lt;p&gt;在学习前端的过程中，自己都想统计用户的访问量，下面代码可以做到最轻量级的追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var _gaq = _gaq || [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _gaq.push([&amp;apos;_setAccount&amp;apos;, &amp;apos;UA-XXXXX-X&amp;apos;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _gaq.push([&amp;apos;_trackPageview&amp;apos;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var ga = document.createElement(&amp;apos;script&amp;apos;); ga.type = &amp;apos;text/javascript&amp;apos;; ga.async = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ga.src = (&amp;apos;https:&amp;apos; == document.location.protocol ? &amp;apos;https://ssl&amp;apos; : &amp;apos;http://www&amp;apos;) + &amp;apos;.google-analytics.com/ga.js&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var s = document.getElementsByTagName(&amp;apos;script&amp;apos;)[0]; s.parentNode.insertBefore(ga, s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;具体可以参考如下&lt;br&gt; &lt;a href=&quot;https://developers.google.com/analytics/devguides/collection/gajs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/analytics/devguides/collection/gajs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在学习前端的过程中，自己都想统计用户的访问量，下面代码可以做到最轻量级的追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端代码学习之scss</title>
    <link href="http://theewind.github.io/2016/06/22/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8Bscss/"/>
    <id>http://theewind.github.io/2016/06/22/前端代码学习之scss/</id>
    <published>2016-06-22T10:39:03.000Z</published>
    <updated>2016-06-22T11:03:32.000Z</updated>
    
    <content type="html">&lt;p&gt;今天看到一个网站，主要都是前端动画&lt;a href=&quot;http://hakim.se&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hakim.se&lt;/a&gt;,刚好自己最近对前端比较好奇，然后就学习了其中一个demo, &lt;a href=&quot;http://codepen.io/hakimel/full/aIhkf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cloudy-spiral&lt;/a&gt;,然后这里主要记录自己在学习前端过程中的一些小的知识点，不断更新中。。。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;scss是什么&quot;&gt;&lt;a href=&quot;#scss是什么&quot; class=&quot;headerlink&quot; title=&quot;scss是什么&quot;&gt;&lt;/a&gt;scss是什么&lt;/h1&gt;&lt;p&gt;sass是css3的一个扩展，增加了规则嵌套、变量、混合、选择器集成等。通过使用命令行的工具或WEB框架插件，可以把它转成标准的、格式良好的css代码。&lt;/p&gt;
&lt;p&gt;scss即使sass的新语法，是Sassy css的简写，是css3语法的超集，也就是说所有有效的CSS3样式也同样适合于SASS。&lt;/p&gt;
&lt;h4 id=&quot;一、什么是SASS&quot;&gt;&lt;a href=&quot;#一、什么是SASS&quot; class=&quot;headerlink&quot; title=&quot;一、什么是SASS&quot;&gt;&lt;/a&gt;一、什么是SASS&lt;/h4&gt;&lt;p&gt;SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。&lt;br&gt;本文总结了SASS的主要用法。我的目标是，有了这篇文章，日常的一般使用就不需要去看官方文档了。&lt;/p&gt;
&lt;p&gt;####二、安装和使用&lt;/p&gt;
&lt;p&gt;#####2.1 安装&lt;br&gt;SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。&lt;br&gt;假定你已经安装好了Ruby，接着在命令行输入下面的命令：&lt;br&gt;gem install sass&lt;br&gt;然后，就可以使用了。&lt;/p&gt;
&lt;p&gt;#####2.2 使用&lt;br&gt;SASS文件就是普通的文本文件，里面可以直接使用CSS语法。文件后缀名是.scss，意思为Sassy CSS。&lt;br&gt;下面的命令，可以在屏幕上显示.scss文件转化的css代码。（假设文件名为test。）&lt;br&gt;sass test.scss&lt;br&gt;如果要将显示结果保存成文件，后面再跟一个.css文件名。&lt;br&gt;sass test.scss test.css&lt;br&gt;SASS提供四个编译风格的选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nested：嵌套缩进的css代码，它是默认值。&lt;/li&gt;
&lt;li&gt;expanded：没有缩进的、扩展的css代码。&lt;/li&gt;
&lt;li&gt;compact：简洁格式的css代码。&lt;/li&gt;
&lt;li&gt;compressed：压缩后的css代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生产环境当中，一般使用最后一个选项。&lt;br&gt;sass –style compressed test.sass test.css&lt;br&gt;你也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。&lt;br&gt;// watch a file&lt;br&gt;sass –watch input.scss:output.css&lt;br&gt;// watch a directory&lt;br&gt;sass –watch app/sass:public/stylesheets&lt;br&gt;SASS的官方网站，提供了一个&lt;a href=&quot;http://sass-lang.com/try.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线转换器。你可以在那里，试运行下面的各种例子。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#####2.3 基本用法&lt;br&gt;具体可以参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.frostsky.com/2014/07/sass-scss/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.frostsky.com/2014/07/sass-scss/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;sass-和-scss的区别呢&quot;&gt;&lt;a href=&quot;#sass-和-scss的区别呢&quot; class=&quot;headerlink&quot; title=&quot;sass 和 scss的区别呢&quot;&gt;&lt;/a&gt;sass 和 scss的区别呢&lt;/h1&gt;&lt;p&gt;Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：&lt;br&gt;文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名&lt;/p&gt;
&lt;p&gt;语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;先来看一个示例：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sass 语法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$font-stack: Helvetica, sans-serif  //定义变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$primary-color: #333 //定义变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;body&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font: 100% $font-stack&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: $primary-color	 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SCSS语法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$font-stack: Helvetica, sans-seri;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$primary-color: #333;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;body &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font: 100% $font-stack;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: $primary-color;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;编译出来的 CSS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;body &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font: 100% Helvetica, sans-serif;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: #333;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一个网站，主要都是前端动画&lt;a href=&quot;http://hakim.se&quot;&gt;http://hakim.se&lt;/a&gt;,刚好自己最近对前端比较好奇，然后就学习了其中一个demo, &lt;a href=&quot;http://codepen.io/hakimel/full/aIhkf&quot;&gt;cloudy-spiral&lt;/a&gt;,然后这里主要记录自己在学习前端过程中的一些小的知识点，不断更新中。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://theewind.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://theewind.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>wkwebview同步获取返回结果</title>
    <link href="http://theewind.github.io/2016/06/21/wkwebview%E5%90%8C%E6%AD%A5%E8%8E%B7%E5%8F%96%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C/"/>
    <id>http://theewind.github.io/2016/06/21/wkwebview同步获取返回结果/</id>
    <published>2016-06-21T09:46:50.000Z</published>
    <updated>2016-06-30T03:19:32.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在测试UIWebView和WKWebView的时候，发现如下区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UIWebView执行stringByEvaluatingJavaScriptFromString方法，因为直接返回结果，所以是&lt;code&gt;同步&lt;/code&gt;的。&lt;br&gt;WKWebView执行evaluateJavaScript：completionHandler是在block中获取执行结果的，所以他是&lt;code&gt;异步&lt;/code&gt;进行的，&lt;br&gt;这样在进行性能测试的时候，发现如果不将WKWebView他修改为同步，是无法进行对比的，然后自己就通过如下方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;   - (NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)javascript &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __block NSString *res = nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __block BOOL finish = NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [self.webView evaluateJavaScript:javascript completionHandler:^(NSString *result, NSError *error)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res = result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        finish = YES;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    while(!finish) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return res;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将WKWebView修改为同步状态，然后进行对比，主要是测试JavaScript函数执行100，300，500，1000，3000次，统计时间，可以发现在相同JS功能情况下，WKWebView的效率还没有UIWebView的效率高，如&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/uiwebview_wkwebview_jscore.png&quot; alt=&quot;下图&quot;&gt;&lt;br&gt;可以看出，JavascriptCore的效率是最高的，而WKWebView改成同步以后，实际效果是最差的，分析原因也可能是因为，WKWebView不是这样用的，毕竟在无限等待中，所以结果也可能是受影响的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/3a59107aa2d2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/3a59107aa2d2&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/26778955/wkwebview-evaluate-javascript-return-value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/26778955/wkwebview-evaluate-javascript-return-value&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在测试UIWebView和WKWebView的时候，发现如下区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UIWebView执行stringByEvaluatingJavaScriptFromString方法，因为直接返回结果，所以是&lt;code&gt;同步&lt;/code&gt;的。&lt;br&gt;W
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="WKWebView" scheme="http://theewind.github.io/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>react native 新语法</title>
    <link href="http://theewind.github.io/2016/06/20/react-native-%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    <id>http://theewind.github.io/2016/06/20/react-native-新语法/</id>
    <published>2016-06-20T05:12:08.000Z</published>
    <updated>2016-06-20T05:16:17.000Z</updated>
    
    <content type="html">&lt;p&gt;最新的RN，已经全部转移到ES6，所以很多之前老的写法，会报错，比如&lt;br&gt;在react-native中引用React的做法发生了变更（在当前版本老的做法会报错）：&lt;/p&gt;
&lt;p&gt;之前&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React, { Component, View } from &amp;apos;react-native&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React, { Component } from &amp;apos;react&amp;apos;;
import { View } from &amp;apos;react-native&amp;apos;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体有很多，可以参考&lt;a href=&quot;https://www.facebook.com/groups/reactnativeoss/permalink/1540818949548067/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt; 科学上网。&lt;/p&gt;
&lt;p&gt;具体就是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;n React 0.14 for Web we started splitting up the React package into two packages `react` and `react-dom`. Now I&amp;apos;d like to make this consistent in React Native. The new package structure would be...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;react&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Children&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Component&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PropTypes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createElement&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cloneElement&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isValidElement&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createClass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createFactory&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createMixin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;react-native&amp;quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hasReactNativeInitialized&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;findNodeHandle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unmountComponentAtNode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unmountComponentAtNodeAndRemoveContainer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unstable_batchedUpdates&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;View&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Text&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ListView&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;and all the other native components.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;So for a lot of components you actually have to import both packages.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var React = require(&amp;apos;react&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var &amp;#123; View &amp;#125; = require(&amp;apos;react-native&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var Foo = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render() &amp;#123; return &amp;lt;View /&amp;gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;However, for components that doesn&amp;apos;t know anything about their rendering environment just need the `react` package as a dependency.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Currently a lot of these are accessible from both packages but we&amp;apos;d start issuing warnings if you use the wrong one.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This would be a little spammy so ideally we would have a simple codemod script that you can run on your imports to clean them up.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E.g. something that translates existing patterns like:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var React = require(&amp;apos;react-native&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var &amp;#123; View &amp;#125; = React;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;into:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var React = require(&amp;apos;react&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var &amp;#123; View &amp;#125; = require(&amp;apos;react-native&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;If anyone wants to write and share that script with the community, that would be highly appreciated. We can start promoting it right now before we deprecate it.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最新的RN，已经全部转移到ES6，所以很多之前老的写法，会报错，比如&lt;br&gt;在react-native中引用React的做法发生了变更（在当前版本老的做法会报错）：&lt;/p&gt;
&lt;p&gt;之前&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import React, { Component, Vi
    
    </summary>
    
    
      <category term="react native" scheme="http://theewind.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>批量生成二维码</title>
    <link href="http://theewind.github.io/2016/06/13/%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://theewind.github.io/2016/06/13/批量生成二维码/</id>
    <published>2016-06-13T07:32:14.000Z</published>
    <updated>2016-06-13T07:35:05.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要是在工作的时候，需要做一个批量生成二维码的功能，通过超找网上资料，简单实现了一个demo，具体可以参考&lt;a href=&quot;https://github.com/theewind/QRCodeGenerator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;批量生成二维码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#####使用说明&lt;br&gt;主要是依赖qrcode，具体参考&lt;a href=&quot;https://pypi.python.org/pypi/qrcode/5.1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pypi.python.org/pypi/qrcode/5.1&lt;/a&gt;，qrcode又依赖Pillow。&lt;/p&gt;
&lt;p&gt;目前比较简单，就是针对输入的input目录，将二维码生成到output目录中。&lt;/p&gt;
&lt;p&gt;#####安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pip install Pillow&lt;/li&gt;
&lt;li&gt;pip install qrcode&lt;/li&gt;
&lt;li&gt;python  ./ant_qrcode.py&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果安装出现权限的问题，可以通过暴力添加sudo pip ….执行。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是在工作的时候，需要做一个批量生成二维码的功能，通过超找网上资料，简单实现了一个demo，具体可以参考&lt;a href=&quot;https://github.com/theewind/QRCodeGenerator&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
    
      <category term="qrcode" scheme="http://theewind.github.io/tags/qrcode/"/>
    
      <category term="python" scheme="http://theewind.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式的学习</title>
    <link href="http://theewind.github.io/2016/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://theewind.github.io/2016/06/12/正则表达式的学习/</id>
    <published>2016-06-12T08:26:37.000Z</published>
    <updated>2016-06-12T10:15:21.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要记录了自己在工作中用到的部分正则表达式的零星点碎的内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\\.&lt;/code&gt;，&lt;code&gt;\\|&lt;/code&gt; 等&lt;code&gt;\\&lt;/code&gt;操作。 &lt;code&gt;\\|&lt;/code&gt;这是转义的意思 “\” “|” 都是特殊字符所以需要转义，第二个反斜杠 \ 转义 |&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.imkevinyang.com/2009/08/使用正则表达式找出不包含特定字符串的条目.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前瞻后顾&lt;/a&gt; 学习 &lt;code&gt;!?&lt;/code&gt;操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;贪婪与非贪婪 &lt;code&gt;?&lt;/code&gt; 当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例&lt;code&gt;a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。
有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?&lt;/code&gt;就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：&lt;br&gt;a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;\d+：匹配数字一次或者多次&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\d.*：先匹配一位数字，剩下匹配任意字符零次或者多次&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\d.*?：*?这个表示非贪婪模式，表示匹配最少的数量匹配&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;例子：&amp;lt;DIV&amp;gt;123&amp;lt;DIV&amp;gt;456&amp;lt;DIV&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;贪婪：&amp;lt;DIV&amp;gt;.*&amp;lt;DIV&amp;gt; ====&amp;gt; &amp;lt;DIV&amp;gt;123&amp;lt;DIV&amp;gt;456&amp;lt;DIV&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;非贪婪：&amp;lt;DIV&amp;gt;.*?&amp;lt;DIV&amp;gt;====&amp;gt; &amp;lt;DIV&amp;gt;123&amp;lt;DIV&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我们闪惠的输入限制里面，有如下的正则：   &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;NSString *regex = @&amp;quot;^(?!0[^\\.])\\d+\\.?\\d&amp;#123;0,2&amp;#125;$&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;解析下来就是如下，比使用代码一个一个判断条件过滤要好太多了。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 /**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  (?!0[^\.])  第一个数字为0的时，后面只能输入小数点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  \d+\.?      小数点前（若有）只能为数字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  \d&amp;#123;0,2&amp;#125;     小数点后最多输入两位数字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     **/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;范围  / rex /gmi  g–global, m–multiline, i–ignore&lt;/li&gt;
&lt;li&gt;常用的元字符&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配除换行符以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配字母或数字或下划线或汉字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配任意的空白符,空格，tab，换行，中文全角空格等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配单词的开始或结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;匹配字符串的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;匹配字符串的结束&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;常用的限定符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;语法    说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;重复零次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;重复一次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;重复零次或一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n}&lt;/td&gt;
&lt;td&gt;重复n次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,}&lt;/td&gt;
&lt;td&gt;重复n次或更多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,m}&lt;/td&gt;
&lt;td&gt;重复n到m次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;[]里面的不要转义，比如 [aeiou]匹配每一个元音，[.*?]匹配标点符号(.?!)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了自己在工作中用到的部分正则表达式的零星点碎的内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\\.&lt;/code&gt;，&lt;code&gt;\\|&lt;/code&gt; 等&lt;code&gt;\\&lt;/code&gt;操作。 &lt;code&gt;\\|&lt;/code&gt;这是转义的意思 “\” “|” 都是
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://theewind.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>study</title>
    <link href="http://theewind.github.io/2016/06/07/study_f8app/"/>
    <id>http://theewind.github.io/2016/06/07/study_f8app/</id>
    <published>2016-06-07T15:04:01.000Z</published>
    <updated>2016-06-08T09:59:01.000Z</updated>
    
    <content type="html">&lt;p&gt;主要是先参考如下篇文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1461512056952.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.open-open.com/lib/view/open1461512056952.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次接触redux，概念还比较模糊，同时js开发水平也一般，对一些语法学习还不是很懂，这里做个记录：&lt;br&gt;代码中的很多function func(): type的用法，我之前接触的基本都是无返回值类型的，这里添加一个 &lt;code&gt;:Action&lt;/code&gt;类型，貌似就是确定了返回值类型的，不知道理解的对不对。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* from js/actions/filter.js */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function applyTopicsFilter(topics): Action &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    type: &amp;apos;APPLY_TOPICS_FILTER&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    topics,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;redux的这个流程图不错&lt;br&gt;&lt;img src=&quot;http://static.open-open.com/lib/uploadImg/20160424/20160424233655_731.png&quot; alt=&quot;组件&quot;&gt;&lt;/p&gt;
&lt;p&gt;越看越不懂，任重而道远&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;主要是先参考如下篇文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1461512056952.html&quot;&gt;http://www.open-open.com/lib/view/open1461512056952.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次接触redux，概念还比较模糊，同时js开发水平也一般，对一些语法学习还不是很懂，这里做个记录：&lt;br&gt;代码中的很多function func(): type的用法，我之前接触的基本都是无返回值类型的，这里添加一个 &lt;code&gt;:Action&lt;/code&gt;类型，貌似就是确定了返回值类型的，不知道理解的对不对。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://theewind.github.io/tags/React-Native/"/>
    
  </entry>
  
</feed>
