<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sanfeng’s blog</title>
  <subtitle>sanfengflying</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://theewind.github.io/"/>
  <updated>2016-12-09T03:17:37.000Z</updated>
  <id>http://theewind.github.io/</id>
  
  <author>
    <name>sanfeng.li</name>
    <email>sanfengflying@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何调试一个js项目</title>
    <link href="http://theewind.github.io/2016/12/08/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E4%B8%80%E4%B8%AAjs%E9%A1%B9%E7%9B%AE/"/>
    <id>http://theewind.github.io/2016/12/08/如何调试一个js项目/</id>
    <published>2016-12-08T10:18:39.000Z</published>
    <updated>2016-12-09T03:17:37.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在学习同时开发的一个脚手架工具Tiger，主要是用来快速生成模块化类的一个工具，其中是采用js语言写的，自己想调试的时候发现不得要领，查找一些资料下来有点眉目，此处做个记录。&lt;/p&gt;
&lt;p&gt;首先这个工具的用法是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tiger init className superClassName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实内部就是调用一个js文件 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node run.js  init className superClassName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果没有node环境，可以将run.js添加x属性，然后执行 ./run.js …  操作。&lt;/p&gt;
&lt;p&gt;调试工具选用 webstorm，然后在debug的 Run/Debug Configurations 里面可以选择要调试的js文件，如果需要参数，也可以在Node Parameters里面添加参数。&lt;br&gt;&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20161209-1.png&quot; alt=&quot;如图&quot;&gt;&lt;/p&gt;
&lt;p&gt;剩下的问题就是js语法调试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在学习同时开发的一个脚手架工具Tiger，主要是用来快速生成模块化类的一个工具，其中是采用js语言写的，自己想调试的时候发现不得要领，查找一些资料下来有点眉目，此处做个记录。&lt;/p&gt;
&lt;p&gt;首先这个工具的用法是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tiger init cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>只支持横屏的应用调用竖屏系统库崩溃的问题</title>
    <link href="http://theewind.github.io/2016/12/02/%E5%8F%AA%E6%94%AF%E6%8C%81%E6%A8%AA%E5%B1%8F%E7%9A%84%E5%BA%94%E7%94%A8%E8%B0%83%E7%94%A8%E7%AB%96%E5%B1%8F%E7%B3%BB%E7%BB%9F%E5%BA%93%E5%B4%A9%E6%BA%83%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://theewind.github.io/2016/12/02/只支持横屏的应用调用竖屏系统库崩溃的问题/</id>
    <published>2016-12-02T08:07:28.000Z</published>
    <updated>2016-12-02T08:23:14.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;横屏应用调用竖屏内容，crash&quot;&gt;&lt;a href=&quot;#横屏应用调用竖屏内容，crash&quot; class=&quot;headerlink&quot; title=&quot;横屏应用调用竖屏内容，crash&quot;&gt;&lt;/a&gt;横屏应用调用竖屏内容，crash&lt;/h2&gt;&lt;p&gt;今天在测试开发过程中，如果你的app只支持横屏，如下图&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20161202-1.png&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;在设置中只支持横屏，这时候如果调用一些系统的只支持竖屏的应用，比如UIImagePickerViewcontroller，就会有崩溃，控制台显示如下：&lt;/p&gt;
&lt;p&gt;自己比较纠结的地方在于，控制台完全没有&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20161202-2.png&quot; alt=&quot;上图&quot;&gt;&lt;br&gt;内容的输出，所以比较不好发现，重新写了一个测试程序才正常输出了。&lt;/p&gt;
&lt;p&gt;ps：使用系统的库，CIDetector 自动识别二维码，发现如果二维码是拍照出来的，有比较多干扰，或者二维码内容不加多，CIDetector也是不能准确识别的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;横屏应用调用竖屏内容，crash&quot;&gt;&lt;a href=&quot;#横屏应用调用竖屏内容，crash&quot; class=&quot;headerlink&quot; title=&quot;横屏应用调用竖屏内容，crash&quot;&gt;&lt;/a&gt;横屏应用调用竖屏内容，crash&lt;/h2&gt;&lt;p&gt;今天在测试开发过程中，如果你
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发记录</title>
    <link href="http://theewind.github.io/2016/11/22/Fetch/"/>
    <id>http://theewind.github.io/2016/11/22/Fetch/</id>
    <published>2016-11-22T10:29:39.000Z</published>
    <updated>2016-11-25T03:10:54.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;background-Fetch-注意&quot;&gt;&lt;a href=&quot;#background-Fetch-注意&quot; class=&quot;headerlink&quot; title=&quot;background Fetch 注意&quot;&gt;&lt;/a&gt;background Fetch 注意&lt;/h2&gt;&lt;p&gt;使用background Fetch 主要记得要回调completionHandler(UIBackgroundFetchResultNewData)等&lt;/p&gt;
&lt;p&gt;调试有两种方式&lt;br&gt;1 程序进入后台，选择xcode - debug - simulate background fetch，&lt;br&gt;2 选择scheme的 launch due to a background fetch event 这是谁debug调试的时候，先执行fetch功能，然后自己通过主动启动应用，查看是否执行了fetch&lt;/p&gt;
&lt;h2 id=&quot;离线缓存&quot;&gt;&lt;a href=&quot;#离线缓存&quot; class=&quot;headerlink&quot; title=&quot;离线缓存&quot;&gt;&lt;/a&gt;离线缓存&lt;/h2&gt;&lt;p&gt;参考个大厂商的缓存，一种是看过即缓存，比如网易新闻，还有一种直接是离线下载，比如腾讯新闻。&lt;br&gt;针对这两个实现，自己大概想了下，一个是基于webview的缓存实现，另外一种，应该是通过服务下载资源到本地，然后存储到数据库中，比如coredata等。&lt;/p&gt;
&lt;p&gt;webview的缓存实现主要两种，一个html5的manifest文件，也可以通过NSURLCache实现。&lt;br&gt;具体可以参考：&lt;a href=&quot;http://www.cocoachina.com/ios/20161107/17981.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发网络——数据缓存&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有一个就是采用NSURLProtocol实现存储，可以参考&lt;a href=&quot;https://github.com/rnapier/RNCachingURLProtocol&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/rnapier/RNCachingURLProtocol&lt;/a&gt; 就是将请求过的内容都缓存下来。&lt;/p&gt;
&lt;p&gt;至于为什么说离线是通过服务下载的，因为他们可以把没有看过的内容都离线到本地，那就只能是是通过文件下载来实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0417/2736.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0417/2736.html&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/rnapier/RNCachingURLProtocol&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/rnapier/RNCachingURLProtocol&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://my.oschina.net/u/2340880/blog?sort=time&amp;amp;p=9&amp;amp;temp=1479982318849&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://my.oschina.net/u/2340880/blog?sort=time&amp;amp;p=9&amp;amp;temp=1479982318849&lt;/a&gt; 晖少的博客&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;background-Fetch-注意&quot;&gt;&lt;a href=&quot;#background-Fetch-注意&quot; class=&quot;headerlink&quot; title=&quot;background Fetch 注意&quot;&gt;&lt;/a&gt;background Fetch 注意&lt;/h2&gt;&lt;p&gt;使用
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS证书之CSR文件</title>
    <link href="http://theewind.github.io/2016/09/28/iOS%E8%AF%81%E4%B9%A6%E8%A7%A3%E5%AF%86/"/>
    <id>http://theewind.github.io/2016/09/28/iOS证书解密/</id>
    <published>2016-09-28T08:28:47.000Z</published>
    <updated>2016-09-28T10:04:27.000Z</updated>
    
    <content type="html">&lt;p&gt;在iOS开发的过程中， 必然需要制作证书，开发者证书，发布证书，但是在制作他们的第一步都是先生成一个CSR文件&lt;br&gt;&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/Screen%20Shot%202016-09-28%20at%204.35.22%20PM.png&quot; alt=&quot;证书机构申请&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么到底CSR是什么东西呢？可以参考下面官方介绍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sslshopper.com/what-is-a-csr-certificate-signing-request.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is a CSR (Certificate Signing Request)?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，CSR就是Certificate Signing Request的缩写，是从证书颁发机构生成证书时，需要的一串加密的文本信息，也是从证书颁发机构获取的，用文本工具打开，可以看到他是一串&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;—–BEGIN CERTIFICATE REQUEST—–&lt;br&gt;MIICkDCCAXgCAQAwSzEkMCIGCSqGSIb3DQEJARYVc2FuZmVuZ2ZseWluZ0AxMjYu&lt;br&gt;Y29tMRYwFAYDVQQDDA1zYW5mZW5nZmx5aW5nMQswCQYDVQQGEwJDTjCCASIwDQYJ&lt;br&gt;KoZIhvcNAQEBBQADggEPADCCAQoCggEBALeOs2Pd65KYGUFXio02QrUyFUSImQ2L&lt;br&gt;NEFNpEga6yWPEsXG+yYAsd4dx5DOkWx4Iiybsdg0v8uB1b9d0GfjIzRiMyhTM24V&lt;br&gt;cgODmijKT2DnxvagDZH9+ikErvlvcb4KtLKNoRYOJ8T0Oc80ibamQULuTRyrixlQ&lt;br&gt;u8G5gIul3MxQpv+ZmJO3DcamqnfKkrQNVw3D9ALUuk7o8W1V8vgea/LzsVMm5JzC&lt;br&gt;mxq1zOnnxpV/7KHdVtrK+rRMOqr2tdTnKtgK9yNVqCjWDgJmmvVtJ1uvmmDWevjg&lt;br&gt;S985hH2niif9zlim4c3tjceGkAaYpuGM+24kQnYvYt6JvNh9XTkeVh0CAwEAAaAA&lt;br&gt;MA0GCSqGSIb3DQEBCwUAA4IBAQAId4jHlTMryJHTDhL/cgSb5rRIYJC7wJ2fvGfu&lt;br&gt;Jwlr6HZplZBZGDr271lYcEJ56VDyXzLEx1ea/4f+I3IFowS6AlcvY2YrJwY7KET+&lt;br&gt;R98GDsprBdgg2RpSxpJPe4rF1rWDjUdPJUCFi+AczQ0aA6ckIzYDhlQpXieTXKPd&lt;br&gt;nrG0cV6vsJBMQ6oAo8eZxDl7HV29sK/RJRa1k0q3GpzyhpKmPTfiA0ig4H4zHE3n&lt;br&gt;TUtwa9EOBuhxcGItZRypdZTOX1Rrp5XFyxdtUgx9eKsg0sys/SGgrTtU+YAiorr1&lt;br&gt;TH4jOKnTy1lATjIn3MQhoBQhPl6WxmtVcWx2+pLklYEW+M+Y&lt;br&gt;—–END CERTIFICATE REQUEST—–&lt;/p&gt;
&lt;p&gt;这样的内容，它里面实际包含了一些你的个人信息，比如email，国家等，但是最重要的是，他包含了你签名要用的公钥信息，而对应的私钥则存储在你的mac上，打开KeyChain Asscess –login –Keys 发现里面多了两组信息，就是公钥私钥&lt;/p&gt;
&lt;p&gt;采用如下命令，可以将CSR进行解密：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl req -in CertificateSigningRequest.certSigningRequest -noout -text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以得到如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Certificate Request:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Data:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Version: 0 (0x0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Subject: emailAddress=sanfengflying@126.com, CN=sanfengflying, C=CN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Subject Public Key Info:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Public Key Algorithm: rsaEncryption&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            RSA Public Key: (2048 bit)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                Modulus (2048 bit):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    00:b7:8e:b3:63:dd:eb:92:98:19:41:57:8a:8d:36:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    42:b5:32:15:44:88:99:0d:8b:34:41:4d:a4:48:1a:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    eb:25:8f:12:c5:c6:fb:26:00:b1:de:1d:c7:90:ce:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    91:6c:78:22:2c:9b:b1:d8:34:bf:cb:81:d5:bf:5d:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    d0:67:e3:23:34:62:33:28:53:33:6e:15:72:03:83:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    9a:28:ca:4f:60:e7:c6:f6:a0:0d:91:fd:fa:29:04:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ae:f9:6f:71:be:0a:b4:b2:8d:a1:16:0e:27:c4:f4:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    39:cf:34:89:b6:a6:41:42:ee:4d:1c:ab:8b:19:50:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    bb:c1:b9:80:8b:a5:dc:cc:50:a6:ff:99:98:93:b7:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    0d:c6:a6:aa:77:ca:92:b4:0d:57:0d:c3:f4:02:d4:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ba:4e:e8:f1:6d:55:f2:f8:1e:6b:f2:f3:b1:53:26:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    e4:9c:c2:9b:1a:b5:cc:e9:e7:c6:95:7f:ec:a1:dd:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    56:da:ca:fa:b4:4c:3a:aa:f6:b5:d4:e7:2a:d8:0a:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    f7:23:55:a8:28:d6:0e:02:66:9a:f5:6d:27:5b:af:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    9a:60:d6:7a:f8:e0:4b:df:39:84:7d:a7:8a:27:fd:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ce:58:a6:e1:cd:ed:8d:c7:86:90:06:98:a6:e1:8c:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    fb:6e:24:42:76:2f:62:de:89:bc:d8:7d:5d:39:1e:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    56:1d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                Exponent: 65537 (0x10001)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Attributes:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            a0:00&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Signature Algorithm: sha256WithRSAEncryption&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        08:77:88:c7:95:33:2b:c8:91:d3:0e:12:ff:72:04:9b:e6:b4:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        48:60:90:bb:c0:9d:9f:bc:67:ee:27:09:6b:e8:76:69:95:90:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        59:18:3a:f6:ef:59:58:70:42:79:e9:50:f2:5f:32:c4:c7:57:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        9a:ff:87:fe:23:72:05:a3:04:ba:02:57:2f:63:66:2b:27:06:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        3b:28:44:fe:47:df:06:0e:ca:6b:05:d8:20:d9:1a:52:c6:92:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        4f:7b:8a:c5:d6:b5:83:8d:47:4f:25:40:85:8b:e0:1c:cd:0d:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        1a:03:a7:24:23:36:03:86:54:29:5e:27:93:5c:a3:dd:9e:b1:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        b4:71:5e:af:b0:90:4c:43:aa:00:a3:c7:99:c4:39:7b:1d:5d:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        bd:b0:af:d1:25:16:b5:93:4a:b7:1a:9c:f2:86:92:a6:3d:37:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        e2:03:48:a0:e0:7e:33:1c:4d:e7:4d:4b:70:6b:d1:0e:06:e8:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        71:70:62:2d:65:1c:a9:75:94:ce:5f:54:6b:a7:95:c5:cb:17:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        6d:52:0c:7d:78:ab:20:d2:cc:ac:fd:21:a0:ad:3b:54:f9:80:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        22:a2:ba:f5:4c:7e:23:38:a9:d3:cb:59:40:4e:32:27:dc:c4:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        21:a0:14:21:3e:5e:96:c6:6b:55:71:6c:76:fa:92:e4:95:81:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        16:f8:cf:98&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到他的全部内容，公钥以及其他内容&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;当然我们也可以使用如下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl req -new -keyout server.key -out server.csr
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成CSR和私钥key，有了这两个之后，就可以通过CA机构生成证书。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ps：&lt;br&gt;证书相关的有太多的格式，.pem, .cer, .key, .p12 等等，为什么这么多呢？&lt;br&gt;首先要知道，X.509是常见通用的证书格式。所有的证书都符合为Public Key Infrastructure (PKI) 制定的 ITU-T X509 国际标准。&lt;/p&gt;
&lt;p&gt;.cer/.crt是用于存放证书，它是2进制形式存放的，不含私钥。&lt;/p&gt;
&lt;p&gt;.pem跟crt/cer的区别是它以Ascii来表示。&lt;/p&gt;
&lt;p&gt;pfx/p12用于存放个人证书/私钥，他通常包含保护密码，2进制方式&lt;/p&gt;
&lt;p&gt;der,cer文件一般是二进制格式的，只放证书，不含私钥&lt;/p&gt;
&lt;p&gt;pem文件一般是文本格式的，可以放证书或者私钥，或者两者都有&lt;/p&gt;
&lt;p&gt;key文件，pem如果只含私钥的话，一般用.key扩展名，而且可以有密码保护&lt;/p&gt;
&lt;p&gt;p12文件是二进制格式，同时含私钥和证书，通常有保护密码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-26575352-id-3073802.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.chinaunix.net/uid-26575352-id-3073802.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后续开发需要，证书及配置文件的制作，请参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/9d9e3699515e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发证书与配置文件的使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Provisioning Profile文件包含了上述所有内容：证书，App ID，设备，后缀名为.mobileprovision。&lt;br&gt;&amp;gt;&lt;br&gt;一个Provisioning Profile对应一个Explicit App ID或Wildcard App ID。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Provisioning Profile决定Xcode用哪个证书（公钥）/私钥组合（Key Pair/Signing Identity）来签名应用程序（Signing Product）,将在应用程序打包时嵌入到.ipa包里。&lt;/p&gt;
&lt;p&gt;Provisioning Profile把这些信息全部打包在一起，方便我们在调试和发布程序打包时使用。这样，只要在不同的情况下选择不同的Provisioning Profile文件就可以了。&lt;/p&gt;
&lt;p&gt;Provisioning Profile也分为Development和Distribution两类，有效期同Certificate一样。&lt;/p&gt;
&lt;p&gt;Development版本的ProvisioningProfile用于开发调试，Distribution版本的ProvisioningProfile主要用于提交App Store审核，其不指定开发测试的Devices。&lt;/p&gt;
&lt;p&gt;xcode开发时，需在XcodeTarget-&amp;gt;Build Settings-&amp;gt;Code Signing-&amp;gt;Provisioning Profile下配置对应的描述文件（Provisioning Profiles），然后在Code Signing Identity下拉可选择Identities from Profile “…”（即Provisioning Profile中包含的Certificates）。&lt;/p&gt;
&lt;p&gt;在XcodeTarget-&amp;gt;Build Settings-&amp;gt;Code Signing-&amp;gt;Provisioning Profile可选择“Automatic”，xcode会根据该Target的“Bundle identifier”选择默认的配置文件及证书。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS开发的过程中， 必然需要制作证书，开发者证书，发布证书，但是在制作他们的第一步都是先生成一个CSR文件&lt;br&gt;&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/Screen%20Shot%202016-09-28%20at%204.35.22%20PM.png&quot; alt=&quot;证书机构申请&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么到底CSR是什么东西呢？可以参考下面官方介绍&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sslshopper.com/what-is-a-csr-certificate-signing-request.html&quot;&gt;What is a CSR (Certificate Signing Request)?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，CSR就是Certificate Signing Request的缩写，是从证书颁发机构生成证书时，需要的一串加密的文本信息，也是从证书颁发机构获取的，用文本工具打开，可以看到他是一串&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ipv6环境搭建</title>
    <link href="http://theewind.github.io/2016/09/24/ipv6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://theewind.github.io/2016/09/24/ipv6环境搭建/</id>
    <published>2016-09-24T08:05:36.000Z</published>
    <updated>2016-09-24T08:26:00.000Z</updated>
    
    <content type="html">&lt;p&gt;自从5月初Apple明文规定所有开发者在6月1号以后提交新版本需要支持IPV6-Only的网络，大家便开始热火朝天的研究如何支持IPV6，以及应用中哪些模块目前不支持IPV6。&lt;/p&gt;
&lt;p&gt;IPV6是什么，可以参考网上的文章&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/isItOk/p/5621530.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用如何支持IPV6-b&lt;/a&gt;，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何用自己的Mac搭建ipv6测试环境，可以参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/e75057f2f33cffebc91a89a3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac电脑搭建IPV6测试环境&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这里需要注意的是，如果mac电脑本身就是通过wifi连接网络的，需要使用一个USB Ethernet或者雷电转接口，保证电脑是通过网线连接的。比如自己的电脑就是这样的&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20160924-0@2x.png&quot; alt=&quot;网络设置&quot;&gt;&lt;br&gt;确保你的USB Ethernet网络是排在第一位的，如果不是的话，可以先删除Wifi，确保有线网络是第一位，然后再创建一个。&lt;br&gt;之后按照上面文章的配置就可以了。&lt;/p&gt;
&lt;p&gt;如果应用发布的时候因为ipv6被拒，可以参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wg689/Solve-App-Store-Review-Problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ipv6审核问题大集合&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brianjcoleman.com/tutorial-how-to-test-your-app-for-ipv6-compatibility/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TUTORIAL: HOW TO TEST YOUR APP FOR IPV6 COMPATIBILITY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a6bab07c4062&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用支持IPV6，就那点事儿&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自从5月初Apple明文规定所有开发者在6月1号以后提交新版本需要支持IPV6-Only的网络，大家便开始热火朝天的研究如何支持IPV6，以及应用中哪些模块目前不支持IPV6。&lt;/p&gt;
&lt;p&gt;IPV6是什么，可以参考网上的文章&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/isItOk/p/5621530.html&quot;&gt;iOS应用如何支持IPV6-b&lt;/a&gt;，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何用自己的Mac搭建ipv6测试环境，可以参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/e75057f2f33cffebc91a89a3.html&quot;&gt;Mac电脑搭建IPV6测试环境&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS长连接的实现--python搭建服务及端口</title>
    <link href="http://theewind.github.io/2016/09/22/iOS%E9%95%BF%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%AE%9E%E7%8E%B0-%E7%AB%AF%E5%8F%A3%E5%AD%A6%E4%B9%A0/"/>
    <id>http://theewind.github.io/2016/09/22/iOS长连接的实现-端口学习/</id>
    <published>2016-09-22T01:57:15.000Z</published>
    <updated>2016-09-28T09:20:28.000Z</updated>
    
    <content type="html">&lt;p&gt;###端口学习&lt;br&gt;80端口，主要是提供http服务用的，一般用户的设备上是不会被占用，服务端开启80端口，监听客户端的连接。&lt;/p&gt;
&lt;p&gt;通过命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsof -i tcp:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以有如下打印：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;COMMAND   PID    FD   TYPE             DEVICE SIZE/OFF NODE NAME&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Google    382    92u  IPv4 0x2daafbe57dd15977      0t0  TCP 172.22.32.145:59650-&amp;gt;221.228.218.142:http (CLOSED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;com.apple 414    25u  IPv4 0x2daafbe58dbe5d57      0t0  TCP 172.22.32.145:60738-&amp;gt;42.121.252.58:http (ESTABLISHED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;com.apple 414    26u  IPv4 0x2daafbe58dbe5d57      0t0  TCP 172.22.32.145:60738-&amp;gt;42.121.252.58:http (ESTABLISHED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SourceTre 380  	 228u  IPv4 0x2daafbe589512d57      0t0  TCP 172.22.32.145:60764-&amp;gt;131.103.28.14:http (ESTABLISHED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SourceTre 380    35u  IPv4 0x2daafbe589512d57      0t0  TCP 172.22.32.145:60764-&amp;gt;131.103.28.14:http (ESTABLISHED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Google    382    92u  IPv4 0x2daafbe57dd15977      0t0  TCP 172.22.32.145:59650-&amp;gt;221.228.218.142:http (CLOSED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;com.apple 414    22u  IPv4 0x2daafbe5895e8787      0t0  TCP 172.22.32.145:60772-&amp;gt;101.226.196.38:http (ESTABLISHED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;com.apple 414    24u  IPv4 0x2daafbe5895e8787      0t0  TCP 172.22.32.145:60772-&amp;gt;101.226.196.38:http (ESTABLISHED)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;com.apple 414    33u  IPv4 0x2daafbe588e8e977      0t0  TCP 172.22.32.145:60782-&amp;gt;103.37.152.63:http (CLOSE_WAIT)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;com.apple 414    34u  IPv4 0x2daafbe588e8e977      0t0  TCP 172.22.32.145:60782-&amp;gt;103.37.152.63:http (CLOSE_WAIT)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以看到自己的源地址都是开启一些临时的端口：比如 59650， 60738等，不同的应用会创建不一样的端口，然后目的端口都是http默认的80端口，这里没有写出来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同一个设备，一个端口只能被一个应用使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那什么情况下自己的电脑的80端口会被占用呢？&lt;br&gt;一般是在自己的机器上安装IIS,NGINX或者APACHE，才会冲突&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;windows中经常会被进程为inetinfo.exe占用。（稍后解释inetinfo.exe进程）如果你现在直接结束掉这个进程，无论如何inetinfo.exe都会自动重新运行，只是这个时候的PID就改变了。所以这样不能完全的释放80端口。&lt;br&gt;遇到这种情况，先分析是否是IIS，因为我之前有做网站，需要安装IIS，并且创建了一个站点，在控制面板-管理工具-internet 信息服务-网站下面可以看到这个站点，只需要把这个站点停止掉就可以了，然后你再到开始-运行-输入cmd（回车）-打开命令提示符——netstat -ano，可以看到已经没有80端口，这个时候在安装软件，就一切顺利了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进程PID是可以变化的，就是说不同时间运行同一个程序，它的PID号就不同。不同计算机同一个进程的PID号多数情况也是不同的。因此，在结束inetinfo.exe之前的PID是一个三位数，重新启动后，它的PID可能为四位数了。这点不影响问题的解决，我只是好奇，便拿出来说罢了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用python写一个简答的服务端程序，可以参考：&lt;br&gt;&lt;a href=&quot;https://www.raywenderlich.com/3932/networking-tutorial-for-ios-how-to-create-a-socket-based-iphone-app-and-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Networking Tutorial for iOS: How To Create A Socket Based iPhone App and Server&lt;/a&gt;&lt;br&gt;它里面主要是创建了一个80端口的监听，但是我自己的电脑实际上80端口还是被占用的，执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo lsof -i:80 | grep LISTEN
输出
httpd     66226      root    5u  IPv6 0x2daafbe58b3cc967      0t0  TCP *:http (LISTEN)
httpd     66230      _www    5u  IPv6 0x2daafbe58b3cc967      0t0  TCP *:http (LISTEN)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是因为80端口被apache给占用了，默认是开机启动的。所以可以执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apachectl stop
sudo python server.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以看到了 Iphone Chat server started，后续可以把客户端给搭建起来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14640711/python-twisted-reactor-address-already-in-use&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python twisted reactor - address already in use&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;###端口学习&lt;br&gt;80端口，主要是提供http服务用的，一般用户的设备上是不会被占用，服务端开启80端口，监听客户端的连接。&lt;/p&gt;
&lt;p&gt;通过命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsof -i tcp:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以有如下打印：&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS长连接的实现-分析篇</title>
    <link href="http://theewind.github.io/2016/09/22/iOS%E9%95%BF%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%AE%9E%E7%8E%B0-%E5%88%86%E6%9E%90%E7%AF%87/"/>
    <id>http://theewind.github.io/2016/09/22/iOS长连接的实现-分析篇/</id>
    <published>2016-09-22T00:50:12.000Z</published>
    <updated>2016-09-22T00:51:05.000Z</updated>
    
    <content type="html">&lt;p&gt;&amp;gt;&lt;br&gt;&lt;a href=&quot;https://www.zybuluo.com/Xiaojun-Jin/note/29874&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Socket Based iOS Programming&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;gt;&lt;br&gt;&lt;a href=&quot;https://www.zybuluo.com/Xiaojun-Jin/note/29874&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Socket Based iOS Programming&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>perform执行时机</title>
    <link href="http://theewind.github.io/2016/09/17/perform%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/"/>
    <id>http://theewind.github.io/2016/09/17/perform执行时机/</id>
    <published>2016-09-17T14:51:42.000Z</published>
    <updated>2016-09-17T15:05:44.000Z</updated>
    
    <content type="html">&lt;p&gt;在iOS开发中，大家都经常用到performSelector函数，但是他们的执行时机是怎么样的，这里做个简单的介绍。&lt;/p&gt;
&lt;p&gt;首先如果我们在主线程调用和在子线程调用下面的方法有什么区别呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[self performSelector:@selector(testttt) withObject:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;试过后，就知道在主线程会执行testttt函数，而在子线程是不会执行的呢，为什么呢？这里就要涉及到runloop了，因为主线程的runloop默认是运行的，但是子线程的runloop默认是没有的，需要自己去创建并执行，通常调用如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
子线程在没有第一次调用runloop是会先创建，然后在run。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;更多可以参考&lt;a href=&quot;http://ios.jobbole.com/85759/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么对于，&lt;code&gt;performSelector:withObject:&lt;/code&gt; 和 &lt;code&gt;performSelector:withObject:afterDelay:0&lt;/code&gt; 有什么区别呢？&lt;/p&gt;
&lt;p&gt;通过如下代码可以测试：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;   NSLog(@&amp;quot;beigi&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   [self performSelector:@selector(testttt) withObject:nil];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   [self performSelector:@selector(testPer) withObject:nil withObject:nil];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   [self performSelector:@selector(testttt) withObject:nil afterDelay:0];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   [self performSelector:@selector(testPer) withObject:nil afterDelay:0];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   NSLog(@&amp;quot;end&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;打印顺序为：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-09-17 23:01:08.430 [76256:1232843] beigi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-09-17 23:01:08.431 [76256:1232843] test tttt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-09-17 23:01:08.431 [76256:1232843] test&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-09-17 23:01:08.431 [76256:1232843] end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-09-17 23:01:08.470 [76256:1232843] test tttt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-09-17 23:01:08.470 [76256:1232843] test&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现，&lt;code&gt;performSelector:withObject:&lt;/code&gt;是直接调用了方法，而&lt;code&gt;performSelector:withObject:afterDelay:0&lt;/code&gt; 即使是延迟0s也是在end之后执行的，这是为什么呢？&lt;/p&gt;
&lt;p&gt;原因就是：前者是在当前runloop中调用的，后者是在先一个runloop方法中调用的。所以如果在代码中，想要通过时间：afterDelay来控制某些动画之类的，就需要注意了。&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;br&gt;&lt;a href=&quot;http://ios.jobbole.com/85759/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ios.jobbole.com/85759/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ibireme.com/2015/05/18/runloop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.ibireme.com/2015/05/18/runloop/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS开发中，大家都经常用到performSelector函数，但是他们的执行时机是怎么样的，这里做个简单的介绍。&lt;/p&gt;
&lt;p&gt;首先如果我们在主线程调用和在子线程调用下面的方法有什么区别呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[self performSelector:@selector(testttt) withObject:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;试过后，就知道在主线程会执行testttt函数，而在子线程是不会执行的呢，为什么呢？这里就要涉及到runloop了，因为主线程的runloop默认是运行的，但是子线程的runloop默认是没有的，需要自己去创建并执行，通常调用如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
子线程在没有第一次调用runloop是会先创建，然后在run。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;更多可以参考&lt;a href=&quot;http://ios.jobbole.com/85759/&quot;&gt;这里&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>runloop监控主线程</title>
    <link href="http://theewind.github.io/2016/09/12/runloop%E7%9B%91%E6%8E%A7%E4%B8%BB%E7%BA%BF%E7%A8%8B/"/>
    <id>http://theewind.github.io/2016/09/12/runloop监控主线程/</id>
    <published>2016-09-12T07:37:09.000Z</published>
    <updated>2016-09-12T08:09:53.000Z</updated>
    
    <content type="html">&lt;p&gt;前几天读了关于微信监控内存卡顿的文章，其中介绍可以同过监控主线程runloop的时间来记录卡顿，当cpu为100%且runloop运行2秒以上时，就会把当前堆栈的所有信息给dump下来，然后上传发服务器，后续再继续进行分析。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;然后自己对这里面的一些知识点比较感兴趣，这里做个简单点记录。&lt;/p&gt;
&lt;p&gt;###记录内存使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ (float)usedSizeOfMemory &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    task_vm_info_data_t taskInfo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mach_msg_type_number_t infoCount = TASK_VM_INFO_COUNT;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    kern_return_t kernReturn = task_info(mach_task_self(), TASK_VM_INFO_PURGEABLE, (task_info_t)&amp;amp;taskInfo, &amp;amp;infoCount);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (kernReturn != KERN_SUCCESS) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return 0.0f;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return ((taskInfo.internal + taskInfo.compressed - taskInfo.purgeable_volatile_pmap) / (1024.0 * 1024.0));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###记录cpu使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-(float) cpu_usage&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    kern_return_t kr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    task_info_data_t tinfo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mach_msg_type_number_t task_info_count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    task_info_count = TASK_INFO_MAX;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    kr = task_info(mach_task_self(), TASK_BASIC_INFO, (task_info_t)tinfo, &amp;amp;task_info_count);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (kr != KERN_SUCCESS) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return -1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    task_basic_info_t      basic_info;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thread_array_t         thread_list;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mach_msg_type_number_t thread_count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thread_info_data_t     thinfo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mach_msg_type_number_t thread_info_count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thread_basic_info_t basic_info_th;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint32_t stat_thread = 0; // Mach threads&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    basic_info = (task_basic_info_t)tinfo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // get threads in the task&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    kr = task_threads(mach_task_self(), &amp;amp;thread_list, &amp;amp;thread_count);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (kr != KERN_SUCCESS) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return -1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (thread_count &amp;gt; 0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        stat_thread += thread_count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    long tot_sec = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    long tot_usec = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    float tot_cpu = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for (j = 0; j &amp;lt; thread_count; j++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        thread_info_count = THREAD_INFO_MAX;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        kr = thread_info(thread_list[j], THREAD_BASIC_INFO,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                         (thread_info_t)thinfo, &amp;amp;thread_info_count);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (kr != KERN_SUCCESS) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return -1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        basic_info_th = (thread_basic_info_t)thinfo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (!(basic_info_th-&amp;gt;flags &amp;amp; TH_FLAGS_IDLE)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            tot_sec = tot_sec + basic_info_th-&amp;gt;user_time.seconds + basic_info_th-&amp;gt;system_time.seconds;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            tot_usec = tot_usec + basic_info_th-&amp;gt;system_time.microseconds + basic_info_th-&amp;gt;system_time.microseconds;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            tot_cpu = tot_cpu + basic_info_th-&amp;gt;cpu_usage / (float)TH_USAGE_SCALE * 100.0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; // for each thread&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    kr = vm_deallocate(mach_task_self(), (vm_offset_t)thread_list, thread_count * sizeof(thread_t));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert(kr == KERN_SUCCESS);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return tot_cpu;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###使用runloop监控主线程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1. 合适的地方添加一个子线程&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [NSThread detachNewThreadSelector: @selector(newThreadProcess)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             toTarget: self&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                           withObject: nil];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. 添加监控方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)newThreadProcess&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //获得当前thread的Runloop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSRunLoop *mainLoop = [NSRunLoop mainRunLoop];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSRunLoop* myRunLoop = [NSRunLoop currentRunLoop];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //设置Run loop observer的运行环境&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        CFRunLoopObserverContext context = &amp;#123;0,(__bridge void *)(self),NULL,NULL,NULL&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //创建Run loop observer对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //第一个参数用于分配observer对象的内存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //第二个参数用以设置observer所要关注的事件，详见回调函数myRunLoopObserver中注释&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //第三个参数用于标识该observer是在第一次进入runloop时执行还是每次进入run loop处理时均执行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //第四个参数用于设置该observer的优先级&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //第五个参数用于设置该observer的回调函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //第六个参数用于设置该observer的运行环境&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        CFRunLoopObserverRef observer =CFRunLoopObserverCreate(kCFAllocatorDefault,kCFRunLoopAllActivities, YES, 0, &amp;amp;myRunLoopObserver, &amp;amp;context);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(observer)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //将Cocoa的NSRunLoop类型转换成CoreFoundation的CFRunLoopRef类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CFRunLoopRef cfRunLoop = [mainLoop getCFRunLoop];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //将新建的observer加入到当前thread的runloop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            CFRunLoopAddObserver(cfRunLoop, observer, kCFRunLoopDefaultMode);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [myRunLoop runUntilDate:[NSDate distantFuture]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3. 监控方法 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void myRunLoopObserver(CFRunLoopObserverRef observer,CFRunLoopActivity activity,void *info)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    switch (activity) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //The entrance of the run loop, before entering the event processing loop.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //This activity occurs once for each callto CFRunLoopRun and CFRunLoopRunInMode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        case kCFRunLoopEntry:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NSLog(@&amp;quot;run loop entry&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //Inside the event processing loop before any timers are processed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        case kCFRunLoopBeforeTimers:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NSLog(@&amp;quot;run loop before timers&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //Inside the event processing loop before any sources are processed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        case kCFRunLoopBeforeSources:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NSLog(@&amp;quot;run loop before sources&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //Inside the event processing loop before the run loop sleeps, waiting for a source or timer to fire.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //This activity does not occur ifCFRunLoopRunInMode is called with a timeout of 0 seconds.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //It also does not occur in a particulariteration of the event processing loop if a version 0 source fires&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        case kCFRunLoopBeforeWaiting:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NSLog(@&amp;quot;run loop before waiting&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //Inside the event processing loop after the run loop wakes up, but before processing the event that woke it up.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //This activity occurs only if the run loopdid in fact go to sleep during the current loop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        case kCFRunLoopAfterWaiting:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NSLog(@&amp;quot;run loop after waiting&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //The exit of the run loop, after exiting the event processing loop.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            //This activity occurs once for each callto CFRunLoopRun and CFRunLoopRunInMode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        case kCFRunLoopExit:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            NSLog(@&amp;quot;run loop exit&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            /*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             A combination of all the precedingstages&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             case kCFRunLoopAllActivities:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        default:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;可以通过kCFRunLoopBeforeWaiting和kCFRunLoopAfterWaiting的时间差，可以得知一次runloo的时间，然后就处理时间规则。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###dump所有线程信息&lt;br&gt;此处可以参考&lt;a href=&quot;https://github.com/ming1016/DecoupleDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;，简单直接使用PLCrashReporter进行收集，也可以参考他的&lt;a href=&quot;https://opensource.plausible.coop/src/projects/PLCR/repos/plcrashreporter/browse/Source/PLCrashLogWriter.m?at=refs%2Ftags%2F1.0#694&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt; 手动dump所有线程的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ibireme.com/2015/05/18/runloop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解RunLoop&lt;/a&gt; 这篇讲解的最深刻，作者功力深厚，开源YYKit系列&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/802cb5210dc4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;检测iOS的APP性能的一些方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优化UITableViewCell高度计算的那些事&lt;/a&gt;  其实最新的demo中，已经去除了Runloop&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/jjunjoe/article/details/8313016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS学习笔记12—Runloop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;amp;mid=207890859&amp;amp;idx=1&amp;amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微信iOS卡顿监控系统&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前几天读了关于微信监控内存卡顿的文章，其中介绍可以同过监控主线程runloop的时间来记录卡顿，当cpu为100%且runloop运行2秒以上时，就会把当前堆栈的所有信息给dump下来，然后上传发服务器，后续再继续进行分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="runLoop" scheme="http://theewind.github.io/tags/runLoop/"/>
    
  </entry>
  
  <entry>
    <title>loadView踩坑</title>
    <link href="http://theewind.github.io/2016/09/09/loadView%E8%B8%A9%E5%9D%91/"/>
    <id>http://theewind.github.io/2016/09/09/loadView踩坑/</id>
    <published>2016-09-09T02:00:31.000Z</published>
    <updated>2016-09-09T03:18:03.000Z</updated>
    
    <content type="html">&lt;p&gt;昨天在开始回归的时候，发现预订的订座按钮没有显示，而且big鹏还发现从NVTableView转成NVSensibleTableView也失败，于是就会调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法1：
[((NVSensibleTableView *)self.tableView) setTouchDownTarget:self selector:@selector(touchDownTableView)];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数就会crash，这个原因是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NVTableView有个setTouchDownTarget:selector:的Categroy，但是参数不一致&lt;/li&gt;
&lt;li&gt;NVTableView转换NVSensibleTableView失败，即tableView根本不是NVSensibleTableView子类，所以无法调用他的setTouchDownTarget:selector:方法，所以崩溃。&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;然后分析原因，刚开始以为是iOS10，xcode8的问题，因为之前都没有遇到这个，但是今天更新了xcode，就出现这个问题，但是因为xcode8已成事实，必须要解决，就想着是不是pod中的xib都在nova下惹的祸，于是把xib放到pod里面，也不行。然后继续看下NVTableView有没有做过修改，看了下后，发现他们有个’去除xib的‘commit，感觉就是这里出的问题。&lt;br&gt;真实原因如下：&lt;br&gt;之前NVTableViewController，有个IBOutlet的tableView属性，此tableView是从xib进行初始化的，然后继承了NVTableViewController的controller，比如BOOKOnlineBookingViewController,然后它也有个对应的BOOKOnlineBookingViewController.xib，里面有个UITableView控件，这样就把父类的tableView属性指向了子类的这个xib控件，而这个xib的控件的class是NVSensibleTableView，所以之前的[((NVSensibleTableView *)self.tableView) setTouchDownTarget:self selector:@selector(touchDownTableView)];是没有问题的，为什么这次出问题了？继续往下看&lt;br&gt;这次他做了一个这样的修改：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (void)loadView &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, [UIScreen width], [UIScreen height])];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.view.backgroundColor = [UIColor whiteColor];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.tableView = [[NVTableView alloc] initWithFrame:self.view.bounds style:[self tableViewStyle]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.tableView.backgroundColor = [UIColor clearColor];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.tableView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.tableView.delegate = self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.tableView.dataSource = self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [self.view addSubview:self.tableView];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重写了loadView，而且没有调用super方法，我们知道loadView的调用时机，是在第一次访问controller的&lt;code&gt;self.view==nil&lt;/code&gt;的时候被调用，那么问题就来了，因为它没有调用super方法，而是自己初始化了tableView为NVTableView的实例，所以就出现前面的问题，&lt;strong&gt;方法1无法调用成功&lt;/strong&gt;，因为这个方法是NVSensibleTableView的，而现在tableView的class是NVTableView。&lt;/p&gt;
&lt;p&gt;我们看下laodView的说明：&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;br&gt;Creates the view that the controller manages.&lt;br&gt;You should never call this method directly. The view controller calls this method when its view property is requested but is currently nil. This method loads or creates a view and assigns it to the view property.&lt;br&gt;&lt;strong&gt;If the view controller has an associated nib file, this method loads the view from the nib file&lt;/strong&gt;. A view controller has an associated nib file if the nibName property returns a non-nil value, which occurs if the view controller was instantiated from a storyboard, if you explicitly assigned it a nib file using the initWithNibName:bundle: method, or if iOS finds a nib file in the app bundle with a name based on the view controller’s class name. If the view controller does not have an associated nib file, this method creates a plain UIView object instead.&lt;br&gt;If you use Interface Builder to create your views and initialize the view controller, you must not override this method.&lt;br&gt;You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the view property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super.&lt;br&gt;If you want to perform any additional initialization of your views, do so in the viewDidLoad method.&lt;br&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;啥意思呢》？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总的来说，就是loadView会先判断食否有关联的xib，如果有，就会去加载xib初始化view，如果没有，就创建一个UIView。问题就出在这里，父类NVTableViewController实现了这个方法，就等于BOOKOnlineBookingViewController写了，他没有调用super，就不会去初始化xib，自己创建了NVTableView的实例，就导致我们的xib根本没有加载。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么如何修改呢，我们组内基于作者的调调，修改了方法实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (void)loadView &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [super loadView];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.view.frame = CGRectMake(0, 0, [UIScreen width], [UIScreen height]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	self.view.backgroundColor = [UIColor whiteColor];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (self.tableView == nil) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.tableView = [[NVTableView alloc] initWithFrame:self.view.bounds style:[self tableViewStyle]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.tableView.backgroundColor = [UIColor clearColor];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.tableView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.tableView.delegate = self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.tableView.dataSource = self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [self.view addSubview:self.tableView];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用super方法，肯定会返回一个UIView，不管是从xib，还是自动创建的一个UIView。&lt;/p&gt;
&lt;p&gt;ps：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过方法initWithNibName进行初始化都是&lt;code&gt;延迟加载&lt;/code&gt;，在调用self.view的时候才会去真正创建view:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (id)init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return [self initWithNibName:@&amp;quot;BOOKOnlineBookingViewController&amp;quot; bundle:[NSBundle mainBundle]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (self) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ....&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;如果实现了一个空的loadView&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-（void）loadView &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就会导致死循环，因为viewDidLoad里面self.view==nil始终成立，就会无止境的调用loadView。接着循环继续。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;昨天在开始回归的时候，发现预订的订座按钮没有显示，而且big鹏还发现从NVTableView转成NVSensibleTableView也失败，于是就会调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法1：
[((NVSensibleTableView *)self.tableView) setTouchDownTarget:self selector:@selector(touchDownTableView)];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数就会crash，这个原因是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NVTableView有个setTouchDownTarget:selector:的Categroy，但是参数不一致&lt;/li&gt;
&lt;li&gt;NVTableView转换NVSensibleTableView失败，即tableView根本不是NVSensibleTableView子类，所以无法调用他的setTouchDownTarget:selector:方法，所以崩溃。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>创建一个显示FPS的label</title>
    <link href="http://theewind.github.io/2016/09/06/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BAFPS%E7%9A%84label/"/>
    <id>http://theewind.github.io/2016/09/06/创建一个显示FPS的label/</id>
    <published>2016-09-06T07:40:57.000Z</published>
    <updated>2016-09-06T07:54:38.000Z</updated>
    
    <content type="html">&lt;p&gt;如何创建一个实时显示FPS的Label呢，看了Nova的代码，发现是主要是采用CADisplayLink实现，至于CADisplayLink主要作用是什么，这里简单介绍下：&lt;/p&gt;
&lt;p&gt;CADisplayLink是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类。CADisplayLink以特定模式注册到runloop后，每当屏幕显示内容刷新结束的时候，runloop就会向CADisplayLink指定的target发送一次指定的selector消息， CADisplayLink类对应的selector就会被调用一次。所以通常情况下，按照iOS设备屏幕的刷新率60次/秒。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;延迟：iOS设备的屏幕刷新频率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。但如果调用的方法比较耗时，超过了屏幕刷新周期，就会导致跳过若干次回调调用机会。&lt;br&gt;             如果CPU过于繁忙，无法保证屏幕60次/秒的刷新率，就会导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。&lt;/p&gt;
&lt;p&gt;使用场景：从原理上可以看出，CADisplayLink适合做界面的不停重绘，比如视频播放的时候需要不停地获取下一帧用于界面渲染。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;可以看到：CADisplayLink也不是绝对60次/秒刷新的，如果遇到屏幕刷新率降低，也是会有延迟和跳过的场景&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是刚好可以通过此途径来计算FPS，因为每次刷新屏幕都会调用CADisplayLink注册的selecotor。&lt;/p&gt;
&lt;p&gt;具体代码可以参考&lt;a href=&quot;https://github.com/ibireme/YYText/blob/master/Demo/YYTextDemo/YYFPSLabel.m&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YY系类之YYFPSLable&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/ioriwellings/p/5011993.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何让iOS 保持界面流畅？这些技巧你知道吗&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后无耻的放上了代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//  YYFPSLabel.m&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//  YYKitExample&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//  Created by ibireme on 15/9/3.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//  Copyright (c) 2015 ibireme. All rights reserved.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;quot;YYFPSLabel.h&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//#import &amp;lt;YYKit/YYKit.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;quot;YYText.h&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;quot;YYWeakProxy.h&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define kSize CGSizeMake(55, 20)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@implementation YYFPSLabel &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    CADisplayLink *_link;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSUInteger _count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSTimeInterval _lastTime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UIFont *_font;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UIFont *_subFont;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSTimeInterval _llll;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (instancetype)initWithFrame:(CGRect)frame &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (frame.size.width == 0 &amp;amp;&amp;amp; frame.size.height == 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        frame.size = kSize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self = [super initWithFrame:frame];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.layer.cornerRadius = 5;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.clipsToBounds = YES;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.textAlignment = NSTextAlignmentCenter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.userInteractionEnabled = NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.backgroundColor = [UIColor colorWithWhite:0.000 alpha:0.700];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _font = [UIFont fontWithName:@&amp;quot;Menlo&amp;quot; size:14];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (_font) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _subFont = [UIFont fontWithName:@&amp;quot;Menlo&amp;quot; size:4];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _font = [UIFont fontWithName:@&amp;quot;Courier&amp;quot; size:14];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _subFont = [UIFont fontWithName:@&amp;quot;Courier&amp;quot; size:4];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _link = [CADisplayLink displayLinkWithTarget:[YYWeakProxy proxyWithTarget:self] selector:@selector(tick:)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [_link addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)dealloc &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [_link invalidate];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (CGSize)sizeThatFits:(CGSize)size &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return kSize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)tick:(CADisplayLink *)link &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (_lastTime == 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _lastTime = link.timestamp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _count++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSTimeInterval delta = link.timestamp - _lastTime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (delta &amp;lt; 1) return;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _lastTime = link.timestamp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    float fps = _count / delta;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _count = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    CGFloat progress = fps / 60.0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UIColor *color = [UIColor colorWithHue:0.27 * (progress - 0.2) saturation:1 brightness:0.9 alpha:1];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSMutableAttributedString *text = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@&amp;quot;%d FPS&amp;quot;,(int)round(fps)]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [text yy_setColor:color range:NSMakeRange(0, text.length - 3)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [text yy_setColor:[UIColor whiteColor] range:NSMakeRange(text.length - 3, 3)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    text.yy_font = _font;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [text yy_setFont:_subFont range:NSMakeRange(text.length - 4, 1)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.attributedText = text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@end&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;如何创建一个实时显示FPS的Label呢，看了Nova的代码，发现是主要是采用CADisplayLink实现，至于CADisplayLink主要作用是什么，这里简单介绍下：&lt;/p&gt;
&lt;p&gt;CADisplayLink是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类。CADisplayLink以特定模式注册到runloop后，每当屏幕显示内容刷新结束的时候，runloop就会向CADisplayLink指定的target发送一次指定的selector消息， CADisplayLink类对应的selector就会被调用一次。所以通常情况下，按照iOS设备屏幕的刷新率60次/秒。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ios自动化测试部分知识</title>
    <link href="http://theewind.github.io/2016/09/05/ios%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86/"/>
    <id>http://theewind.github.io/2016/09/05/ios自动化测试部分知识/</id>
    <published>2016-09-05T03:06:59.000Z</published>
    <updated>2016-09-06T07:55:21.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在看关于iOS自动化测试的内容，其中比较常用的有KIF等，然后自己看他的实现时，发现有个beforeAll和AfterAll的方法，因为在当初写case的时候，不能知道所有case开始，和结束的时机，于是就对它比较好奇，看了他的实现。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (void)beforeAll&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [system simulateDeviceRotationToOrientation:UIDeviceOrientationLandscapeLeft];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [[viewTester usingIdentifier:@&amp;quot;Test Suite TableView&amp;quot;] scrollByFractionOfSizeHorizontal:0 vertical:-0.2];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)afterAll&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [system simulateDeviceRotationToOrientation:UIDeviceOrientationPortrait];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [viewTester waitForTimeInterval:0.5];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (void)setUp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    KIFEnableAccessibility();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [self performSetupTearDownWithSelector:@selector(beforeAll)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (void)tearDown&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [self performSetupTearDownWithSelector:@selector(afterAll)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (void)performSetupTearDownWithSelector:(SEL)selector&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    KIFTestCase *testCase = [self testCaseWithSelector:selector];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if ([testCase respondsToSelector:selector]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#pragma clang diagnostic push&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#pragma clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [testCase performSelector:selector];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#pragma clang diagnostic pop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (testCase-&amp;gt;_stoppingException) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [testCase-&amp;gt;_stoppingException raise];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总体是一个，beforeAll调用performSetupTearDownWithSelector然后调用setUp方法。&lt;br&gt;于是自己就很困惑，记得之前看setUp方法是每个case开始都会调用，这跟beforeAll的时机是不吻合的。&lt;/p&gt;
&lt;p&gt;但是如果自己对比你会发现：有两个方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)setUp
+ (void)setUp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由此，自己才明白，原理，类方法，是只运行一一次，在所有的测试执行前执行一次，实例方法是所有的case执行前都会执行一次&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The class method (+ (void)setUp) is only run once during the entire test run.&lt;br&gt;The instance method (- (void)setUp) is the one in the default template; it’s run before every single test. Hopefully, in a hypothetical future version of Xcode, this comment will have been changed to // Put setup code here. This method is called before the invocation of each test method in the class.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21038375/what-is-the-purpose-of-xctestcases-setup-method&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the purpose of XCTestCase’s setUp method?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/61419/ios-ui-testing-with-kif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS UI Testing with KIF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.meituan.com/iOS-UITest-KIF.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于 KIF 的 iOS UI 自动化测试和持续集成&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看关于iOS自动化测试的内容，其中比较常用的有KIF等，然后自己看他的实现时，发现有个beforeAll和AfterAll的方法，因为在当初写case的时候，不能知道所有case开始，和结束的时机，于是就对它比较好奇，看了他的实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="自动化" scheme="http://theewind.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>socket连接池的实现探索</title>
    <link href="http://theewind.github.io/2016/08/19/socket%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%B4%A2/"/>
    <id>http://theewind.github.io/2016/08/19/socket连接池的实现探索/</id>
    <published>2016-08-19T10:27:16.000Z</published>
    <updated>2016-08-23T01:34:35.000Z</updated>
    
    <content type="html">&lt;p&gt;点评长连接的是建立一个TCP连接，然后发送一定策略的心跳检测，保持套接字（TCP+port）socket的连接不断开。&lt;/p&gt;
&lt;p&gt;然后看到携程关于网络优化的[文章]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Native模块是携程的核心业务模块（酒店、机票、火车票、攻略等），Native模块的网络服务主要通过TCP连接实现，而非常见的Restful HTTP API那种HTTP连接，只有少数轻量级服务使用HTTP接口作为补充。&lt;/p&gt;
&lt;p&gt;TCP连接网络服务模块使用了长连接+短连接机制，即有一个长连接池保持一定数目长连接，用于减少每次服务额外的连接，服务完成后会将该连接Socket放回长连接池，继续保持连接状态（一段时间空闲后会被回收）；短连接作为补充，每次服务完成后便会主动关闭连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;点评默认的是一个Socket连接，所有还比较简单，但是如果让实现一个连接池的话，应该怎么做到呢，这个池是如何表示的？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;之前考虑过线程池，只知道有一个线程管理器。其实自己刚开始对这个池的概念有点畏惧，感觉是一个很高大上的内容，但是其实想通了以后，一般来说一个池，就是一个队列吧，可以用vector实现，也可以用array实现，就是把很多线程或者socket都放到一个队列里面，如果队列有回收，销毁，创建等功能。&lt;/p&gt;
&lt;p&gt;简单来说，池的定义，可以通过两个方式来实现，一个是定义两个队列：&lt;/p&gt;
&lt;p&gt;比如TCP连接池的实现，可以定义两个队列，一个是使用中的队列，一个是未使用的队列，每次建立新的连接时，就把这个连接放到使用中去，完成后，就放到未使用中。&lt;/p&gt;
&lt;p&gt;另一个是，一般也是通用的，实现一个manager，负责管理所有的连接，常用的线程池就基本采用这种方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的双队列SOCKET连接池，参考&lt;a href=&quot;http://www.cnblogs.com/HopeGi/archive/2013/04/25/3042238.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/HopeGi/archive/2013/04/25/3042238.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;点评长连接的是建立一个TCP连接，然后发送一定策略的心跳检测，保持套接字（TCP+port）socket的连接不断开。&lt;/p&gt;
&lt;p&gt;然后看到携程关于网络优化的[文章]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Native模块是携程的核心业务模块（酒店、机票、火车票、攻略等），Native模块的网络服务主要通过TCP连接实现，而非常见的Restful HTTP API那种HTTP连接，只有少数轻量级服务使用HTTP接口作为补充。&lt;/p&gt;
&lt;p&gt;TCP连接网络服务模块使用了长连接+短连接机制，即有一个长连接池保持一定数目长连接，用于减少每次服务额外的连接，服务完成后会将该连接Socket放回长连接池，继续保持连接状态（一段时间空闲后会被回收）；短连接作为补充，每次服务完成后便会主动关闭连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;点评默认的是一个Socket连接，所有还比较简单，但是如果让实现一个连接池的话，应该怎么做到呢，这个池是如何表示的？&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="TCP" scheme="http://theewind.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>url encode的问题</title>
    <link href="http://theewind.github.io/2016/08/18/URL_encode%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://theewind.github.io/2016/08/18/URL_encode的问题/</id>
    <published>2016-08-18T11:39:46.000Z</published>
    <updated>2016-08-18T11:42:23.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;URL参数encode的问题&quot;&gt;&lt;a href=&quot;#URL参数encode的问题&quot; class=&quot;headerlink&quot; title=&quot;URL参数encode的问题&quot;&gt;&lt;/a&gt;URL参数encode的问题&lt;/h1&gt;&lt;p&gt;外卖下单时，会先检测用户是否绑定了手机号，如果没有绑定，preview会提示进行绑定，跳转到绑定手机页面，如果绑定成功，就继续回到preview页面。&lt;/p&gt;
&lt;p&gt;这就需要将preview的URLAction传递给绑定手机页面，它再进行一个透传。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;正确流程&quot;&gt;&lt;a href=&quot;#正确流程&quot; class=&quot;headerlink&quot; title=&quot;正确流程&quot;&gt;&lt;/a&gt;正确流程&lt;/h2&gt;&lt;p&gt;这个过程就会有encode的问题，因为原则上，对URL里面的每一参数都需要记性encode，如果不含有特殊字符，encode之后结果不变，所以我们这里需要对参数&lt;br&gt;trolleyarr进行encode，因为他是一个类似1294711,1,0#4639,4688|1294710,2,0#4643,4647,4690|1294901,1,0这样的字符串，因此encode的结果是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;trolleyarr=1294711,1,0#4639,4688|1294710,2,0#4643,4647,4690|1294901,1,0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;encode之后：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;trolleyarr=1294711%2C1%2C0%234639%2C4688%7C1294710%2C2%2C0%234643%2C4647%2C4690%7C1294901%2C1%2C0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后trolleyarr及lat，lng，shopid等组成一个重定向的URL，即redir，需要再对redir进行一次encode&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redir=&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dianping://takeawayorder?trolleyarr=1294711%2C1%2C0%234639%2C4688%7C1294710%2C2%2C0%234643%2C4647%2C4690%7C1294901%2C1%2C0%0A&amp;amp;initiallat=31.214027&amp;amp;initiallng=121.423747&amp;amp;shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=b15f2df1-a008-4e96-af45-5eaa3efe0110&amp;amp;phoneBinded=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;encode之后：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redir=&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dianping%3A%2F%2Ftakeawayorder%3Ftrolleyarr%3D1294711%252C1%252C0%25234639%252C4688%257C1294710%252C2%252C0%25234643%252C4647%252C4690%257C1294901%252C1%252C0%250A%26initiallat%3D31.214027%26initiallng%3D121.423747%26shopid%3D2724613%26mtwmpoiid%3D90939%26mdcid%3D0%26queryid%3Db15f2df1-a008-4e96-af45-5eaa3efe0110%26phoneBinded%3D1%0A&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而绑定手机号页面的整个URL是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSString * const TABindPhoneURL = @&amp;quot;http://m.dianping.com/account/getBindPageAfterLogin?redir=%@&amp;amp;necessary=true&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;redir作为其中的一个参数，需要继续进行一次encode，所以绑定页面的url为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;url = &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://m.dianping.com/account/getBindPageAfterLogin?redir=dianping%3A%2F%2Ftakeawayorder%3Ftrolleyarr%3D1294711%252C1%252C0%25234639%252C4688%257C1294710%252C2%252C0%25234643%252C4647%252C4690%257C1294901%252C1%252C0%250A%26initiallat%3D31.214027%26initiallng%3D121.423747%26shopid%3D2724613%26mtwmpoiid%3D90939%26mdcid%3D0%26queryid%3Db15f2df1-a008-4e96-af45-5eaa3efe0110%26phoneBinded%3D1%0A&amp;amp;necessary=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;encode之后：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url = &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http%3A%2F%2Fm.dianping.com%2Faccount%2FgetBindPageAfterLogin%3Fredir%3Ddianping%253A%252F%252Ftakeawayorder%253Ftrolleyarr%253D1294711%25252C1%25252C0%2525234639%25252C4688%25257C1294710%25252C2%25252C0%2525234643%25252C4647%25252C4690%25257C1294901%25252C1%25252C0%25250A%2526initiallat%253D31.214027%2526initiallng%253D121.423747%2526shopid%253D2724613%2526mtwmpoiid%253D90939%2526mdcid%253D0%2526queryid%253Db15f2df1-a008-4e96-af45-5eaa3efe0110%2526phoneBinded%253D1%250A%26necessary%3Dtrue&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;dianping://takeawayorder?trolleyarr=1294711,1,0#4639,4688|1294710,2,0#4643,4647,4690|1294901,1,0&amp;amp;initiallat=31.214027&amp;amp;initiallng=121.423747&amp;amp;shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=b15f2df1-a008-4e96-af45-5eaa3efe0110&amp;amp;phoneBinded=1&lt;/p&gt;
&lt;p&gt;到这里就告一段落，我们只需要通过：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dianping://web?url=%@ 去打开绑定手机页面就可以了。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;遇到问题&quot;&gt;&lt;a href=&quot;#遇到问题&quot; class=&quot;headerlink&quot; title=&quot;遇到问题&quot;&gt;&lt;/a&gt;遇到问题&lt;/h2&gt;&lt;p&gt;####iOS 坑一&lt;br&gt;iOS之前因为没有对trolleyarr的值进行decode，所以会出现绑定手机号之后，preview页面提示&lt;code&gt;“缺少必要”&lt;/code&gt;的错误提示。这是因为服务端对传入的redir进行decode，这样redir就会变成类似：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dianping://takeawayorder?trolleyarr=1294711,1,0#4639,4688|1294710,2,0#4643,4647,4690|1294901,1,0&amp;amp;initiallat=31.214027&amp;amp;initiallng=121.423747&amp;amp;shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=b15f2df1-a008-4e96-af45-5eaa3efe0110&amp;amp;phoneBinded=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后再把这样的url通过点评的openURL的方式打开，就会出现解析错误问题：&lt;br&gt;因为框架会对这样的url进行解析，其中NVURLAction的一部分代码是&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (id)initWithURL:(NSURL *)url &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	if (self = [super init]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _url = url;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSDictionary *dic = [url parseQuery];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _params = [NSMutableDictionary dictionary];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for (NSString *key in [dic allKeys]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            id value = [dic objectForKey:key];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            [_params setObject:value forKey:[key lowercaseString]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSURL的parseQuery方法如下：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (NSDictionary *)parseQuery &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSString *query = [self query];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSMutableDictionary *dict = [[NSMutableDictionary alloc] initWithCapacity:6];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSArray *pairs = [query componentsSeparatedByString:@&amp;quot;&amp;amp;&amp;quot;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for (NSString *pair in pairs) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSArray *elements = [pair componentsSeparatedByString:@&amp;quot;=&amp;quot;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		if ([elements count] &amp;lt;= 1) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			continue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSString *key = [[elements objectAtIndex:0] stringByRemovingPercentEncoding];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        CFStringRef originValue = CFURLCreateStringByReplacingPercentEscapes(NULL, (CFStringRef)([elements objectAtIndex:1]),  CFSTR(&amp;quot;&amp;quot;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSString *oriValue = (__bridge NSString*)originValue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSAssert(oriValue != nil, @&amp;quot;url is invalid&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (oriValue) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            [dict setObject:oriValue forKey:key];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        CFRelease(originValue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return dict;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;NSURL的query方法，NSString *query = [self query]会直接截取&lt;code&gt;#&lt;/code&gt;符号，因为#在url是一个合法字符&lt;/strong&gt;。所以就出现了URLAction的url实际变为了    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dianping://takeawayorder?trolleyarr=1294711,1,0#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把这样的url丢给preview页面，结果就是上面的各种搞错，缺少各种必要参数。&lt;/p&gt;
&lt;p&gt;#####如何解决这个问题？&lt;br&gt;原则上，对trolleyarr参数进行一次decode就应该可以的。这样返会到preview页面的url就是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dianping://takeawayorder?trolleyarr=1294711%2C1%2C0%234639%2C4688%7C1294710%2C2%2C0%234643%2C4647%2C4690%7C1294901%2C1%2C0%0A&amp;amp;initiallat=31.214027&amp;amp;initiallng=121.423747&amp;amp;shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=b15f2df1-a008-4e96-af45-5eaa3efe0110&amp;amp;phoneBinded=1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端自己对trolleyarr进行一次decode，获取正确的内容就可以了。满心欢喜，以为就此可以解决问题的，但是，但是。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实外卖不需要再进行decode了，因为从NVURLAction取数据的时候，比如getString等，就是已经decode过的，因为&lt;code&gt;parseQuery&lt;/code&gt;方法
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;####坑二&lt;br&gt;没有想到，服务端会对传入的redir进行&lt;code&gt;两次decode&lt;/code&gt;,注意是两次，&lt;strong&gt;(合理的操作应该是一次就可以了)&lt;/strong&gt;，导致上述的trolleyarr又被冲洗decode了，变成了类似&lt;em&gt;1294711,1,0#4639,4688|1294710,2,0#4643,4647,4690|1294901,1,0&lt;/em&gt;的一坨东西，客户端继续出现问题。但神奇是，android竟然是正确的。他是怎么做到的呢。&lt;br&gt;可以看到android的URL是这样的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://m.51ping.com/account/getBindPageAfterLogin?redir=dianping%3A%2F%2Ftakeawayorder%3Fshopid%3D2724613%26mtwmpoiid%3D90939%26mdcid%3D0%26queryid%3Dde133485-6bea-4a5e-a2fc-8532463af336%26initiallat%3D31.21756%26initiallng%3D121.41558%26carrier%3Dnull%26v%3D1%26cartcontents%3D%25255B%25257B%252522curPrice%252522%25253A1%25252C%252522selectedNum%252522%25253A1%25252C%252522name%252522%25253A%252522%252522%25252C%252522cartcontents%252522%25253A%2525221294901%25252C1%25252C0%252522%25257D%25252C%25257B%252522curPrice%252522%25253A10%25252C%252522selectedNum%252522%25253A1%25252C%252522name%252522%25253A%252522%252522%25252C%252522cartcontents%252522%25253A%2525221294711%25252C1%25252C0%2525234639%25252C4688%252522%25257D%25252C%25257B%252522curPrice%252522%25253A2.2%25252C%252522selectedNum%252522%25253A2%25252C%252522name%252522%25253A%252522%252522%25252C%252522cartcontents%252522%25253A%2525221294710%25252C2%25252C0%2525234643%25252C4647%25252C4690%252522%25257D%25255D&amp;amp;necessary=true&amp;amp;product=dpapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;不懂，decode一次：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://m.51ping.com/account/getBindPageAfterLogin?redir=dianping://takeawayorder?shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=de133485-6bea-4a5e-a2fc-8532463af336&amp;amp;initiallat=31.21756&amp;amp;initiallng=121.41558&amp;amp;carrier=null&amp;amp;v=1&amp;amp;cartcontents=%255B%257B%2522curPrice%2522%253A1%252C%2522selectedNum%2522%253A1%252C%2522name%2522%253A%2522%2522%252C%2522cartcontents%2522%253A%25221294901%252C1%252C0%2522%257D%252C%257B%2522curPrice%2522%253A10%252C%2522selectedNum%2522%253A1%252C%2522name%2522%253A%2522%2522%252C%2522cartcontents%2522%253A%25221294711%252C1%252C0%25234639%252C4688%2522%257D%252C%257B%2522curPrice%2522%253A2.2%252C%2522selectedNum%2522%253A2%252C%2522name%2522%253A%2522%2522%252C%2522cartcontents%2522%253A%25221294710%252C2%252C0%25234643%252C4647%252C4690%2522%257D%255D&amp;amp;necessary=true&amp;amp;product=dpapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;还不懂，decode两次：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://m.51ping.com/account/getBindPageAfterLogin?redir=dianping://takeawayorder?shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=de133485-6bea-4a5e-a2fc-8532463af336&amp;amp;initiallat=31.21756&amp;amp;initiallng=121.41558&amp;amp;carrier=null&amp;amp;v=1&amp;amp;cartcontents=%5B%7B%22curPrice%22%3A1%2C%22selectedNum%22%3A1%2C%22name%22%3A%22%22%2C%22cartcontents%22%3A%221294901%2C1%2C0%22%7D%2C%7B%22curPrice%22%3A10%2C%22selectedNum%22%3A1%2C%22name%22%3A%22%22%2C%22cartcontents%22%3A%221294711%2C1%2C0%234639%2C4688%22%7D%2C%7B%22curPrice%22%3A2.2%2C%22selectedNum%22%3A2%2C%22name%22%3A%22%22%2C%22cartcontents%22%3A%221294710%2C2%2C0%234643%2C4647%2C4690%22%7D%5D&amp;amp;necessary=true&amp;amp;product=dpapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;仍不懂，decode三次：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://m.51ping.com/account/getBindPageAfterLogin?redir=dianping://takeawayorder?shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=de133485-6bea-4a5e-a2fc-8532463af336&amp;amp;initiallat=31.21756&amp;amp;initiallng=121.41558&amp;amp;carrier=null&amp;amp;v=1&amp;amp;cartcontents=[&amp;#123;&amp;quot;curPrice&amp;quot;:1,&amp;quot;selectedNum&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;cartcontents&amp;quot;:&amp;quot;1294901,1,0&amp;quot;&amp;#125;,&amp;#123;&amp;quot;curPrice&amp;quot;:10,&amp;quot;selectedNum&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;cartcontents&amp;quot;:&amp;quot;1294711,1,0#4639,4688&amp;quot;&amp;#125;,&amp;#123;&amp;quot;curPrice&amp;quot;:2.2,&amp;quot;selectedNum&amp;quot;:2,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;cartcontents&amp;quot;:&amp;quot;1294710,2,0#4643,4647,4690&amp;quot;&amp;#125;]&amp;amp;necessary=true&amp;amp;product=dpapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;原来他们对购物车的数据进行了两次decode，再加上redir，总共decode了三次，刚好服务端decode两次，自己再decode一次，妥妥的，完美/(ㄒoㄒ)/~~&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再加上对dianping://web?url=&lt;a href=&quot;http://m.51&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://m.51&lt;/a&gt;………. 进行的一次decode，总共是四次，而iOS只有三次，所以iOS肯定有问题。闪开，让我哭一会~~~&lt;/p&gt;
&lt;p&gt;####其它坑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么之前没有遇到这样的问题呢，一种说法是，之前的URL里面都没有&lt;code&gt;#&lt;/code&gt;符号，因为没有选规格菜品。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么iOS会遇到userid==0，然后反复跳转的情况呢，因为H5从cookie中取到的newtoken为空，所以iOS有添加了一个newtoken=!的占位符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在调试的过程中，会发现 po NVURLAction的时候，发现encode过的url会被decode，这是因为po object实际上是调用object的description方法，而NVURLAction重写了description方法，部分代码如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; else if ([value isKindOfClass:[NSString class]]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [paramsDesc addObject:[NSString stringWithFormat:@&amp;quot;%@=%@&amp;quot;, [key lowercaseString], [value stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]]];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印的时候，输出decode的内容，所以如果URL有过encode，实际po的结果跟真实的内容是不一样的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NVWebViewController取出url的时候，会得到decode后的内容，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[urlAction stringForKey:@”url”]; 而stringForKey是从_params里面取的。参上最上面的&lt;code&gt;parseQuery&lt;/code&gt;方法，他会对url=之后的内容进行decode。这就是对应我们上面的最后一次encode了，即iOS的第三次，android的第四次，decode后，得到打开h5的URL，如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://m.dianping.com/account/getBindPageAfterLogin?redir=dianping%3A%2F%2Ftakeawayorder%3Ftrolleyarr%3D1294711%252C1%252C0%25234639%252C4688%257C1294710%252C2%252C0%25234643%252C4647%252C4690%257C1294901%252C1%252C0%26initiallat%3D31.214027%26initiallng%3D121.423747%26shopid%3D2724613%26mtwmpoiid%3D90939%26mdcid%3D0%26queryid%3Db15f2df1-a008-4e96-af45-5eaa3efe0110%26phoneBinded%3D1&amp;amp;necessary=true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;urlAction的url实际是下面，但是通过po出来查看，就是错误的：&lt;br&gt;_url    NSURL &lt;em&gt;    @”dianping://takeawayorder?trolleyarr=1294895%2C1%2C0%7C1294714%2C2%2C0%234489%7C1314261%2C1%2C0%7C1294711%2C1%2C0%234639%2C4688&amp;amp;initiallat=31.214027&amp;amp;initiallng=121.423747&amp;amp;shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=fc2ff9f9-ff00-4c78-ab95-04d278774ee4&amp;amp;phoneBinded=1”    0x00007fb02486a7d0&lt;br&gt;_clients    __NSCFString &lt;/em&gt;    @”dianping://takeawayorder?trolleyarr=1294895%2C1%2C0%7C1294714%2C2%2C0%234489%7C1314261%2C1%2C0%7C1294711%2C1%2C0%234639%2C4688&amp;amp;initiallat=31.214027&amp;amp;initiallng=121.423747&amp;amp;shopid=2724613&amp;amp;mtwmpoiid=90939&amp;amp;mdcid=0&amp;amp;queryid=fc2ff9f9-ff00-4c78-ab95-04d278774ee4&amp;amp;phoneBinded=1”    0x00007fb024891ea0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(lldb) po urlAction&lt;br&gt;dianping://takeawayorder?shopid=2724613&amp;amp;trolleyarr=1294895,1,0%7C1294714,2,0%234489%7C1314261,1,0%7C1294711,1,0%234639,4688&amp;amp;mtwmpoiid=90939&amp;amp;queryid=fc2ff9f9-ff00-4c78-ab95-04d278774ee4&amp;amp;initiallat=31.214027&amp;amp;mdcid=0&amp;amp;initiallng=121.423747&amp;amp;phonebinded=1&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;URL参数encode的问题&quot;&gt;&lt;a href=&quot;#URL参数encode的问题&quot; class=&quot;headerlink&quot; title=&quot;URL参数encode的问题&quot;&gt;&lt;/a&gt;URL参数encode的问题&lt;/h1&gt;&lt;p&gt;外卖下单时，会先检测用户是否绑定了手机号，如果没有绑定，preview会提示进行绑定，跳转到绑定手机页面，如果绑定成功，就继续回到preview页面。&lt;/p&gt;
&lt;p&gt;这就需要将preview的URLAction传递给绑定手机页面，它再进行一个透传。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
      <category term="URL" scheme="http://theewind.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>iOS代码编译速度优化</title>
    <link href="http://theewind.github.io/2016/08/11/iOS%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
    <id>http://theewind.github.io/2016/08/11/iOS代码编译速度优化/</id>
    <published>2016-08-11T02:26:29.000Z</published>
    <updated>2016-08-11T09:28:44.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;cleaner源码编译速度优化方案&quot;&gt;&lt;a href=&quot;#cleaner源码编译速度优化方案&quot; class=&quot;headerlink&quot; title=&quot;cleaner源码编译速度优化方案&quot;&gt;&lt;/a&gt;cleaner源码编译速度优化方案&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;参考最新的cleaner，主要是清理头文件之间的依赖，尽量都采取直接依赖，而不是通过间接依赖，比A依赖B，B依赖C。而A如果依赖C的时候，最好是直接通过采用A依赖C的操作，而不是A-&amp;gt;B-&amp;gt;C的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;cleaner要求，在所有的.h文件中，基本都采用@class，@protocol的形式添加声明，然后在.m文件中添加#import的操作，这样是可以最小限度的减少依赖环节，但是也是有弊端的：&lt;/p&gt;
&lt;p&gt;比如常用的model嵌套，如果采用@class的声明的方式，在vm或者v中使用model的时候，都要将他的子model的头文件也添加上，还是比较繁琐的。但是采用这样的操作，可以最大限度的降低头文件依赖和编译时间，所以平台也是在大力推广。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同时为了解决各个模块混乱依赖的问题，公司也要求将prefix.h文件给去掉，但是个人感觉还是可以添加一最常用的，比如 UIKit，NSFoundation等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pch的，苹果在xcode6中已经不建议使用了，原因可能是，大家总是把一些头文件都放到prefix中，就导致各个头文件都会包含所有prefix中所包含的，每个文件依赖增多，编译时间也会增加。参考&lt;a href=&quot;http://qualitycoding.org/objective-c-code-smells/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Smells in Objective-C&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;其他优化&quot;&gt;&lt;a href=&quot;#其他优化&quot; class=&quot;headerlink&quot; title=&quot;其他优化&quot;&gt;&lt;/a&gt;其他优化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;将Debug Information Format改为DWARF&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在工程对应Target的Build Settings中，找到Debug Information Format这一项，将Debug时的DWARF with dSYM file改为DWARF。&lt;/p&gt;
&lt;p&gt;这一项设置的是是否将调试信息加入到可执行文件中，改为DWARF后，如果程序崩溃，将无法输出崩溃位置对应的函数堆栈，但由于Debug模式下可以在XCode中查看调试信息，所以改为DWARF影响并不大。这一项更改完之后，可以大幅提升编译速度。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将Build Active Architecture Only改为Yes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在工程对应Target的Build Settings中，找到Build Active Architecture Only这一项，将Debug时的No改为Yes。&lt;/p&gt;
&lt;p&gt;这一项设置的是是否仅编译当前架构的版本，如果为No，会编译所有架构的版本。需要注意的是，此选项在Release模式下必须为Yes，否则发布的ipa在部分设备上将不能运行。这一项更改完之后，可以显著提高编译速度。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enable Modules (C and Objective-C) 改为YES&lt;br&gt;打开Modules之后，可以采用@improt的形式导入依赖，但是这个功能主要是对系统的framework和library启作用，而对于我们常用的cocoapod继承的库是不生效的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t compile your project code or use static libraries compiled with -O4 since it tells Clang to enable Link Time Optimizations (LTO) making the linking stage much slower. Use -O3 at most.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;延伸阅读&quot;&gt;&lt;a href=&quot;#延伸阅读&quot; class=&quot;headerlink&quot; title=&quot;延伸阅读&quot;&gt;&lt;/a&gt;延伸阅读&lt;/h2&gt;&lt;p&gt;关于DWARF与dSYM&lt;/p&gt;
&lt;p&gt;DWARF is a debugging file format used by many compilers and debuggers to support source level debugging. It addresses the requirements of a number of procedural languages, such as C, C++, and Fortran, and is designed to be extensible to other languages. DWARF is architecture independent and applicable to any processor or operating system. It is widely used on Unix, Linux and other operating systems, as well as in stand-alone environments.&lt;/p&gt;
&lt;p&gt;DWARF与dSYM的关系是，DWARF是文件格式，而dSYM往往指一个单独的文件。在Xcode中如果不做特殊制定，debug information是被保存在executable文件中，可以使用dsymutil从executable中提取dSYM文件。&lt;/p&gt;
&lt;p&gt;dsymutil&lt;/p&gt;
&lt;p&gt;dsymutil is a tool to manipulate archived DWARF debug symbol files. 使用dsymutil可以对dSYM文件进行如下操作：从exe_path中提取成dSYM文件、将executable或者object文件中的symbol table dump出来、更新dSYM文件以让dSYM文件包含最新的accelerator tables and other DWARF optimizations。&lt;/p&gt;
&lt;p&gt;Debug Info Format&lt;/p&gt;
&lt;p&gt;在Xcode中可以选择DWARF和DWARF with dSYM file，推荐的设置是Debug用DWARF；Release使用DWARF with dSYM file。&lt;/p&gt;
&lt;p&gt;使用dSYM file&lt;/p&gt;
&lt;p&gt;如果我们有若干的build，有若干dSYM文件，而名字又有点乱，想知道哪个dSYM跟哪个build匹配，从而可以使用它们呢？办法就是查看UUID。&lt;/p&gt;
&lt;p&gt;下面就是看怎么加载dSYM file了&lt;/p&gt;
&lt;p&gt;关于dSYM和debug，这里有更多的信息。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/whyandinside/archive/2013/04/28/3048366.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/whyandinside/archive/2013/04/28/3048366.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tech.zalando.de/blog/speeding-up-xcode-builds/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Speeding up Xcode Builds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://useyourloaf.com/blog/modules-and-precompiled-headers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modules and Precompiled Headers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://qualitycoding.org/objective-c-code-smells/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Smells in Objective-C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stoneofarc.wordpress.com/2013/06/25/introduction-to-objective-c-modules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Objective-C Modules&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://labs.spotify.com/2013/11/04/shaving-off-time-from-the-ios-edit-build-test-cycle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shaving off 50% waiting time from the iOS Edit-Build-Test cycle&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;cleaner源码编译速度优化方案&quot;&gt;&lt;a href=&quot;#cleaner源码编译速度优化方案&quot; class=&quot;headerlink&quot; title=&quot;cleaner源码编译速度优化方案&quot;&gt;&lt;/a&gt;cleaner源码编译速度优化方案&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;参考最新的cleaner，主要是清理头文件之间的依赖，尽量都采取直接依赖，而不是通过间接依赖，比A依赖B，B依赖C。而A如果依赖C的时候，最好是直接通过采用A依赖C的操作，而不是A-&amp;gt;B-&amp;gt;C的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;cleaner要求，在所有的.h文件中，基本都采用@class，@protocol的形式添加声明，然后在.m文件中添加#import的操作，这样是可以最小限度的减少依赖环节，但是也是有弊端的：&lt;/p&gt;
&lt;p&gt;比如常用的model嵌套，如果采用@class的声明的方式，在vm或者v中使用model的时候，都要将他的子model的头文件也添加上，还是比较繁琐的。但是采用这样的操作，可以最大限度的降低头文件依赖和编译时间，所以平台也是在大力推广。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同时为了解决各个模块混乱依赖的问题，公司也要求将prefix.h文件给去掉，但是个人感觉还是可以添加一最常用的，比如 UIKit，NSFoundation等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pch的，苹果在xcode6中已经不建议使用了，原因可能是，大家总是把一些头文件都放到prefix中，就导致各个头文件都会包含所有prefix中所包含的，每个文件依赖增多，编译时间也会增加。参考&lt;a href=&quot;http://qualitycoding.org/objective-c-code-smells/&quot;&gt;Code Smells in Objective-C&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>carthage初入</title>
    <link href="http://theewind.github.io/2016/08/04/carthage%E5%88%9D%E5%85%A5/"/>
    <id>http://theewind.github.io/2016/08/04/carthage初入/</id>
    <published>2016-08-04T07:11:34.000Z</published>
    <updated>2016-08-11T04:22:15.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;carthage是什么&quot;&gt;&lt;a href=&quot;#carthage是什么&quot; class=&quot;headerlink&quot; title=&quot;carthage是什么&quot;&gt;&lt;/a&gt;carthage是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Carthage&lt;br&gt;英 [ˈkɑ:θidʒ]  美 [ˈkɑrθɪdʒ]&lt;br&gt;n.&lt;br&gt;迦太基（非洲北部，今突尼斯的奴隶制城邦，腓尼基人所建，公元146年被罗马帝国所灭，见Punic Wars）&lt;br&gt;网络&lt;br&gt;迦太基古城;  迦太基遗址;  迦太基城&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;carthage是一个iOS的包依赖管理工具，相对于CocoaPods，他的目标是去中心化的依赖管理器。&lt;br&gt;它没有总项目的列表，这能够减少维护工作并且避免任何中心化带来的问题（如中央服务器宕机）。不过，这样也有一些缺点，就是项目的发现将更困难，用户将依赖于Github的趋势页面或者类似的代码库来寻找项目。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;carthage和-CocoaPods&quot;&gt;&lt;a href=&quot;#carthage和-CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;carthage和 CocoaPods&quot;&gt;&lt;/a&gt;carthage和 CocoaPods&lt;/h1&gt;&lt;p&gt;CocoaPods默认会自动创建并更新你的应用程序和所有依赖的Xcode workspace。Carthage使用xcodebuild来编译框架的二进制文件，但如何集成它们将交由用户自己判断。CocoaPods的方法更易于使用，但Carthage更灵活并且是非侵入性的。&lt;/p&gt;
&lt;p&gt;CocoaPods的目标在它的README文件描述如下：&lt;/p&gt;
&lt;p&gt;…为提高第三方开源库的可见性和参与度，创建一个更中心化的生态系统。&lt;/p&gt;
&lt;p&gt;与之对照，Carthage创建的是去中心化的依赖管理器。它没有总项目的列表，这能够减少维护工作并且避免任何中心化带来的问题（如中央服务器宕机）。不过，这样也有一些缺点，就是项目的发现将更困难，用户将依赖于Github的趋势页面或者类似的代码库来寻找项目。&lt;/p&gt;
&lt;p&gt;CocoaPods项目同时还必须包含一个podspec文件，里面是项目的一些元数据，以及确定项目的编译方式。Carthage使用xcodebuild来编译依赖，而不是将他们集成进一个workspace，因此无需类似的设定文件。不过依赖需要包含自己的Xcode工程文件来描述如何编译。&lt;/p&gt;
&lt;p&gt;最后，我们创建Carthage的原因是想要一种尽可能简单的工具——一个只关心本职工作的依赖管理器，而不是取代部分Xcode的功能，或者需要 让框架作者做一些额外的工作。CocoaPods提供的一些特性很棒，但由于附加的复杂性，它们将不会被包含在Carthage当中。&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;p&gt;1 安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2 创建cartfile文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3 添加依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#Require version 2.5 or later&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;github &amp;quot;ReactiveCocoa/ReactiveCocoa&amp;quot; &amp;gt;= 2.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#Require version 1.x&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;github &amp;quot;Mantle/Mantle&amp;quot; ~&amp;gt; 1.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4 执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5 添加framework到project中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在Build目录下会生成对应的iOS， Mac， tvOS，watchOS四个平台的各自framework集合，以及他们的dSYM文件，后续的添加到工程中使用即可。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6 支持版本iOS8&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;carthage是什么&quot;&gt;&lt;a href=&quot;#carthage是什么&quot; class=&quot;headerlink&quot; title=&quot;carthage是什么&quot;&gt;&lt;/a&gt;carthage是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Carthage&lt;br&gt;英 [ˈkɑ:θidʒ]  美 [ˈkɑrθɪdʒ]&lt;br&gt;n.&lt;br&gt;迦太基（非洲北部，今突尼斯的奴隶制城邦，腓尼基人所建，公元146年被罗马帝国所灭，见Punic Wars）&lt;br&gt;网络&lt;br&gt;迦太基古城;  迦太基遗址;  迦太基城&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;carthage是一个iOS的包依赖管理工具，相对于CocoaPods，他的目标是去中心化的依赖管理器。&lt;br&gt;它没有总项目的列表，这能够减少维护工作并且避免任何中心化带来的问题（如中央服务器宕机）。不过，这样也有一些缺点，就是项目的发现将更困难，用户将依赖于Github的趋势页面或者类似的代码库来寻找项目。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dispatch_after使用注意</title>
    <link href="http://theewind.github.io/2016/08/03/dispatch-after%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
    <id>http://theewind.github.io/2016/08/03/dispatch-after使用注意/</id>
    <published>2016-08-03T01:42:50.000Z</published>
    <updated>2016-08-03T02:03:18.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;p&gt;开发中，经常需要dispatch_after进行延迟处理，dispatch_after能让我们添加进队列的任务延时执行，该函数并不是在指定时间后执行处理，而只是在指定时间追加处理到dispatch_queue该方法的第一个参数是time，第二个参数是dispatch_queue，第三个参数是要执行的block。dispatch_time_t有两种形式的构造方式，第一种相对时间：DISPATCH_TIME_NOW表示现在，NSEC_PER_SEC表示的是秒数，它还提供了NSEC_PER_MSEC表示毫秒。&lt;br&gt;第二种是绝对时间，通过dispatch_walltime函数来获取，dispatch_walltime需要使用一个timespec的结构体来得到dispatch_time_t。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：不是一定在给定时间后执行相关的任务，而是在一定时间后，将执行的操作加入到队列中，然后队列里面再分配执行的时间，所以即使给了个 &lt;code&gt;0秒&lt;/code&gt; 也不会立即执行，而是会追加一个Runloop的时间，一般是1/60s&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试代码如下&quot;&gt;&lt;a href=&quot;#测试代码如下&quot; class=&quot;headerlink&quot; title=&quot;测试代码如下&quot;&gt;&lt;/a&gt;测试代码如下&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        NSLog(@&amp;quot;in after&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSLog(@&amp;quot;viewDidLoad&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;打印的顺序是这样：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-08-03 09:41:06.237 testDispatchAfter[29364:9056216] viewDidLoad&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-08-03 09:41:06.244 testDispatchAfter[29364:9056216] in after&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;那有什么问题呢？&quot;&gt;&lt;a href=&quot;#那有什么问题呢？&quot; class=&quot;headerlink&quot; title=&quot;那有什么问题呢？&quot;&gt;&lt;/a&gt;那有什么问题呢？&lt;/h2&gt;&lt;p&gt;所以如果我们在使用dispatch_after的时候，比如有时候需要判断条件，特别是有些针对版本的判断，比如&amp;lt;= iOS7上，需要进行一定的延迟处理：&lt;br&gt;比如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;NSString *string = @&amp;quot;测试&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSString *afterString = [@&amp;quot;name in after&amp;quot; stringByAppendingString:string];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%@&amp;quot;, afterString);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, string);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;string = nil;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然测试的过程中，没有crash。但是我们在代码逻辑里还是要避免这样的操作，&lt;strong&gt;因为是有可能，在dispatch_after的block执行之前，释放了某些变量，导致block出错的。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;p&gt;开发中，经常需要dispatch_after进行延迟处理，dispatch_after能让我们添加进队列的任务延时执行，该函数并不是在指定时
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>onExit分析</title>
    <link href="http://theewind.github.io/2016/07/25/onExit%E5%88%86%E6%9E%90/"/>
    <id>http://theewind.github.io/2016/07/25/onExit分析/</id>
    <published>2016-07-25T04:01:47.000Z</published>
    <updated>2016-07-25T05:25:55.000Z</updated>
    
    <content type="html">&lt;p&gt;defer引发的OnExit&lt;/p&gt;
&lt;p&gt;在swift中，是经常用到defer的，在作用域结束的时候，执行defer的命令，但是在Objective C中是无法使用的，不过有个宏 &lt;code&gt;onExit&lt;/code&gt;可以达到这样的效果，比如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;if (1) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	@onExit &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 		NSLog(@&amp;quot;ffffff&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就会在if作用域之后打印fffffff，那么他是怎么实现的呢，主要是用到了 &lt;code&gt;__attribute__&lt;/code&gt;变量属性，具体的onExit的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#ifndef onExit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define onExit \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ext_keywordify \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;__strong ext_cleanupBlock_t metamacro_concat(ext_exitBlock_, __LINE__) __attribute__((cleanup(ext_executeCleanupBlock), unused)) = ^&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#endif&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;ext_keywordify &lt;/li&gt;
&lt;li&gt;ext_clearupBlock_t&lt;/li&gt;
&lt;li&gt;metamacro_concat&lt;/li&gt;
&lt;li&gt;clearup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中ext_keywordify 在debug下就是一个@autoreleasepool, release下是@try..cache…finally&lt;br&gt;这里强制要求添加一个@，否则编译器会报错&lt;/p&gt;
&lt;p&gt;ext_clearupBlock_t 是一个typedef void (^ext_cleanupBlock_t)();&lt;/p&gt;
&lt;p&gt;metamacro_concat(A, B) 就是 metamacro_concat(A, B) A ## B ，将AB连接起来，例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;metamacro_concat(ext_exitBlock_, __LINE__)
拼接为：ext_exitBlock_19
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;clearup &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://draveness.me/defer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://draveness.me/defer/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;defer引发的OnExit&lt;/p&gt;
&lt;p&gt;在swift中，是经常用到defer的，在作用域结束的时候，执行defer的命令，但是在Objective C中是无法使用的，不过有个宏 &lt;code&gt;onExit&lt;/code&gt;可以达到这样的效果，比如&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ios7下UIScrollView和滑动返回</title>
    <link href="http://theewind.github.io/2016/07/22/ios7%E4%B8%8BUIScrollView%E5%92%8C%E6%BB%91%E5%8A%A8%E8%BF%94%E5%9B%9E/"/>
    <id>http://theewind.github.io/2016/07/22/ios7下UIScrollView和滑动返回/</id>
    <published>2016-07-22T06:21:40.000Z</published>
    <updated>2016-07-22T07:10:51.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;之前因为某些历史原因，外卖基本禁止了所有的滑动返回手势，这次产品过来说需要开发一些正常流程的返回操作，于是在修复菜单页的过程中遇到了一些问题。菜单页可以说是整个外卖最复杂的页面，如下图&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20160722-2@2x.png&quot; alt=&quot;菜单页&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中有p1,p2,p3,p4,p5，整个菜单页的结构是：&lt;br&gt;P5 最底层，UIScrollView&lt;br&gt;P4 标题，UIView&lt;br&gt;P3 内容, UIView&lt;br&gt;P2 tab, UIScrollView&lt;br&gt;P1 page, UIScrollView&lt;/p&gt;
&lt;p&gt;层次是：p1 + p2 –&amp;gt; p3 + p4 –&amp;gt; p5&lt;/p&gt;
&lt;p&gt;这样就有了问题，左右滑P1，其实是UIScrollView的页面切换，分别显示，菜单，点评和商家详情。&lt;br&gt;&lt;code&gt;在整个P3区域进行滑动返回操作，是不起效果的。&lt;/code&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;p&gt;查阅资料发现，滑动返回事实上也是由存在已久的UIPanGestureRecognizer来识别并响应的，它直接与UINavigationController的view（方便起见，下文中以UINavigationController.view表示）进行绑定，因此上图中存在如下关系：&lt;/p&gt;
&lt;p&gt;UIPanGestureRecognizer  ——bind——  UIScrollView&lt;/p&gt;
&lt;p&gt;UIScreenEdgePanGestureRecognizer ——bind——  UINavigationController.view&lt;/p&gt;
&lt;p&gt;滑动返回无法触发，说明UIScreenEdgePanGestureRecognizer并没有接收到手势事件&lt;/p&gt;
&lt;p&gt;UINavigationController.view —&amp;gt;  UIViewController.view —&amp;gt;  UIScrollView —&amp;gt;  Screen and User’s finger&lt;/p&gt;
&lt;p&gt;即UIScrollView的panGestureRecognizer先接收到了手势事件，直接就地处理而没有往下传递。&lt;/p&gt;
&lt;p&gt;实际上这就是两个panGestureRecognizer共存的问题。&lt;/p&gt;
&lt;p&gt;然后具体的解决方案就是：&lt;br&gt;在P1的继承自子UIScrollView里面添加如下方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if ([gestureRecognizer isKindOfClass:[UIPanGestureRecognizer class]]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;amp;&amp;amp; [otherGestureRecognizer isKindOfClass:[UIScreenEdgePanGestureRecognizer class]]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return YES;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return NO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;貌似解决问题，但是自己看会有相应UIScrollView的操作，如&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20160722-3@2x.png&quot; alt=&quot;下图展示&quot;&gt;&lt;br&gt;看到问题了吧，在点评页面，滑动返回的时候居然一边返回，一边切换到菜单页部分，这有点不能忍，然后继续分析，是因为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;只是做到了将手势事件往下传递，而没有关闭掉在边缘时UIScrollView对事件的响应。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;事实上，对UIGestureRecognizer来说，它们对事件的接收顺序和对事件的响应是可以分开设置的，即存在接收链和响应链。接收链如上文所述，和UIView绑定，由UIView的层次决定接收顺序。&lt;/p&gt;
&lt;p&gt;而响应链在apple君的定义下，逻辑出奇的简单，只有一个方法可以设置多个gestureRecognizer的响应关系：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// create a relationship with another gesture recognizer that will prevent this gesture&amp;apos;s actions from being called until otherGestureRecognizer transitions to UIGestureRecognizerStateFailed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// if otherGestureRecognizer transitions to UIGestureRecognizerStateRecognized or UIGestureRecognizerStateBegan then this recognizer will instead transition to UIGestureRecognizerStateFailed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// example usage: a single tap may require a double tap to fail&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)requireGestureRecognizerToFail:(UIGestureRecognizer *)otherGestureRecognizer;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个UIGesturerecognizer都是一个有限状态机，上述方法会在两个gestureRecognizer间建立一个依托于state的依赖关系，当被依赖的gestureRecognizer.state = failed时，另一个gestureRecognizer才能对手势进行响应。&lt;/p&gt;
&lt;p&gt;于是，添加如下操作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;在创建contentView的时候添加入如下，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        UIScreenEdgePanGestureRecognizer *screenEdgePanGestureRecognizer = self.screenEdgePanGestureRecognizer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [_contentPageView.panGestureRecognizer requireGestureRecognizerToFail:screenEdgePanGestureRecognizer];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (UIScreenEdgePanGestureRecognizer *)screenEdgePanGestureRecognizer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UIScreenEdgePanGestureRecognizer *screenEdgePanGestureRecognizer = nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (self.navigationController.view.gestureRecognizers.count &amp;gt; 0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for (UIGestureRecognizer *recognizer in self.navigationController.view.gestureRecognizers)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if ([recognizer isKindOfClass:[UIScreenEdgePanGestureRecognizer class]])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                screenEdgePanGestureRecognizer = (UIScreenEdgePanGestureRecognizer *)recognizer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return screenEdgePanGestureRecognizer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lexingyu/p/3702742.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7下滑动返回与ScrollView共存二三事&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cDigger/CoExistOfScrollViewAndBackGesture/tree/master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;之前因为某些历史原因，外卖基本禁止了所有的滑动返回手势，这次产品过来说需要开发一些正常流程的返回操作，于是在修复菜单页的过程中遇到了一些问题。菜单页可以说是整个外卖最复杂的页面，如下图&lt;img src=&quot;http://o981ibvmi.bkt.clouddn.com/QQ20160722-2@2x.png&quot; alt=&quot;菜单页&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中有p1,p2,p3,p4,p5，整个菜单页的结构是：&lt;br&gt;P5 最底层，UIScrollView&lt;br&gt;P4 标题，UIView&lt;br&gt;P3 内容, UIView&lt;br&gt;P2 tab, UIScrollView&lt;br&gt;P1 page, UIScrollView&lt;/p&gt;
&lt;p&gt;层次是：p1 + p2 –&amp;gt; p3 + p4 –&amp;gt; p5&lt;/p&gt;
&lt;p&gt;这样就有了问题，左右滑P1，其实是UIScrollView的页面切换，分别显示，菜单，点评和商家详情。&lt;br&gt;&lt;code&gt;在整个P3区域进行滑动返回操作，是不起效果的。&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://theewind.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>atomic使用</title>
    <link href="http://theewind.github.io/2016/07/18/atomic%E4%BD%BF%E7%94%A8/"/>
    <id>http://theewind.github.io/2016/07/18/atomic使用/</id>
    <published>2016-07-18T07:41:32.000Z</published>
    <updated>2016-07-18T07:43:32.000Z</updated>
    
    <content type="html">&lt;p&gt;平时我们使用atomic的时候，是希望对一个porperty的操作进行一个原子操作，但是这里的原子操作应该是仅仅对应于Setter和Getter方法，如果property是一个array，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)setProp:(NSString &lt;em&gt;)newValue {&lt;br&gt;  [_prop lock];&lt;br&gt;  _prop = newValue;&lt;br&gt;  [_prop unlock];&lt;br&gt;}&lt;br&gt;按我理解：&lt;br&gt;1.此处的线程安全是就getter,setter而言的。比如对于@property(nonatomic,copy)NSString &lt;/em&gt;str; 当调用self.str = @”HELLO,GUY”;如果是多线程，在一个线程执行setter方法的时候，会涉及到字符串拷贝，另一个线程去读取，很可能读到一半的数据，也就是garbage数据。&lt;br&gt;2.另外的话，它也仅限于getter,setter时的线程安全。比如@property(atomic,strong)NSMutableArray *arr;如果一个线程循环读数据，一个线程循环写数据，肯定会产生内存问题。因为它和setter,getter没有关系。 &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;平时我们使用atomic的时候，是希望对一个porperty的操作进行一个原子操作，但是这里的原子操作应该是仅仅对应于Setter和Getter方法，如果property是一个array，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)setProp:(NSString &lt;em
    
    </summary>
    
    
  </entry>
  
</feed>
